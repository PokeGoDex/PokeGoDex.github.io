{"version":3,"file":"pogolitics.js","mappings":"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,6BACA,cACA,eACA,eCvBR,qDACI,WAAsCic,MAAM,CACxC,KAAS,MACT,OAAS,aACT,KAAS,WACT,OAAS,YACT,KAAS,WACT,OAAS,aACT,KAAS,WACT,OAAS,aACT,KAAS,WACT,OAAS,aACT,KAAS,UACT,OAAS,aACT,KAAS,WACT,OAAS,aACT,KAAS,UACT,OAAS,YACT,KAAS,WACT,OAAS,aACT,MAAS,OACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,UACT,QAAS,YACT,MAAS,WACT,QAAS,aACT,MAAS,WACT,QAAS,YACT,MAAS,WACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,OACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,SACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,WACT,QAAS,WACT,MAAS,UACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,OACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,UACT,QAAS,aACT,MAAS,WACT,QAAS,aACT,MAAS,SACT,QAAS,aACT,MAAS,OACT,QAAS,YACT,MAAS,WACT,QAAS,YACT,MAAS,OACT,QAAS,YACT,MAAS,OACT,QAAS,OACT,MAAS,WACT,QAAS,YACT,MAAS,WACT,QAAS,WACT,MAAS,WACT,QAAS,WACT,MAAS,WACT,QAAS,WACT,MAAS,WACT,QAAS,WACT,MAAS,WACT,QAAS,WACT,MAAS,WACT,QAAS,WACT,MAAS,mnJL5Fb,kDACI,GAAI,yBAAJ,IAES,qCADG,iCAAc,4BACjB,8EAFT,gEAIS,qCAFA,cACAp3E,OACA,qFAHL,mBAGK,cAJT,+BAOA,OAAO,iRARX,6ZAWA,kDAC2B,MAAvB,GAAe,MAAX,sBAA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","sources":["webpack://pogolitics/webpack/universalModuleDefinition","webpack://pogolitics/../../node_modules/@emotion/sheet/dist/emotion-sheet.browser.esm.js","webpack://pogolitics/../../node_modules/stylis/src/Utility.js","webpack://pogolitics/../../node_modules/stylis/src/Tokenizer.js","webpack://pogolitics/../../node_modules/stylis/src/Enum.js","webpack://pogolitics/../../node_modules/stylis/src/Serializer.js","webpack://pogolitics/../../node_modules/stylis/src/Parser.js","webpack://pogolitics/../../node_modules/@emotion/cache/dist/emotion-cache.browser.esm.js","webpack://pogolitics/../../node_modules/stylis/src/Middleware.js","webpack://pogolitics/../../node_modules/@emotion/css/create-instance/dist/emotion-css-create-instance.esm.js","webpack://pogolitics/../../node_modules/@emotion/css/dist/emotion-css.esm.js","webpack://pogolitics/../../node_modules/@emotion/memoize/dist/emotion-memoize.esm.js","webpack://pogolitics/../../node_modules/@emotion/hash/dist/emotion-hash.esm.js","webpack://pogolitics/../../node_modules/@emotion/unitless/dist/emotion-unitless.esm.js","webpack://pogolitics/../../node_modules/@emotion/serialize/dist/emotion-serialize.browser.esm.js","webpack://pogolitics/../../node_modules/@babel/runtime/helpers/esm/extends.js","webpack://pogolitics/../../node_modules/@emotion/is-prop-valid/dist/emotion-is-prop-valid.esm.js","webpack://pogolitics/../../node_modules/@emotion/use-insertion-effect-with-fallbacks/dist/emotion-use-insertion-effect-with-fallbacks.browser.esm.js","webpack://pogolitics/../../node_modules/@emotion/react/dist/emotion-element-6a883da9.browser.esm.js","webpack://pogolitics/../../node_modules/@emotion/styled/base/dist/emotion-styled-base.browser.esm.js","webpack://pogolitics/../../node_modules/@emotion/styled/dist/emotion-styled.browser.esm.js","webpack://pogolitics/../../node_modules/@emotion/utils/dist/emotion-utils.browser.esm.js","webpack://pogolitics/../../node_modules/@remix-run/router/history.ts","webpack://pogolitics/../../node_modules/@remix-run/router/utils.ts","webpack://pogolitics/../../node_modules/@remix-run/router/router.ts","webpack://pogolitics/../../node_modules/bootstrap-switch-button-react/lib/bootstrap-switch-button-react.js","webpack://pogolitics/../../node_modules/bootstrap-switch-button-react/node_modules/react/cjs/react.production.min.js","webpack://pogolitics/../../node_modules/bootstrap-switch-button-react/node_modules/react/index.js","webpack://pogolitics/../../node_modules/object-assign/index.js","webpack://pogolitics/../../node_modules/react-dom/cjs/react-dom.production.min.js","webpack://pogolitics/../../node_modules/react-dom/client.js","webpack://pogolitics/../../node_modules/react-dom/index.js","webpack://pogolitics/../../node_modules/react-router-dom/dom.ts","webpack://pogolitics/../../node_modules/react-router-dom/index.tsx","webpack://pogolitics/../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimClient.ts","webpack://pogolitics/../../node_modules/react-router/lib/use-sync-external-store-shim/index.ts","webpack://pogolitics/../../node_modules/react-router/lib/use-sync-external-store-shim/useSyncExternalStoreShimServer.ts","webpack://pogolitics/../../node_modules/react-router/lib/context.ts","webpack://pogolitics/../../node_modules/react-router/lib/hooks.tsx","webpack://pogolitics/../../node_modules/react-router/lib/components.tsx","webpack://pogolitics/../../node_modules/react-router/index.ts","webpack://pogolitics/../../node_modules/react/cjs/react.production.min.js","webpack://pogolitics/../../node_modules/react/index.js","webpack://pogolitics/../../node_modules/scheduler/cjs/scheduler.production.min.js","webpack://pogolitics/../../node_modules/scheduler/index.js","webpack://pogolitics/./kotlin-dce/kotlin-csstype.js","webpack://pogolitics/./kotlin-dce/kotlin-emotion.js","webpack://pogolitics/./kotlin-dce/kotlin-js.js","webpack://pogolitics/./kotlin-dce/kotlin-react-core.js","webpack://pogolitics/./kotlin-dce/kotlin-react-dom.js","webpack://pogolitics/./kotlin-dce/kotlin-react.js","webpack://pogolitics/./kotlin-dce/wrapper.js","webpack://pogolitics/./kotlin-dce/js/arrayUtils.js","webpack://pogolitics/./kotlin-dce/js/conversions.js","webpack://pogolitics/./kotlin-dce/js/core.js","webpack://pogolitics/./kotlin-dce/js/misc.js","webpack://pogolitics/./kotlin-dce/js/polyfills.js","webpack://pogolitics/./kotlin-dce/js/markerFunctions.js","webpack://pogolitics/./kotlin-dce/js/rtti.js","webpack://pogolitics/./kotlin-dce/js/long.js","webpack://pogolitics/./kotlin-dce/runtime/Enum.kt","webpack://pogolitics/./kotlin-dce/runtime/arrayUtils.kt","webpack://pogolitics/./kotlin-dce/primitiveCompanionObjects.kt","webpack://pogolitics/./kotlin-dce/common/src/generated/_Arrays.kt","webpack://pogolitics/./kotlin-dce/common/src/generated/_Ranges.kt","webpack://pogolitics/./kotlin-dce/unsigned/src/kotlin/UByte.kt","webpack://pogolitics/./kotlin-dce/unsigned/src/kotlin/UInt.kt","webpack://pogolitics/./kotlin-dce/unsigned/src/kotlin/UShort.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/Collections.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/Maps.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/Sets.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/ranges/PrimitiveRanges.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/StringNumberConversions.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/time/Duration.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/Sequences.kt","webpack://pogolitics/./kotlin-dce/common/src/generated/_Collections.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/Iterables.kt","webpack://pogolitics/./kotlin-dce/common/src/generated/_Sequences.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/Preconditions.kt","webpack://pogolitics/./kotlin-dce/common/src/generated/_Strings.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/Strings.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/string.kt","webpack://pogolitics/./kotlin-dce/builtin-sources/Unit.kt","webpack://pogolitics/./kotlin-dce/unsigned/src/kotlin/UnsignedUtils.kt","webpack://pogolitics/./kotlin-dce/builtin-sources/Collections.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/builtins.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/CoroutineImpl.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/Standard.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/Result.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/Continuation.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/intrinsics/IntrinsicsJs.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/exceptions.kt","webpack://pogolitics/./kotlin-dce/js/src/generated/_ArraysJs.kt","webpack://pogolitics/./kotlin-dce/js/src/generated/_ComparisonsJs.kt","webpack://pogolitics/./kotlin-dce/js/src/generated/_DigitChars.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/CharCode.kt","webpack://pogolitics/./kotlin-dce/js/src/generated/_WhitespaceChars.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/kotlin.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/AbstractMutableCollection.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/AbstractMutableList.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/AbstractMutableMap.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/AbstractMutableSet.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/ArrayList.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/ArraySorting.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/EqualityComparator.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/Comparator.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/HashMap.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/HashSet.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/InternalHashCodeMap.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/InternalStringMap.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/LinkedHashMap.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/LinkedHashSet.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/console.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/coroutines/SafeContinuationJs.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/exceptionUtils.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/math.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/numbers_js-v1.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/numbers.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/random/PlatformRandom.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/reflect/KClassImpl.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/collections/InternalMap.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/jsOperators.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/reflect/primitives.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/reflect/reflection.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/regexp.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/StringBuilderJs.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/char.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/numberConversions.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/regex.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/StringBuilder.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/stringsCode.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/time/DurationJs.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/time/DurationUnit.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/AbstractCollection.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/AbstractList.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/AbstractMap.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/AbstractSet.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/MapWithDefault.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/MutableCollections.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/PrimitiveIterators.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/collections/SequenceBuilder.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/ContinuationInterceptor.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/CoroutineContext.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/CoroutineContextImpl.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/coroutines/intrinsics/Intrinsics.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/internal/progressionUtil.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/random/Random.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/random/XorWowRandom.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/ranges/ProgressionIterators.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/ranges/Progressions.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/ranges/Ranges.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/Appendable.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/Char.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/Typography.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/ranges/Range.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/text/regex/MatchResult.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/time/DurationUnit.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/Tuples.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/coroutines/cancellation/CancellationException.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/reflect/JsClass.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/comparisons/Comparisons.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/coroutines/js/internal/EmptyContinuation.kt","webpack://pogolitics/./kotlin-dce/js/src/kotlin/text/utf8Encoding.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/DeepRecursive.kt","webpack://pogolitics/../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/AtomicFU.common.kt","webpack://pogolitics/../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/Trace.common.kt","webpack://pogolitics/../../../../../atomicfu/src/commonMain/kotlin/kotlinx/atomicfu/TraceFormat.kt","webpack://pogolitics/../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/AtomicFU.kt","webpack://pogolitics/../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/locks/Synchronized.kt","webpack://pogolitics/../../../../../atomicfu/src/jsMain/kotlin/kotlinx/atomicfu/Trace.kt","webpack://pogolitics/../../../../../common/src/Delay.kt","webpack://pogolitics/../../../../../common/src/EventLoop.common.kt","webpack://pogolitics/./kotlin-dce/src/kotlin/util/HashCode.kt","webpack://pogolitics/../../../../../common/src/flow/SharedFlow.kt","webpack://pogolitics/../../../../../common/src/internal/LockFreeTaskQueue.kt","webpack://pogolitics/../../../../../js/src/JSDispatcher.kt","webpack://pogolitics/../../../../../common/src/AbstractCoroutine.kt","webpack://pogolitics/../../../../../common/src/Builders.common.kt","webpack://pogolitics/../../../../../common/src/CancellableContinuation.kt","webpack://pogolitics/../../../../../common/src/CancellableContinuationImpl.kt","webpack://pogolitics/../../../../../js/src/CoroutineContext.kt","webpack://pogolitics/../../../../../common/src/CompletionState.kt","webpack://pogolitics/../../../../../common/src/CoroutineDispatcher.kt","webpack://pogolitics/../../../../../common/src/CoroutineExceptionHandler.kt","webpack://pogolitics/../../../../../common/src/CoroutineStart.kt","webpack://pogolitics/../../../../../common/src/CoroutineScope.kt","webpack://pogolitics/../../../../../common/src/Exceptions.common.kt","webpack://pogolitics/../../../../../common/src/Job.kt","webpack://pogolitics/../../../../../common/src/JobSupport.kt","webpack://pogolitics/../../../../../common/src/MainCoroutineDispatcher.kt","webpack://pogolitics/../../../../../common/src/NonCancellable.kt","webpack://pogolitics/../../../../../common/src/Supervisor.kt","webpack://pogolitics/../../../../../common/src/Timeout.kt","webpack://pogolitics/../../../../../common/src/Unconfined.kt","webpack://pogolitics/../../../../../js/src/internal/LinkedList.kt","webpack://pogolitics/../../../../../common/src/CompletionHandler.common.kt","webpack://pogolitics/../../../../../js/src/internal/StackTraceRecovery.kt","webpack://pogolitics/../../../../../common/src/flow/terminal/Collection.kt","webpack://pogolitics/../../../../../common/src/flow/terminal/Count.kt","webpack://pogolitics/../../../../../common/src/internal/ArrayQueue.kt","webpack://pogolitics/../../../../../common/src/internal/Atomic.kt","webpack://pogolitics/../../../../../common/src/internal/DispatchedContinuation.kt","webpack://pogolitics/../../../../../js/src/internal/ThreadContext.kt","webpack://pogolitics/../../../../../common/src/internal/DispatchedTask.kt","webpack://pogolitics/../../../../../common/src/internal/LimitedDispatcher.kt","webpack://pogolitics/../../../../../common/src/channels/Channels.common.kt","webpack://pogolitics/../../../../../common/src/flow/FlowCollector.kt","webpack://pogolitics/../../../../../common/src/flow/operators/Limit.kt","webpack://pogolitics/../../../../../common/src/flow/operators/Lint.kt","webpack://pogolitics/../../../../../common/src/flow/terminal/Collect.kt","webpack://pogolitics/../../../../../common/src/flow/internal/FlowExceptions.common.kt","webpack://pogolitics/../../../../../common/src/flow/terminal/Reduce.kt","webpack://pogolitics/../../../../../common/src/internal/Scopes.kt","webpack://pogolitics/../../../../../common/src/internal/Symbol.kt","webpack://pogolitics/../../../../../common/src/internal/SystemProps.common.kt","webpack://pogolitics/../../../../../js/src/internal/SystemProps.kt","webpack://pogolitics/../../../../../common/src/intrinsics/Cancellable.kt","webpack://pogolitics/../../../../../common/src/intrinsics/Undispatched.kt","webpack://pogolitics/../../../../../js/src/Runnable.kt","webpack://pogolitics/../../../../../common/src/selects/Select.kt","webpack://pogolitics/../../../../../common/src/selects/SelectUnbiased.kt","webpack://pogolitics/../../../../../common/src/sync/Mutex.kt","webpack://pogolitics/../../../../../js/src/CompletionHandler.kt","webpack://pogolitics/../../../../../js/src/CoroutineExceptionHandlerImpl.kt","webpack://pogolitics/../../../../../js/src/Debug.kt","webpack://pogolitics/../../../../../js/src/Dispatchers.kt","webpack://pogolitics/../../../../../common/src/selects/WhileSelect.kt","webpack://pogolitics/../../../../../common/src/sync/Semaphore.kt","webpack://pogolitics/../../../../../js/src/EventLoop.kt","webpack://pogolitics/../../../../../js/src/Exceptions.kt","webpack://pogolitics/../../../../../js/src/Promise.kt","webpack://pogolitics/../../../../../js/src/SchedulerTask.kt","webpack://pogolitics/../../../../../js/src/Window.kt","webpack://pogolitics/../../../../../js/src/flow/internal/FlowExceptions.kt","webpack://pogolitics/../../../../../js/src/internal/Concurrent.kt","webpack://pogolitics/../../../../../js/src/internal/ThreadLocal.kt","webpack://pogolitics/../../../../../common/src/channels/AbstractChannel.kt","webpack://pogolitics/../../../../../common/src/flow/StateFlow.kt","webpack://pogolitics/../../../../../common/src/flow/internal/AbstractSharedFlow.kt","webpack://pogolitics/../../../../../common/src/flow/internal/NullSurrogate.kt","webpack://pogolitics/../../../../../common/src/flow/operators/Merge.kt","webpack://pogolitics/../../../../../common/src/internal/ConcurrentLinkedList.kt","webpack://pogolitics/../../../../../common/src/internal/LockFreeLinkedList.common.kt","webpack://pogolitics/../kotlin/kotlin-emotion.js","webpack://pogolitics/../kotlin/js/src/kotlin/math.kt","webpack://pogolitics/../kotlin/src/kotlin/time/Duration.kt","webpack://pogolitics/../kotlin/common/src/generated/_Arrays.kt","webpack://pogolitics/../kotlin/common/src/generated/_Collections.kt","webpack://pogolitics/../kotlin/src/kotlin/comparisons/Comparisons.kt","webpack://pogolitics/../kotlin/src/kotlin/text/Strings.kt","webpack://pogolitics/../kotlin/src/kotlin/util/HashCode.kt","webpack://pogolitics/../kotlin/src/kotlin/collections/Sets.kt","webpack://pogolitics/../kotlin/js/src/kotlin/text/numberConversions.kt","webpack://pogolitics/../kotlin/src/kotlin/CharCode.kt","webpack://pogolitics/../kotlin/src/kotlin/collections/Maps.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/api/Api.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/App.kt","webpack://pogolitics/../kotlin/kotlin-js.js","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/AppConfig.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/CpCalculator.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/CpMultiplayer.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/HomePageController.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/MissingDataException.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/MoveSetsMapper.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/MoveSetStatsCalculator.kt","webpack://pogolitics/../kotlin/src/kotlin/util/Standard.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/PokemonIndexService.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/PokemonListController.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/SinglePokemonController.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/ControllerResult.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/KeyCodes.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/Main.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/Attack.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/BattleMode.kt","webpack://pogolitics/../kotlin/js/src/kotlin/text/string.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/HomePageModel.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/IVs.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/MoveSet.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/PokemonEntry.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/PokemonForm.kt","webpack://pogolitics/../kotlin/js/src/kotlin/text/char.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/PokemonIndividualValuesState.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/PokemonListModel.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/PokemonType.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/model/SinglePokemonModel.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/NumberExtension.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/BasicStylesheet.kt","webpack://pogolitics/../kotlin/kotlin-csstype.js","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/Attack.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/BasicPokemonInfo.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/Breadcrumbs.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/Header.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/IVBar.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/IVStatsWidget.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/LeagueStatsWidget.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/NavigationArrow.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/PokemonTypeIcon.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/SearchBox.kt","webpack://pogolitics/../kotlin/kotlin-react-core.js","webpack://pogolitics/../kotlin/src/kotlin/util/FloorDivMod.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/component/StaticStat.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/ComponentUtils.kt","webpack://pogolitics/../kotlin/src/kotlin/collections/Collections.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/HomePage.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/Layout.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/MoveSetsTable.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/NotFoundPage.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/PokemonListPage.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/SinglePokemonPage.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/view/StyleConstants.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/controller/GameConstants.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/Css.kt","webpack://pogolitics/../../../../src/main/kotlin/pogolitics/EnvVariables.kt","webpack://pogolitics/webpack/bootstrap","webpack://pogolitics/webpack/runtime/create fake namespace object","webpack://pogolitics/webpack/runtime/define property getters","webpack://pogolitics/webpack/runtime/hasOwnProperty shorthand","webpack://pogolitics/webpack/runtime/make namespace object","webpack://pogolitics/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pogolitics\"] = factory();\n\telse\n\t\troot[\"pogolitics\"] = factory();\n})(this, function() {\nreturn ","/*\n\nBased off glamor's StyleSheet, thanks Sunil ❤️\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n\n// usage\n\nimport { StyleSheet } from '@emotion/sheet'\n\nlet styleSheet = new StyleSheet({ key: '', container: document.head })\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/\n// $FlowFixMe\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    // $FlowFixMe\n    return tag.sheet;\n  } // this weirdness brought to you by firefox\n\n  /* istanbul ignore next */\n\n\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      // $FlowFixMe\n      return document.styleSheets[i];\n    }\n  }\n}\n\nfunction createStyleElement(options) {\n  var tag = document.createElement('style');\n  tag.setAttribute('data-emotion', options.key);\n\n  if (options.nonce !== undefined) {\n    tag.setAttribute('nonce', options.nonce);\n  }\n\n  tag.appendChild(document.createTextNode(''));\n  tag.setAttribute('data-s', '');\n  return tag;\n}\n\nvar StyleSheet = /*#__PURE__*/function () {\n  // Using Node instead of HTMLElement since container may be a ShadowRoot\n  function StyleSheet(options) {\n    var _this = this;\n\n    this._insertTag = function (tag) {\n      var before;\n\n      if (_this.tags.length === 0) {\n        if (_this.insertionPoint) {\n          before = _this.insertionPoint.nextSibling;\n        } else if (_this.prepend) {\n          before = _this.container.firstChild;\n        } else {\n          before = _this.before;\n        }\n      } else {\n        before = _this.tags[_this.tags.length - 1].nextSibling;\n      }\n\n      _this.container.insertBefore(tag, before);\n\n      _this.tags.push(tag);\n    };\n\n    this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;\n    this.tags = [];\n    this.ctr = 0;\n    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets\n\n    this.key = options.key;\n    this.container = options.container;\n    this.prepend = options.prepend;\n    this.insertionPoint = options.insertionPoint;\n    this.before = null;\n  }\n\n  var _proto = StyleSheet.prototype;\n\n  _proto.hydrate = function hydrate(nodes) {\n    nodes.forEach(this._insertTag);\n  };\n\n  _proto.insert = function insert(rule) {\n    // the max length is how many rules we have per style tag, it's 65000 in speedy mode\n    // it's 1 in dev because we insert source maps that map a single rule to a location\n    // and you can only have one source map per style tag\n    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {\n      this._insertTag(createStyleElement(this));\n    }\n\n    var tag = this.tags[this.tags.length - 1];\n\n    if (process.env.NODE_ENV !== 'production') {\n      var isImportRule = rule.charCodeAt(0) === 64 && rule.charCodeAt(1) === 105;\n\n      if (isImportRule && this._alreadyInsertedOrderInsensitiveRule) {\n        // this would only cause problem in speedy mode\n        // but we don't want enabling speedy to affect the observable behavior\n        // so we report this error at all times\n        console.error(\"You're attempting to insert the following rule:\\n\" + rule + '\\n\\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules.');\n      }\n      this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !isImportRule;\n    }\n\n    if (this.isSpeedy) {\n      var sheet = sheetForTag(tag);\n\n      try {\n        // this is the ultrafast version, works across browsers\n        // the big drawback is that the css won't be editable in devtools\n        sheet.insertRule(rule, sheet.cssRules.length);\n      } catch (e) {\n        if (process.env.NODE_ENV !== 'production' && !/:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(rule)) {\n          console.error(\"There was a problem inserting the following rule: \\\"\" + rule + \"\\\"\", e);\n        }\n      }\n    } else {\n      tag.appendChild(document.createTextNode(rule));\n    }\n\n    this.ctr++;\n  };\n\n  _proto.flush = function flush() {\n    // $FlowFixMe\n    this.tags.forEach(function (tag) {\n      return tag.parentNode && tag.parentNode.removeChild(tag);\n    });\n    this.tags = [];\n    this.ctr = 0;\n\n    if (process.env.NODE_ENV !== 'production') {\n      this._alreadyInsertedOrderInsensitiveRule = false;\n    }\n  };\n\n  return StyleSheet;\n}();\n\nexport { StyleSheet };\n","/**\n * @param {number}\n * @return {number}\n */\nexport var abs = Math.abs\n\n/**\n * @param {number}\n * @return {string}\n */\nexport var from = String.fromCharCode\n\n/**\n * @param {object}\n * @return {object}\n */\nexport var assign = Object.assign\n\n/**\n * @param {string} value\n * @param {number} length\n * @return {number}\n */\nexport function hash (value, length) {\n\treturn charat(value, 0) ^ 45 ? (((((((length << 2) ^ charat(value, 0)) << 2) ^ charat(value, 1)) << 2) ^ charat(value, 2)) << 2) ^ charat(value, 3) : 0\n}\n\n/**\n * @param {string} value\n * @return {string}\n */\nexport function trim (value) {\n\treturn value.trim()\n}\n\n/**\n * @param {string} value\n * @param {RegExp} pattern\n * @return {string?}\n */\nexport function match (value, pattern) {\n\treturn (value = pattern.exec(value)) ? value[0] : value\n}\n\n/**\n * @param {string} value\n * @param {(string|RegExp)} pattern\n * @param {string} replacement\n * @return {string}\n */\nexport function replace (value, pattern, replacement) {\n\treturn value.replace(pattern, replacement)\n}\n\n/**\n * @param {string} value\n * @param {string} search\n * @return {number}\n */\nexport function indexof (value, search) {\n\treturn value.indexOf(search)\n}\n\n/**\n * @param {string} value\n * @param {number} index\n * @return {number}\n */\nexport function charat (value, index) {\n\treturn value.charCodeAt(index) | 0\n}\n\n/**\n * @param {string} value\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */\nexport function substr (value, begin, end) {\n\treturn value.slice(begin, end)\n}\n\n/**\n * @param {string} value\n * @return {number}\n */\nexport function strlen (value) {\n\treturn value.length\n}\n\n/**\n * @param {any[]} value\n * @return {number}\n */\nexport function sizeof (value) {\n\treturn value.length\n}\n\n/**\n * @param {any} value\n * @param {any[]} array\n * @return {any}\n */\nexport function append (value, array) {\n\treturn array.push(value), value\n}\n\n/**\n * @param {string[]} array\n * @param {function} callback\n * @return {string}\n */\nexport function combine (array, callback) {\n\treturn array.map(callback).join('')\n}\n","import {from, trim, charat, strlen, substr, append, assign} from './Utility.js'\n\nexport var line = 1\nexport var column = 1\nexport var length = 0\nexport var position = 0\nexport var character = 0\nexport var characters = ''\n\n/**\n * @param {string} value\n * @param {object | null} root\n * @param {object | null} parent\n * @param {string} type\n * @param {string[] | string} props\n * @param {object[] | string} children\n * @param {number} length\n */\nexport function node (value, root, parent, type, props, children, length) {\n\treturn {value: value, root: root, parent: parent, type: type, props: props, children: children, line: line, column: column, length: length, return: ''}\n}\n\n/**\n * @param {object} root\n * @param {object} props\n * @return {object}\n */\nexport function copy (root, props) {\n\treturn assign(node('', null, null, '', null, null, 0), root, {length: -root.length}, props)\n}\n\n/**\n * @return {number}\n */\nexport function char () {\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function prev () {\n\tcharacter = position > 0 ? charat(characters, --position) : 0\n\n\tif (column--, character === 10)\n\t\tcolumn = 1, line--\n\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function next () {\n\tcharacter = position < length ? charat(characters, position++) : 0\n\n\tif (column++, character === 10)\n\t\tcolumn = 1, line++\n\n\treturn character\n}\n\n/**\n * @return {number}\n */\nexport function peek () {\n\treturn charat(characters, position)\n}\n\n/**\n * @return {number}\n */\nexport function caret () {\n\treturn position\n}\n\n/**\n * @param {number} begin\n * @param {number} end\n * @return {string}\n */\nexport function slice (begin, end) {\n\treturn substr(characters, begin, end)\n}\n\n/**\n * @param {number} type\n * @return {number}\n */\nexport function token (type) {\n\tswitch (type) {\n\t\t// \\0 \\t \\n \\r \\s whitespace token\n\t\tcase 0: case 9: case 10: case 13: case 32:\n\t\t\treturn 5\n\t\t// ! + , / > @ ~ isolate token\n\t\tcase 33: case 43: case 44: case 47: case 62: case 64: case 126:\n\t\t// ; { } breakpoint token\n\t\tcase 59: case 123: case 125:\n\t\t\treturn 4\n\t\t// : accompanied token\n\t\tcase 58:\n\t\t\treturn 3\n\t\t// \" ' ( [ opening delimit token\n\t\tcase 34: case 39: case 40: case 91:\n\t\t\treturn 2\n\t\t// ) ] closing delimit token\n\t\tcase 41: case 93:\n\t\t\treturn 1\n\t}\n\n\treturn 0\n}\n\n/**\n * @param {string} value\n * @return {any[]}\n */\nexport function alloc (value) {\n\treturn line = column = 1, length = strlen(characters = value), position = 0, []\n}\n\n/**\n * @param {any} value\n * @return {any}\n */\nexport function dealloc (value) {\n\treturn characters = '', value\n}\n\n/**\n * @param {number} type\n * @return {string}\n */\nexport function delimit (type) {\n\treturn trim(slice(position - 1, delimiter(type === 91 ? type + 2 : type === 40 ? type + 1 : type)))\n}\n\n/**\n * @param {string} value\n * @return {string[]}\n */\nexport function tokenize (value) {\n\treturn dealloc(tokenizer(alloc(value)))\n}\n\n/**\n * @param {number} type\n * @return {string}\n */\nexport function whitespace (type) {\n\twhile (character = peek())\n\t\tif (character < 33)\n\t\t\tnext()\n\t\telse\n\t\t\tbreak\n\n\treturn token(type) > 2 || token(character) > 3 ? '' : ' '\n}\n\n/**\n * @param {string[]} children\n * @return {string[]}\n */\nexport function tokenizer (children) {\n\twhile (next())\n\t\tswitch (token(character)) {\n\t\t\tcase 0: append(identifier(position - 1), children)\n\t\t\t\tbreak\n\t\t\tcase 2: append(delimit(character), children)\n\t\t\t\tbreak\n\t\t\tdefault: append(from(character), children)\n\t\t}\n\n\treturn children\n}\n\n/**\n * @param {number} index\n * @param {number} count\n * @return {string}\n */\nexport function escaping (index, count) {\n\twhile (--count && next())\n\t\t// not 0-9 A-F a-f\n\t\tif (character < 48 || character > 102 || (character > 57 && character < 65) || (character > 70 && character < 97))\n\t\t\tbreak\n\n\treturn slice(index, caret() + (count < 6 && peek() == 32 && next() == 32))\n}\n\n/**\n * @param {number} type\n * @return {number}\n */\nexport function delimiter (type) {\n\twhile (next())\n\t\tswitch (character) {\n\t\t\t// ] ) \" '\n\t\t\tcase type:\n\t\t\t\treturn position\n\t\t\t// \" '\n\t\t\tcase 34: case 39:\n\t\t\t\tif (type !== 34 && type !== 39)\n\t\t\t\t\tdelimiter(character)\n\t\t\t\tbreak\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (type === 41)\n\t\t\t\t\tdelimiter(type)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tnext()\n\t\t\t\tbreak\n\t\t}\n\n\treturn position\n}\n\n/**\n * @param {number} type\n * @param {number} index\n * @return {number}\n */\nexport function commenter (type, index) {\n\twhile (next())\n\t\t// //\n\t\tif (type + character === 47 + 10)\n\t\t\tbreak\n\t\t// /*\n\t\telse if (type + character === 42 + 42 && peek() === 47)\n\t\t\tbreak\n\n\treturn '/*' + slice(index, position - 1) + '*' + from(type === 47 ? type : next())\n}\n\n/**\n * @param {number} index\n * @return {string}\n */\nexport function identifier (index) {\n\twhile (!token(peek()))\n\t\tnext()\n\n\treturn slice(index, position)\n}\n","export var MS = '-ms-'\nexport var MOZ = '-moz-'\nexport var WEBKIT = '-webkit-'\n\nexport var COMMENT = 'comm'\nexport var RULESET = 'rule'\nexport var DECLARATION = 'decl'\n\nexport var PAGE = '@page'\nexport var MEDIA = '@media'\nexport var IMPORT = '@import'\nexport var CHARSET = '@charset'\nexport var VIEWPORT = '@viewport'\nexport var SUPPORTS = '@supports'\nexport var DOCUMENT = '@document'\nexport var NAMESPACE = '@namespace'\nexport var KEYFRAMES = '@keyframes'\nexport var FONT_FACE = '@font-face'\nexport var COUNTER_STYLE = '@counter-style'\nexport var FONT_FEATURE_VALUES = '@font-feature-values'\n","import {IMPORT, COMMENT, RULESET, DECLARATION, KEYFRAMES} from './Enum.js'\nimport {strlen, sizeof} from './Utility.js'\n\n/**\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */\nexport function serialize (children, callback) {\n\tvar output = ''\n\tvar length = sizeof(children)\n\n\tfor (var i = 0; i < length; i++)\n\t\toutput += callback(children[i], i, children, callback) || ''\n\n\treturn output\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n * @return {string}\n */\nexport function stringify (element, index, children, callback) {\n\tswitch (element.type) {\n\t\tcase IMPORT: case DECLARATION: return element.return = element.return || element.value\n\t\tcase COMMENT: return ''\n\t\tcase KEYFRAMES: return element.return = element.value + '{' + serialize(element.children, callback) + '}'\n\t\tcase RULESET: element.value = element.props.join(',')\n\t}\n\n\treturn strlen(children = serialize(element.children, callback)) ? element.return = element.value + '{' + children + '}' : ''\n}\n","import {COMMENT, RULESET, DECLARATION} from './Enum.js'\nimport {abs, charat, trim, from, sizeof, strlen, substr, append, replace, indexof} from './Utility.js'\nimport {node, char, prev, next, peek, caret, alloc, dealloc, delimit, whitespace, escaping, identifier, commenter} from './Tokenizer.js'\n\n/**\n * @param {string} value\n * @return {object[]}\n */\nexport function compile (value) {\n\treturn dealloc(parse('', null, null, null, [''], value = alloc(value), 0, [0], value))\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {string[]} rule\n * @param {string[]} rules\n * @param {string[]} rulesets\n * @param {number[]} pseudo\n * @param {number[]} points\n * @param {string[]} declarations\n * @return {object}\n */\nexport function parse (value, root, parent, rule, rules, rulesets, pseudo, points, declarations) {\n\tvar index = 0\n\tvar offset = 0\n\tvar length = pseudo\n\tvar atrule = 0\n\tvar property = 0\n\tvar previous = 0\n\tvar variable = 1\n\tvar scanning = 1\n\tvar ampersand = 1\n\tvar character = 0\n\tvar type = ''\n\tvar props = rules\n\tvar children = rulesets\n\tvar reference = rule\n\tvar characters = type\n\n\twhile (scanning)\n\t\tswitch (previous = character, character = next()) {\n\t\t\t// (\n\t\t\tcase 40:\n\t\t\t\tif (previous != 108 && charat(characters, length - 1) == 58) {\n\t\t\t\t\tif (indexof(characters += replace(delimit(character), '&', '&\\f'), '&\\f') != -1)\n\t\t\t\t\t\tampersand = -1\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t// \" ' [\n\t\t\tcase 34: case 39: case 91:\n\t\t\t\tcharacters += delimit(character)\n\t\t\t\tbreak\n\t\t\t// \\t \\n \\r \\s\n\t\t\tcase 9: case 10: case 13: case 32:\n\t\t\t\tcharacters += whitespace(previous)\n\t\t\t\tbreak\n\t\t\t// \\\n\t\t\tcase 92:\n\t\t\t\tcharacters += escaping(caret() - 1, 7)\n\t\t\t\tcontinue\n\t\t\t// /\n\t\t\tcase 47:\n\t\t\t\tswitch (peek()) {\n\t\t\t\t\tcase 42: case 47:\n\t\t\t\t\t\tappend(comment(commenter(next(), caret()), root, parent), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tcharacters += '/'\n\t\t\t\t}\n\t\t\t\tbreak\n\t\t\t// {\n\t\t\tcase 123 * variable:\n\t\t\t\tpoints[index++] = strlen(characters) * ampersand\n\t\t\t// } ; \\0\n\t\t\tcase 125 * variable: case 59: case 0:\n\t\t\t\tswitch (character) {\n\t\t\t\t\t// \\0 }\n\t\t\t\t\tcase 0: case 125: scanning = 0\n\t\t\t\t\t// ;\n\t\t\t\t\tcase 59 + offset:\n\t\t\t\t\t\tif (property > 0 && (strlen(characters) - length))\n\t\t\t\t\t\t\tappend(property > 32 ? declaration(characters + ';', rule, parent, length - 1) : declaration(replace(characters, ' ', '') + ';', rule, parent, length - 2), declarations)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @ ;\n\t\t\t\t\tcase 59: characters += ';'\n\t\t\t\t\t// { rule/at-rule\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tappend(reference = ruleset(characters, root, parent, index, offset, rules, points, type, props = [], children = [], length), rulesets)\n\n\t\t\t\t\t\tif (character === 123)\n\t\t\t\t\t\t\tif (offset === 0)\n\t\t\t\t\t\t\t\tparse(characters, root, reference, reference, props, rulesets, length, points, children)\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tswitch (atrule === 99 && charat(characters, 3) === 110 ? 100 : atrule) {\n\t\t\t\t\t\t\t\t\t// d m s\n\t\t\t\t\t\t\t\t\tcase 100: case 109: case 115:\n\t\t\t\t\t\t\t\t\t\tparse(value, reference, reference, rule && append(ruleset(value, reference, reference, 0, 0, rules, points, type, rules, props = [], length), children), rules, children, length, points, rule ? props : children)\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\t\tparse(characters, reference, reference, reference, [''], children, 0, points, children)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tindex = offset = property = 0, variable = ampersand = 1, type = characters = '', length = pseudo\n\t\t\t\tbreak\n\t\t\t// :\n\t\t\tcase 58:\n\t\t\t\tlength = 1 + strlen(characters), property = previous\n\t\t\tdefault:\n\t\t\t\tif (variable < 1)\n\t\t\t\t\tif (character == 123)\n\t\t\t\t\t\t--variable\n\t\t\t\t\telse if (character == 125 && variable++ == 0 && prev() == 125)\n\t\t\t\t\t\tcontinue\n\n\t\t\t\tswitch (characters += from(character), character * variable) {\n\t\t\t\t\t// &\n\t\t\t\t\tcase 38:\n\t\t\t\t\t\tampersand = offset > 0 ? 1 : (characters += '\\f', -1)\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// ,\n\t\t\t\t\tcase 44:\n\t\t\t\t\t\tpoints[index++] = (strlen(characters) - 1) * ampersand, ampersand = 1\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// @\n\t\t\t\t\tcase 64:\n\t\t\t\t\t\t// -\n\t\t\t\t\t\tif (peek() === 45)\n\t\t\t\t\t\t\tcharacters += delimit(next())\n\n\t\t\t\t\t\tatrule = peek(), offset = length = strlen(type = characters += identifier(caret())), character++\n\t\t\t\t\t\tbreak\n\t\t\t\t\t// -\n\t\t\t\t\tcase 45:\n\t\t\t\t\t\tif (previous === 45 && strlen(characters) == 2)\n\t\t\t\t\t\t\tvariable = 0\n\t\t\t\t}\n\t\t}\n\n\treturn rulesets\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} index\n * @param {number} offset\n * @param {string[]} rules\n * @param {number[]} points\n * @param {string} type\n * @param {string[]} props\n * @param {string[]} children\n * @param {number} length\n * @return {object}\n */\nexport function ruleset (value, root, parent, index, offset, rules, points, type, props, children, length) {\n\tvar post = offset - 1\n\tvar rule = offset === 0 ? rules : ['']\n\tvar size = sizeof(rule)\n\n\tfor (var i = 0, j = 0, k = 0; i < index; ++i)\n\t\tfor (var x = 0, y = substr(value, post + 1, post = abs(j = points[i])), z = value; x < size; ++x)\n\t\t\tif (z = trim(j > 0 ? rule[x] + ' ' + y : replace(y, /&\\f/g, rule[x])))\n\t\t\t\tprops[k++] = z\n\n\treturn node(value, root, parent, offset === 0 ? RULESET : type, props, children, length)\n}\n\n/**\n * @param {number} value\n * @param {object} root\n * @param {object?} parent\n * @return {object}\n */\nexport function comment (value, root, parent) {\n\treturn node(value, root, parent, COMMENT, from(char()), substr(value, 2, -2), 0)\n}\n\n/**\n * @param {string} value\n * @param {object} root\n * @param {object?} parent\n * @param {number} length\n * @return {object}\n */\nexport function declaration (value, root, parent, length) {\n\treturn node(value, root, parent, DECLARATION, substr(value, 0, length), substr(value, length + 1, -1), length)\n}\n","import { StyleSheet } from '@emotion/sheet';\nimport { dealloc, alloc, next, token, from, peek, delimit, slice, position, RULESET, combine, match, serialize, copy, replace, WEBKIT, MOZ, MS, KEYFRAMES, DECLARATION, hash, charat, strlen, indexof, stringify, COMMENT, rulesheet, middleware, compile } from 'stylis';\nimport '@emotion/weak-memoize';\nimport '@emotion/memoize';\n\nvar identifierWithPointTracking = function identifierWithPointTracking(begin, points, index) {\n  var previous = 0;\n  var character = 0;\n\n  while (true) {\n    previous = character;\n    character = peek(); // &\\f\n\n    if (previous === 38 && character === 12) {\n      points[index] = 1;\n    }\n\n    if (token(character)) {\n      break;\n    }\n\n    next();\n  }\n\n  return slice(begin, position);\n};\n\nvar toRules = function toRules(parsed, points) {\n  // pretend we've started with a comma\n  var index = -1;\n  var character = 44;\n\n  do {\n    switch (token(character)) {\n      case 0:\n        // &\\f\n        if (character === 38 && peek() === 12) {\n          // this is not 100% correct, we don't account for literal sequences here - like for example quoted strings\n          // stylis inserts \\f after & to know when & where it should replace this sequence with the context selector\n          // and when it should just concatenate the outer and inner selectors\n          // it's very unlikely for this sequence to actually appear in a different context, so we just leverage this fact here\n          points[index] = 1;\n        }\n\n        parsed[index] += identifierWithPointTracking(position - 1, points, index);\n        break;\n\n      case 2:\n        parsed[index] += delimit(character);\n        break;\n\n      case 4:\n        // comma\n        if (character === 44) {\n          // colon\n          parsed[++index] = peek() === 58 ? '&\\f' : '';\n          points[index] = parsed[index].length;\n          break;\n        }\n\n      // fallthrough\n\n      default:\n        parsed[index] += from(character);\n    }\n  } while (character = next());\n\n  return parsed;\n};\n\nvar getRules = function getRules(value, points) {\n  return dealloc(toRules(alloc(value), points));\n}; // WeakSet would be more appropriate, but only WeakMap is supported in IE11\n\n\nvar fixedElements = /* #__PURE__ */new WeakMap();\nvar compat = function compat(element) {\n  if (element.type !== 'rule' || !element.parent || // positive .length indicates that this rule contains pseudo\n  // negative .length indicates that this rule has been already prefixed\n  element.length < 1) {\n    return;\n  }\n\n  var value = element.value,\n      parent = element.parent;\n  var isImplicitRule = element.column === parent.column && element.line === parent.line;\n\n  while (parent.type !== 'rule') {\n    parent = parent.parent;\n    if (!parent) return;\n  } // short-circuit for the simplest case\n\n\n  if (element.props.length === 1 && value.charCodeAt(0) !== 58\n  /* colon */\n  && !fixedElements.get(parent)) {\n    return;\n  } // if this is an implicitly inserted rule (the one eagerly inserted at the each new nested level)\n  // then the props has already been manipulated beforehand as they that array is shared between it and its \"rule parent\"\n\n\n  if (isImplicitRule) {\n    return;\n  }\n\n  fixedElements.set(element, true);\n  var points = [];\n  var rules = getRules(value, points);\n  var parentRules = parent.props;\n\n  for (var i = 0, k = 0; i < rules.length; i++) {\n    for (var j = 0; j < parentRules.length; j++, k++) {\n      element.props[k] = points[i] ? rules[i].replace(/&\\f/g, parentRules[j]) : parentRules[j] + \" \" + rules[i];\n    }\n  }\n};\nvar removeLabel = function removeLabel(element) {\n  if (element.type === 'decl') {\n    var value = element.value;\n\n    if ( // charcode for l\n    value.charCodeAt(0) === 108 && // charcode for b\n    value.charCodeAt(2) === 98) {\n      // this ignores label\n      element[\"return\"] = '';\n      element.value = '';\n    }\n  }\n};\nvar ignoreFlag = 'emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason';\n\nvar isIgnoringComment = function isIgnoringComment(element) {\n  return element.type === 'comm' && element.children.indexOf(ignoreFlag) > -1;\n};\n\nvar createUnsafeSelectorsAlarm = function createUnsafeSelectorsAlarm(cache) {\n  return function (element, index, children) {\n    if (element.type !== 'rule' || cache.compat) return;\n    var unsafePseudoClasses = element.value.match(/(:first|:nth|:nth-last)-child/g);\n\n    if (unsafePseudoClasses) {\n      var isNested = element.parent === children[0]; // in nested rules comments become children of the \"auto-inserted\" rule\n      //\n      // considering this input:\n      // .a {\n      //   .b /* comm */ {}\n      //   color: hotpink;\n      // }\n      // we get output corresponding to this:\n      // .a {\n      //   & {\n      //     /* comm */\n      //     color: hotpink;\n      //   }\n      //   .b {}\n      // }\n\n      var commentContainer = isNested ? children[0].children : // global rule at the root level\n      children;\n\n      for (var i = commentContainer.length - 1; i >= 0; i--) {\n        var node = commentContainer[i];\n\n        if (node.line < element.line) {\n          break;\n        } // it is quite weird but comments are *usually* put at `column: element.column - 1`\n        // so we seek *from the end* for the node that is earlier than the rule's `element` and check that\n        // this will also match inputs like this:\n        // .a {\n        //   /* comm */\n        //   .b {}\n        // }\n        //\n        // but that is fine\n        //\n        // it would be the easiest to change the placement of the comment to be the first child of the rule:\n        // .a {\n        //   .b { /* comm */ }\n        // }\n        // with such inputs we wouldn't have to search for the comment at all\n        // TODO: consider changing this comment placement in the next major version\n\n\n        if (node.column < element.column) {\n          if (isIgnoringComment(node)) {\n            return;\n          }\n\n          break;\n        }\n      }\n\n      unsafePseudoClasses.forEach(function (unsafePseudoClass) {\n        console.error(\"The pseudo class \\\"\" + unsafePseudoClass + \"\\\" is potentially unsafe when doing server-side rendering. Try changing it to \\\"\" + unsafePseudoClass.split('-child')[0] + \"-of-type\\\".\");\n      });\n    }\n  };\n};\n\nvar isImportRule = function isImportRule(element) {\n  return element.type.charCodeAt(1) === 105 && element.type.charCodeAt(0) === 64;\n};\n\nvar isPrependedWithRegularRules = function isPrependedWithRegularRules(index, children) {\n  for (var i = index - 1; i >= 0; i--) {\n    if (!isImportRule(children[i])) {\n      return true;\n    }\n  }\n\n  return false;\n}; // use this to remove incorrect elements from further processing\n// so they don't get handed to the `sheet` (or anything else)\n// as that could potentially lead to additional logs which in turn could be overhelming to the user\n\n\nvar nullifyElement = function nullifyElement(element) {\n  element.type = '';\n  element.value = '';\n  element[\"return\"] = '';\n  element.children = '';\n  element.props = '';\n};\n\nvar incorrectImportAlarm = function incorrectImportAlarm(element, index, children) {\n  if (!isImportRule(element)) {\n    return;\n  }\n\n  if (element.parent) {\n    console.error(\"`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles.\");\n    nullifyElement(element);\n  } else if (isPrependedWithRegularRules(index, children)) {\n    console.error(\"`@import` rules can't be after other rules. Please put your `@import` rules before your other rules.\");\n    nullifyElement(element);\n  }\n};\n\n/* eslint-disable no-fallthrough */\n\nfunction prefix(value, length) {\n  switch (hash(value, length)) {\n    // color-adjust\n    case 5103:\n      return WEBKIT + 'print-' + value + value;\n    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)\n\n    case 5737:\n    case 4201:\n    case 3177:\n    case 3433:\n    case 1641:\n    case 4457:\n    case 2921: // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break\n\n    case 5572:\n    case 6356:\n    case 5844:\n    case 3191:\n    case 6645:\n    case 3005: // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,\n\n    case 6391:\n    case 5879:\n    case 5623:\n    case 6135:\n    case 4599:\n    case 4855: // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)\n\n    case 4215:\n    case 6389:\n    case 5109:\n    case 5365:\n    case 5621:\n    case 3829:\n      return WEBKIT + value + value;\n    // appearance, user-select, transform, hyphens, text-size-adjust\n\n    case 5349:\n    case 4246:\n    case 4810:\n    case 6968:\n    case 2756:\n      return WEBKIT + value + MOZ + value + MS + value + value;\n    // flex, flex-direction\n\n    case 6828:\n    case 4268:\n      return WEBKIT + value + MS + value + value;\n    // order\n\n    case 6165:\n      return WEBKIT + value + MS + 'flex-' + value + value;\n    // align-items\n\n    case 5187:\n      return WEBKIT + value + replace(value, /(\\w+).+(:[^]+)/, WEBKIT + 'box-$1$2' + MS + 'flex-$1$2') + value;\n    // align-self\n\n    case 5443:\n      return WEBKIT + value + MS + 'flex-item-' + replace(value, /flex-|-self/, '') + value;\n    // align-content\n\n    case 4675:\n      return WEBKIT + value + MS + 'flex-line-pack' + replace(value, /align-content|flex-|-self/, '') + value;\n    // flex-shrink\n\n    case 5548:\n      return WEBKIT + value + MS + replace(value, 'shrink', 'negative') + value;\n    // flex-basis\n\n    case 5292:\n      return WEBKIT + value + MS + replace(value, 'basis', 'preferred-size') + value;\n    // flex-grow\n\n    case 6060:\n      return WEBKIT + 'box-' + replace(value, '-grow', '') + WEBKIT + value + MS + replace(value, 'grow', 'positive') + value;\n    // transition\n\n    case 4554:\n      return WEBKIT + replace(value, /([^-])(transform)/g, '$1' + WEBKIT + '$2') + value;\n    // cursor\n\n    case 6187:\n      return replace(replace(replace(value, /(zoom-|grab)/, WEBKIT + '$1'), /(image-set)/, WEBKIT + '$1'), value, '') + value;\n    // background, background-image\n\n    case 5495:\n    case 3959:\n      return replace(value, /(image-set\\([^]*)/, WEBKIT + '$1' + '$`$1');\n    // justify-content\n\n    case 4968:\n      return replace(replace(value, /(.+:)(flex-)?(.*)/, WEBKIT + 'box-pack:$3' + MS + 'flex-pack:$3'), /s.+-b[^;]+/, 'justify') + WEBKIT + value + value;\n    // (margin|padding)-inline-(start|end)\n\n    case 4095:\n    case 3583:\n    case 4068:\n    case 2532:\n      return replace(value, /(.+)-inline(.+)/, WEBKIT + '$1$2') + value;\n    // (min|max)?(width|height|inline-size|block-size)\n\n    case 8116:\n    case 7059:\n    case 5753:\n    case 5535:\n    case 5445:\n    case 5701:\n    case 4933:\n    case 4677:\n    case 5533:\n    case 5789:\n    case 5021:\n    case 4765:\n      // stretch, max-content, min-content, fill-available\n      if (strlen(value) - 1 - length > 6) switch (charat(value, length + 1)) {\n        // (m)ax-content, (m)in-content\n        case 109:\n          // -\n          if (charat(value, length + 4) !== 45) break;\n        // (f)ill-available, (f)it-content\n\n        case 102:\n          return replace(value, /(.+:)(.+)-([^]+)/, '$1' + WEBKIT + '$2-$3' + '$1' + MOZ + (charat(value, length + 3) == 108 ? '$3' : '$2-$3')) + value;\n        // (s)tretch\n\n        case 115:\n          return ~indexof(value, 'stretch') ? prefix(replace(value, 'stretch', 'fill-available'), length) + value : value;\n      }\n      break;\n    // position: sticky\n\n    case 4949:\n      // (s)ticky?\n      if (charat(value, length + 1) !== 115) break;\n    // display: (flex|inline-flex)\n\n    case 6444:\n      switch (charat(value, strlen(value) - 3 - (~indexof(value, '!important') && 10))) {\n        // stic(k)y\n        case 107:\n          return replace(value, ':', ':' + WEBKIT) + value;\n        // (inline-)?fl(e)x\n\n        case 101:\n          return replace(value, /(.+:)([^;!]+)(;|!.+)?/, '$1' + WEBKIT + (charat(value, 14) === 45 ? 'inline-' : '') + 'box$3' + '$1' + WEBKIT + '$2$3' + '$1' + MS + '$2box$3') + value;\n      }\n\n      break;\n    // writing-mode\n\n    case 5936:\n      switch (charat(value, length + 11)) {\n        // vertical-l(r)\n        case 114:\n          return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'tb') + value;\n        // vertical-r(l)\n\n        case 108:\n          return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'tb-rl') + value;\n        // horizontal(-)tb\n\n        case 45:\n          return WEBKIT + value + MS + replace(value, /[svh]\\w+-[tblr]{2}/, 'lr') + value;\n      }\n\n      return WEBKIT + value + MS + value + value;\n  }\n\n  return value;\n}\n\nvar prefixer = function prefixer(element, index, children, callback) {\n  if (element.length > -1) if (!element[\"return\"]) switch (element.type) {\n    case DECLARATION:\n      element[\"return\"] = prefix(element.value, element.length);\n      break;\n\n    case KEYFRAMES:\n      return serialize([copy(element, {\n        value: replace(element.value, '@', '@' + WEBKIT)\n      })], callback);\n\n    case RULESET:\n      if (element.length) return combine(element.props, function (value) {\n        switch (match(value, /(::plac\\w+|:read-\\w+)/)) {\n          // :read-(only|write)\n          case ':read-only':\n          case ':read-write':\n            return serialize([copy(element, {\n              props: [replace(value, /:(read-\\w+)/, ':' + MOZ + '$1')]\n            })], callback);\n          // :placeholder\n\n          case '::placeholder':\n            return serialize([copy(element, {\n              props: [replace(value, /:(plac\\w+)/, ':' + WEBKIT + 'input-$1')]\n            }), copy(element, {\n              props: [replace(value, /:(plac\\w+)/, ':' + MOZ + '$1')]\n            }), copy(element, {\n              props: [replace(value, /:(plac\\w+)/, MS + 'input-$1')]\n            })], callback);\n        }\n\n        return '';\n      });\n  }\n};\n\nvar defaultStylisPlugins = [prefixer];\n\nvar createCache = function createCache(options) {\n  var key = options.key;\n\n  if (process.env.NODE_ENV !== 'production' && !key) {\n    throw new Error(\"You have to configure `key` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.\\n\" + \"If multiple caches share the same key they might \\\"fight\\\" for each other's style elements.\");\n  }\n\n  if ( key === 'css') {\n    var ssrStyles = document.querySelectorAll(\"style[data-emotion]:not([data-s])\"); // get SSRed styles out of the way of React's hydration\n    // document.head is a safe place to move them to(though note document.head is not necessarily the last place they will be)\n    // note this very very intentionally targets all style elements regardless of the key to ensure\n    // that creating a cache works inside of render of a React component\n\n    Array.prototype.forEach.call(ssrStyles, function (node) {\n      // we want to only move elements which have a space in the data-emotion attribute value\n      // because that indicates that it is an Emotion 11 server-side rendered style elements\n      // while we will already ignore Emotion 11 client-side inserted styles because of the :not([data-s]) part in the selector\n      // Emotion 10 client-side inserted styles did not have data-s (but importantly did not have a space in their data-emotion attributes)\n      // so checking for the space ensures that loading Emotion 11 after Emotion 10 has inserted some styles\n      // will not result in the Emotion 10 styles being destroyed\n      var dataEmotionAttribute = node.getAttribute('data-emotion');\n\n      if (dataEmotionAttribute.indexOf(' ') === -1) {\n        return;\n      }\n      document.head.appendChild(node);\n      node.setAttribute('data-s', '');\n    });\n  }\n\n  var stylisPlugins = options.stylisPlugins || defaultStylisPlugins;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe\n    if (/[^a-z-]/.test(key)) {\n      throw new Error(\"Emotion key must only contain lower case alphabetical characters and - but \\\"\" + key + \"\\\" was passed\");\n    }\n  }\n\n  var inserted = {};\n  var container;\n  var nodesToHydrate = [];\n\n  {\n    container = options.container || document.head;\n    Array.prototype.forEach.call( // this means we will ignore elements which don't have a space in them which\n    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements\n    document.querySelectorAll(\"style[data-emotion^=\\\"\" + key + \" \\\"]\"), function (node) {\n      var attrib = node.getAttribute(\"data-emotion\").split(' '); // $FlowFixMe\n\n      for (var i = 1; i < attrib.length; i++) {\n        inserted[attrib[i]] = true;\n      }\n\n      nodesToHydrate.push(node);\n    });\n  }\n\n  var _insert;\n\n  var omnipresentPlugins = [compat, removeLabel];\n\n  if (process.env.NODE_ENV !== 'production') {\n    omnipresentPlugins.push(createUnsafeSelectorsAlarm({\n      get compat() {\n        return cache.compat;\n      }\n\n    }), incorrectImportAlarm);\n  }\n\n  {\n    var currentSheet;\n    var finalizingPlugins = [stringify, process.env.NODE_ENV !== 'production' ? function (element) {\n      if (!element.root) {\n        if (element[\"return\"]) {\n          currentSheet.insert(element[\"return\"]);\n        } else if (element.value && element.type !== COMMENT) {\n          // insert empty rule in non-production environments\n          // so @emotion/jest can grab `key` from the (JS)DOM for caches without any rules inserted yet\n          currentSheet.insert(element.value + \"{}\");\n        }\n      }\n    } : rulesheet(function (rule) {\n      currentSheet.insert(rule);\n    })];\n    var serializer = middleware(omnipresentPlugins.concat(stylisPlugins, finalizingPlugins));\n\n    var stylis = function stylis(styles) {\n      return serialize(compile(styles), serializer);\n    };\n\n    _insert = function insert(selector, serialized, sheet, shouldCache) {\n      currentSheet = sheet;\n\n      if (process.env.NODE_ENV !== 'production' && serialized.map !== undefined) {\n        currentSheet = {\n          insert: function insert(rule) {\n            sheet.insert(rule + serialized.map);\n          }\n        };\n      }\n\n      stylis(selector ? selector + \"{\" + serialized.styles + \"}\" : serialized.styles);\n\n      if (shouldCache) {\n        cache.inserted[serialized.name] = true;\n      }\n    };\n  }\n\n  var cache = {\n    key: key,\n    sheet: new StyleSheet({\n      key: key,\n      container: container,\n      nonce: options.nonce,\n      speedy: options.speedy,\n      prepend: options.prepend,\n      insertionPoint: options.insertionPoint\n    }),\n    nonce: options.nonce,\n    inserted: inserted,\n    registered: {},\n    insert: _insert\n  };\n  cache.sheet.hydrate(nodesToHydrate);\n  return cache;\n};\n\nexport default createCache;\n","import {MS, MOZ, WEBKIT, RULESET, KEYFRAMES, DECLARATION} from './Enum.js'\nimport {match, charat, substr, strlen, sizeof, replace, combine} from './Utility.js'\nimport {copy, tokenize} from './Tokenizer.js'\nimport {serialize} from './Serializer.js'\nimport {prefix} from './Prefixer.js'\n\n/**\n * @param {function[]} collection\n * @return {function}\n */\nexport function middleware (collection) {\n\tvar length = sizeof(collection)\n\n\treturn function (element, index, children, callback) {\n\t\tvar output = ''\n\n\t\tfor (var i = 0; i < length; i++)\n\t\t\toutput += collection[i](element, index, children, callback) || ''\n\n\t\treturn output\n\t}\n}\n\n/**\n * @param {function} callback\n * @return {function}\n */\nexport function rulesheet (callback) {\n\treturn function (element) {\n\t\tif (!element.root)\n\t\t\tif (element = element.return)\n\t\t\t\tcallback(element)\n\t}\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n * @param {function} callback\n */\nexport function prefixer (element, index, children, callback) {\n\tif (element.length > -1)\n\t\tif (!element.return)\n\t\t\tswitch (element.type) {\n\t\t\t\tcase DECLARATION: element.return = prefix(element.value, element.length, children)\n\t\t\t\t\treturn\n\t\t\t\tcase KEYFRAMES:\n\t\t\t\t\treturn serialize([copy(element, {value: replace(element.value, '@', '@' + WEBKIT)})], callback)\n\t\t\t\tcase RULESET:\n\t\t\t\t\tif (element.length)\n\t\t\t\t\t\treturn combine(element.props, function (value) {\n\t\t\t\t\t\t\tswitch (match(value, /(::plac\\w+|:read-\\w+)/)) {\n\t\t\t\t\t\t\t\t// :read-(only|write)\n\t\t\t\t\t\t\t\tcase ':read-only': case ':read-write':\n\t\t\t\t\t\t\t\t\treturn serialize([copy(element, {props: [replace(value, /:(read-\\w+)/, ':' + MOZ + '$1')]})], callback)\n\t\t\t\t\t\t\t\t// :placeholder\n\t\t\t\t\t\t\t\tcase '::placeholder':\n\t\t\t\t\t\t\t\t\treturn serialize([\n\t\t\t\t\t\t\t\t\t\tcopy(element, {props: [replace(value, /:(plac\\w+)/, ':' + WEBKIT + 'input-$1')]}),\n\t\t\t\t\t\t\t\t\t\tcopy(element, {props: [replace(value, /:(plac\\w+)/, ':' + MOZ + '$1')]}),\n\t\t\t\t\t\t\t\t\t\tcopy(element, {props: [replace(value, /:(plac\\w+)/, MS + 'input-$1')]})\n\t\t\t\t\t\t\t\t\t], callback)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\treturn ''\n\t\t\t\t\t\t})\n\t\t\t}\n}\n\n/**\n * @param {object} element\n * @param {number} index\n * @param {object[]} children\n */\nexport function namespace (element) {\n\tswitch (element.type) {\n\t\tcase RULESET:\n\t\t\telement.props = element.props.map(function (value) {\n\t\t\t\treturn combine(tokenize(value), function (value, index, children) {\n\t\t\t\t\tswitch (charat(value, 0)) {\n\t\t\t\t\t\t// \\f\n\t\t\t\t\t\tcase 12:\n\t\t\t\t\t\t\treturn substr(value, 1, strlen(value))\n\t\t\t\t\t\t// \\0 ( + > ~\n\t\t\t\t\t\tcase 0: case 40: case 43: case 62: case 126:\n\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t// :\n\t\t\t\t\t\tcase 58:\n\t\t\t\t\t\t\tif (children[++index] === 'global')\n\t\t\t\t\t\t\t\tchildren[index] = '', children[++index] = '\\f' + substr(children[index], index = 1, -1)\n\t\t\t\t\t\t// \\s\n\t\t\t\t\t\tcase 32:\n\t\t\t\t\t\t\treturn index === 1 ? '' : value\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tswitch (index) {\n\t\t\t\t\t\t\t\tcase 0: element = value\n\t\t\t\t\t\t\t\t\treturn sizeof(children) > 1 ? '' : value\n\t\t\t\t\t\t\t\tcase index = sizeof(children) - 1: case 2:\n\t\t\t\t\t\t\t\t\treturn index === 2 ? value + element + element : value + element\n\t\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\t\treturn value\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t})\n\t}\n}\n","import createCache from '@emotion/cache';\nimport { serializeStyles } from '@emotion/serialize';\nimport { getRegisteredStyles, insertStyles } from '@emotion/utils';\n\nfunction insertWithoutScoping(cache, serialized) {\n  if (cache.inserted[serialized.name] === undefined) {\n    return cache.insert('', serialized, cache.sheet, true);\n  }\n}\n\nfunction merge(registered, css, className) {\n  var registeredStyles = [];\n  var rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n\n  if (registeredStyles.length < 2) {\n    return className;\n  }\n\n  return rawClassName + css(registeredStyles);\n}\n\nvar createEmotion = function createEmotion(options) {\n  var cache = createCache(options); // $FlowFixMe\n\n  cache.sheet.speedy = function (value) {\n    if (process.env.NODE_ENV !== 'production' && this.ctr !== 0) {\n      throw new Error('speedy must be changed before any rules are inserted');\n    }\n\n    this.isSpeedy = value;\n  };\n\n  cache.compat = true;\n\n  var css = function css() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var serialized = serializeStyles(args, cache.registered, undefined);\n    insertStyles(cache, serialized, false);\n    return cache.key + \"-\" + serialized.name;\n  };\n\n  var keyframes = function keyframes() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    var serialized = serializeStyles(args, cache.registered);\n    var animation = \"animation-\" + serialized.name;\n    insertWithoutScoping(cache, {\n      name: serialized.name,\n      styles: \"@keyframes \" + animation + \"{\" + serialized.styles + \"}\"\n    });\n    return animation;\n  };\n\n  var injectGlobal = function injectGlobal() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    var serialized = serializeStyles(args, cache.registered);\n    insertWithoutScoping(cache, serialized);\n  };\n\n  var cx = function cx() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    return merge(cache.registered, css, classnames(args));\n  };\n\n  return {\n    css: css,\n    cx: cx,\n    injectGlobal: injectGlobal,\n    keyframes: keyframes,\n    hydrate: function hydrate(ids) {\n      ids.forEach(function (key) {\n        cache.inserted[key] = true;\n      });\n    },\n    flush: function flush() {\n      cache.registered = {};\n      cache.inserted = {};\n      cache.sheet.flush();\n    },\n    // $FlowFixMe\n    sheet: cache.sheet,\n    cache: cache,\n    getRegisteredStyles: getRegisteredStyles.bind(null, cache.registered),\n    merge: merge.bind(null, cache.registered, css)\n  };\n};\n\nvar classnames = function classnames(args) {\n  var cls = '';\n\n  for (var i = 0; i < args.length; i++) {\n    var arg = args[i];\n    if (arg == null) continue;\n    var toAdd = void 0;\n\n    switch (typeof arg) {\n      case 'boolean':\n        break;\n\n      case 'object':\n        {\n          if (Array.isArray(arg)) {\n            toAdd = classnames(arg);\n          } else {\n            toAdd = '';\n\n            for (var k in arg) {\n              if (arg[k] && k) {\n                toAdd && (toAdd += ' ');\n                toAdd += k;\n              }\n            }\n          }\n\n          break;\n        }\n\n      default:\n        {\n          toAdd = arg;\n        }\n    }\n\n    if (toAdd) {\n      cls && (cls += ' ');\n      cls += toAdd;\n    }\n  }\n\n  return cls;\n};\n\nexport default createEmotion;\n","import '@emotion/cache';\nimport '@emotion/serialize';\nimport '@emotion/utils';\nimport createEmotion from '../create-instance/dist/emotion-css-create-instance.esm.js';\n\nvar _createEmotion = createEmotion({\n  key: 'css'\n}),\n    flush = _createEmotion.flush,\n    hydrate = _createEmotion.hydrate,\n    cx = _createEmotion.cx,\n    merge = _createEmotion.merge,\n    getRegisteredStyles = _createEmotion.getRegisteredStyles,\n    injectGlobal = _createEmotion.injectGlobal,\n    keyframes = _createEmotion.keyframes,\n    css = _createEmotion.css,\n    sheet = _createEmotion.sheet,\n    cache = _createEmotion.cache;\n\nexport { cache, css, cx, flush, getRegisteredStyles, hydrate, injectGlobal, keyframes, merge, sheet };\n","function memoize(fn) {\n  var cache = Object.create(null);\n  return function (arg) {\n    if (cache[arg] === undefined) cache[arg] = fn(arg);\n    return cache[arg];\n  };\n}\n\nexport default memoize;\n","/* eslint-disable */\n// Inspired by https://github.com/garycourt/murmurhash-js\n// Ported from https://github.com/aappleby/smhasher/blob/61a0530f28277f2e850bfc39600ce61d02b518de/src/MurmurHash2.cpp#L37-L86\nfunction murmur2(str) {\n  // 'm' and 'r' are mixing constants generated offline.\n  // They're not really 'magic', they just happen to work well.\n  // const m = 0x5bd1e995;\n  // const r = 24;\n  // Initialize the hash\n  var h = 0; // Mix 4 bytes at a time into the hash\n\n  var k,\n      i = 0,\n      len = str.length;\n\n  for (; len >= 4; ++i, len -= 4) {\n    k = str.charCodeAt(i) & 0xff | (str.charCodeAt(++i) & 0xff) << 8 | (str.charCodeAt(++i) & 0xff) << 16 | (str.charCodeAt(++i) & 0xff) << 24;\n    k =\n    /* Math.imul(k, m): */\n    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16);\n    k ^=\n    /* k >>> r: */\n    k >>> 24;\n    h =\n    /* Math.imul(k, m): */\n    (k & 0xffff) * 0x5bd1e995 + ((k >>> 16) * 0xe995 << 16) ^\n    /* Math.imul(h, m): */\n    (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  } // Handle the last few bytes of the input array\n\n\n  switch (len) {\n    case 3:\n      h ^= (str.charCodeAt(i + 2) & 0xff) << 16;\n\n    case 2:\n      h ^= (str.charCodeAt(i + 1) & 0xff) << 8;\n\n    case 1:\n      h ^= str.charCodeAt(i) & 0xff;\n      h =\n      /* Math.imul(h, m): */\n      (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  } // Do a few final mixes of the hash to ensure the last few\n  // bytes are well-incorporated.\n\n\n  h ^= h >>> 13;\n  h =\n  /* Math.imul(h, m): */\n  (h & 0xffff) * 0x5bd1e995 + ((h >>> 16) * 0xe995 << 16);\n  return ((h ^ h >>> 15) >>> 0).toString(36);\n}\n\nexport default murmur2;\n","var unitlessKeys = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  // SVG-related properties\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\n\nexport default unitlessKeys;\n","import hashString from '@emotion/hash';\nimport unitless from '@emotion/unitless';\nimport memoize from '@emotion/memoize';\n\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\nvar UNDEFINED_AS_OBJECT_KEY_ERROR = \"You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).\";\nvar hyphenateRegex = /[A-Z]|^ms/g;\nvar animationRegex = /_EMO_([^_]+?)_([^]*?)_EMO_/g;\n\nvar isCustomProperty = function isCustomProperty(property) {\n  return property.charCodeAt(1) === 45;\n};\n\nvar isProcessableValue = function isProcessableValue(value) {\n  return value != null && typeof value !== 'boolean';\n};\n\nvar processStyleName = /* #__PURE__ */memoize(function (styleName) {\n  return isCustomProperty(styleName) ? styleName : styleName.replace(hyphenateRegex, '-$&').toLowerCase();\n});\n\nvar processStyleValue = function processStyleValue(key, value) {\n  switch (key) {\n    case 'animation':\n    case 'animationName':\n      {\n        if (typeof value === 'string') {\n          return value.replace(animationRegex, function (match, p1, p2) {\n            cursor = {\n              name: p1,\n              styles: p2,\n              next: cursor\n            };\n            return p1;\n          });\n        }\n      }\n  }\n\n  if (unitless[key] !== 1 && !isCustomProperty(key) && typeof value === 'number' && value !== 0) {\n    return value + 'px';\n  }\n\n  return value;\n};\n\nif (process.env.NODE_ENV !== 'production') {\n  var contentValuePattern = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\\(|(no-)?(open|close)-quote/;\n  var contentValues = ['normal', 'none', 'initial', 'inherit', 'unset'];\n  var oldProcessStyleValue = processStyleValue;\n  var msPattern = /^-ms-/;\n  var hyphenPattern = /-(.)/g;\n  var hyphenatedCache = {};\n\n  processStyleValue = function processStyleValue(key, value) {\n    if (key === 'content') {\n      if (typeof value !== 'string' || contentValues.indexOf(value) === -1 && !contentValuePattern.test(value) && (value.charAt(0) !== value.charAt(value.length - 1) || value.charAt(0) !== '\"' && value.charAt(0) !== \"'\")) {\n        throw new Error(\"You seem to be using a value for 'content' without quotes, try replacing it with `content: '\\\"\" + value + \"\\\"'`\");\n      }\n    }\n\n    var processed = oldProcessStyleValue(key, value);\n\n    if (processed !== '' && !isCustomProperty(key) && key.indexOf('-') !== -1 && hyphenatedCache[key] === undefined) {\n      hyphenatedCache[key] = true;\n      console.error(\"Using kebab-case for css properties in objects is not supported. Did you mean \" + key.replace(msPattern, 'ms-').replace(hyphenPattern, function (str, _char) {\n        return _char.toUpperCase();\n      }) + \"?\");\n    }\n\n    return processed;\n  };\n}\n\nvar noComponentSelectorMessage = 'Component selectors can only be used in conjunction with ' + '@emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware ' + 'compiler transform.';\n\nfunction handleInterpolation(mergedProps, registered, interpolation) {\n  if (interpolation == null) {\n    return '';\n  }\n\n  if (interpolation.__emotion_styles !== undefined) {\n    if (process.env.NODE_ENV !== 'production' && interpolation.toString() === 'NO_COMPONENT_SELECTOR') {\n      throw new Error(noComponentSelectorMessage);\n    }\n\n    return interpolation;\n  }\n\n  switch (typeof interpolation) {\n    case 'boolean':\n      {\n        return '';\n      }\n\n    case 'object':\n      {\n        if (interpolation.anim === 1) {\n          cursor = {\n            name: interpolation.name,\n            styles: interpolation.styles,\n            next: cursor\n          };\n          return interpolation.name;\n        }\n\n        if (interpolation.styles !== undefined) {\n          var next = interpolation.next;\n\n          if (next !== undefined) {\n            // not the most efficient thing ever but this is a pretty rare case\n            // and there will be very few iterations of this generally\n            while (next !== undefined) {\n              cursor = {\n                name: next.name,\n                styles: next.styles,\n                next: cursor\n              };\n              next = next.next;\n            }\n          }\n\n          var styles = interpolation.styles + \";\";\n\n          if (process.env.NODE_ENV !== 'production' && interpolation.map !== undefined) {\n            styles += interpolation.map;\n          }\n\n          return styles;\n        }\n\n        return createStringFromObject(mergedProps, registered, interpolation);\n      }\n\n    case 'function':\n      {\n        if (mergedProps !== undefined) {\n          var previousCursor = cursor;\n          var result = interpolation(mergedProps);\n          cursor = previousCursor;\n          return handleInterpolation(mergedProps, registered, result);\n        } else if (process.env.NODE_ENV !== 'production') {\n          console.error('Functions that are interpolated in css calls will be stringified.\\n' + 'If you want to have a css call based on props, create a function that returns a css call like this\\n' + 'let dynamicStyle = (props) => css`color: ${props.color}`\\n' + 'It can be called directly with props or interpolated in a styled call like this\\n' + \"let SomeComponent = styled('div')`${dynamicStyle}`\");\n        }\n\n        break;\n      }\n\n    case 'string':\n      if (process.env.NODE_ENV !== 'production') {\n        var matched = [];\n        var replaced = interpolation.replace(animationRegex, function (match, p1, p2) {\n          var fakeVarName = \"animation\" + matched.length;\n          matched.push(\"const \" + fakeVarName + \" = keyframes`\" + p2.replace(/^@keyframes animation-\\w+/, '') + \"`\");\n          return \"${\" + fakeVarName + \"}\";\n        });\n\n        if (matched.length) {\n          console.error('`keyframes` output got interpolated into plain string, please wrap it with `css`.\\n\\n' + 'Instead of doing this:\\n\\n' + [].concat(matched, [\"`\" + replaced + \"`\"]).join('\\n') + '\\n\\nYou should wrap it with `css` like this:\\n\\n' + (\"css`\" + replaced + \"`\"));\n        }\n      }\n\n      break;\n  } // finalize string values (regular strings and functions interpolated into css calls)\n\n\n  if (registered == null) {\n    return interpolation;\n  }\n\n  var cached = registered[interpolation];\n  return cached !== undefined ? cached : interpolation;\n}\n\nfunction createStringFromObject(mergedProps, registered, obj) {\n  var string = '';\n\n  if (Array.isArray(obj)) {\n    for (var i = 0; i < obj.length; i++) {\n      string += handleInterpolation(mergedProps, registered, obj[i]) + \";\";\n    }\n  } else {\n    for (var _key in obj) {\n      var value = obj[_key];\n\n      if (typeof value !== 'object') {\n        if (registered != null && registered[value] !== undefined) {\n          string += _key + \"{\" + registered[value] + \"}\";\n        } else if (isProcessableValue(value)) {\n          string += processStyleName(_key) + \":\" + processStyleValue(_key, value) + \";\";\n        }\n      } else {\n        if (_key === 'NO_COMPONENT_SELECTOR' && process.env.NODE_ENV !== 'production') {\n          throw new Error(noComponentSelectorMessage);\n        }\n\n        if (Array.isArray(value) && typeof value[0] === 'string' && (registered == null || registered[value[0]] === undefined)) {\n          for (var _i = 0; _i < value.length; _i++) {\n            if (isProcessableValue(value[_i])) {\n              string += processStyleName(_key) + \":\" + processStyleValue(_key, value[_i]) + \";\";\n            }\n          }\n        } else {\n          var interpolated = handleInterpolation(mergedProps, registered, value);\n\n          switch (_key) {\n            case 'animation':\n            case 'animationName':\n              {\n                string += processStyleName(_key) + \":\" + interpolated + \";\";\n                break;\n              }\n\n            default:\n              {\n                if (process.env.NODE_ENV !== 'production' && _key === 'undefined') {\n                  console.error(UNDEFINED_AS_OBJECT_KEY_ERROR);\n                }\n\n                string += _key + \"{\" + interpolated + \"}\";\n              }\n          }\n        }\n      }\n    }\n  }\n\n  return string;\n}\n\nvar labelPattern = /label:\\s*([^\\s;\\n{]+)\\s*(;|$)/g;\nvar sourceMapPattern;\n\nif (process.env.NODE_ENV !== 'production') {\n  sourceMapPattern = /\\/\\*#\\ssourceMappingURL=data:application\\/json;\\S+\\s+\\*\\//g;\n} // this is the cursor for keyframes\n// keyframes are stored on the SerializedStyles object as a linked list\n\n\nvar cursor;\nvar serializeStyles = function serializeStyles(args, registered, mergedProps) {\n  if (args.length === 1 && typeof args[0] === 'object' && args[0] !== null && args[0].styles !== undefined) {\n    return args[0];\n  }\n\n  var stringMode = true;\n  var styles = '';\n  cursor = undefined;\n  var strings = args[0];\n\n  if (strings == null || strings.raw === undefined) {\n    stringMode = false;\n    styles += handleInterpolation(mergedProps, registered, strings);\n  } else {\n    if (process.env.NODE_ENV !== 'production' && strings[0] === undefined) {\n      console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n    }\n\n    styles += strings[0];\n  } // we start at 1 since we've already handled the first arg\n\n\n  for (var i = 1; i < args.length; i++) {\n    styles += handleInterpolation(mergedProps, registered, args[i]);\n\n    if (stringMode) {\n      if (process.env.NODE_ENV !== 'production' && strings[i] === undefined) {\n        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n      }\n\n      styles += strings[i];\n    }\n  }\n\n  var sourceMap;\n\n  if (process.env.NODE_ENV !== 'production') {\n    styles = styles.replace(sourceMapPattern, function (match) {\n      sourceMap = match;\n      return '';\n    });\n  } // using a global regex with .exec is stateful so lastIndex has to be reset each time\n\n\n  labelPattern.lastIndex = 0;\n  var identifierName = '';\n  var match; // https://esbench.com/bench/5b809c2cf2949800a0f61fb5\n\n  while ((match = labelPattern.exec(styles)) !== null) {\n    identifierName += '-' + // $FlowFixMe we know it's not null\n    match[1];\n  }\n\n  var name = hashString(styles) + identifierName;\n\n  if (process.env.NODE_ENV !== 'production') {\n    // $FlowFixMe SerializedStyles type doesn't have toString property (and we don't want to add it)\n    return {\n      name: name,\n      styles: styles,\n      map: sourceMap,\n      next: cursor,\n      toString: function toString() {\n        return \"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";\n      }\n    };\n  }\n\n  return {\n    name: name,\n    styles: styles,\n    next: cursor\n  };\n};\n\nexport { serializeStyles };\n","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","import memoize from '@emotion/memoize';\n\nvar reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/; // https://esbench.com/bench/5bfee68a4cd7e6009ef61d23\n\nvar isPropValid = /* #__PURE__ */memoize(function (prop) {\n  return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111\n  /* o */\n  && prop.charCodeAt(1) === 110\n  /* n */\n  && prop.charCodeAt(2) < 91;\n}\n/* Z+1 */\n);\n\nexport default isPropValid;\n","import * as React from 'react';\nimport { useLayoutEffect } from 'react';\n\nvar syncFallback = function syncFallback(create) {\n  return create();\n};\n\nvar useInsertionEffect = React['useInsertion' + 'Effect'] ? React['useInsertion' + 'Effect'] : false;\nvar useInsertionEffectAlwaysWithSyncFallback =  useInsertionEffect || syncFallback;\nvar useInsertionEffectWithLayoutFallback = useInsertionEffect || useLayoutEffect;\n\nexport { useInsertionEffectAlwaysWithSyncFallback, useInsertionEffectWithLayoutFallback };\n","import { createContext, useContext, forwardRef, createElement, Fragment } from 'react';\nimport createCache from '@emotion/cache';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport weakMemoize from '@emotion/weak-memoize';\nimport hoistNonReactStatics from '../_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js';\nimport { getRegisteredStyles, registerStyles, insertStyles } from '@emotion/utils';\nimport { serializeStyles } from '@emotion/serialize';\nimport { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks';\n\nvar hasOwnProperty = {}.hasOwnProperty;\n\nvar EmotionCacheContext = /* #__PURE__ */createContext( // we're doing this to avoid preconstruct's dead code elimination in this one case\n// because this module is primarily intended for the browser and node\n// but it's also required in react native and similar environments sometimes\n// and we could have a special build just for that\n// but this is much easier and the native packages\n// might use a different theme context in the future anyway\ntypeof HTMLElement !== 'undefined' ? /* #__PURE__ */createCache({\n  key: 'css'\n}) : null);\n\nif (process.env.NODE_ENV !== 'production') {\n  EmotionCacheContext.displayName = 'EmotionCacheContext';\n}\n\nvar CacheProvider = EmotionCacheContext.Provider;\nvar __unsafe_useEmotionCache = function useEmotionCache() {\n  return useContext(EmotionCacheContext);\n};\n\nvar withEmotionCache = function withEmotionCache(func) {\n  // $FlowFixMe\n  return /*#__PURE__*/forwardRef(function (props, ref) {\n    // the cache will never be null in the browser\n    var cache = useContext(EmotionCacheContext);\n    return func(props, cache, ref);\n  });\n};\n\nvar ThemeContext = /* #__PURE__ */createContext({});\n\nif (process.env.NODE_ENV !== 'production') {\n  ThemeContext.displayName = 'EmotionThemeContext';\n}\n\nvar useTheme = function useTheme() {\n  return useContext(ThemeContext);\n};\n\nvar getTheme = function getTheme(outerTheme, theme) {\n  if (typeof theme === 'function') {\n    var mergedTheme = theme(outerTheme);\n\n    if (process.env.NODE_ENV !== 'production' && (mergedTheme == null || typeof mergedTheme !== 'object' || Array.isArray(mergedTheme))) {\n      throw new Error('[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!');\n    }\n\n    return mergedTheme;\n  }\n\n  if (process.env.NODE_ENV !== 'production' && (theme == null || typeof theme !== 'object' || Array.isArray(theme))) {\n    throw new Error('[ThemeProvider] Please make your theme prop a plain object');\n  }\n\n  return _extends({}, outerTheme, theme);\n};\n\nvar createCacheWithTheme = /* #__PURE__ */weakMemoize(function (outerTheme) {\n  return weakMemoize(function (theme) {\n    return getTheme(outerTheme, theme);\n  });\n});\nvar ThemeProvider = function ThemeProvider(props) {\n  var theme = useContext(ThemeContext);\n\n  if (props.theme !== theme) {\n    theme = createCacheWithTheme(theme)(props.theme);\n  }\n\n  return /*#__PURE__*/createElement(ThemeContext.Provider, {\n    value: theme\n  }, props.children);\n};\nfunction withTheme(Component) {\n  var componentName = Component.displayName || Component.name || 'Component';\n\n  var render = function render(props, ref) {\n    var theme = useContext(ThemeContext);\n    return /*#__PURE__*/createElement(Component, _extends({\n      theme: theme,\n      ref: ref\n    }, props));\n  }; // $FlowFixMe\n\n\n  var WithTheme = /*#__PURE__*/forwardRef(render);\n  WithTheme.displayName = \"WithTheme(\" + componentName + \")\";\n  return hoistNonReactStatics(WithTheme, Component);\n}\n\nvar getLastPart = function getLastPart(functionName) {\n  // The match may be something like 'Object.createEmotionProps' or\n  // 'Loader.prototype.render'\n  var parts = functionName.split('.');\n  return parts[parts.length - 1];\n};\n\nvar getFunctionNameFromStackTraceLine = function getFunctionNameFromStackTraceLine(line) {\n  // V8\n  var match = /^\\s+at\\s+([A-Za-z0-9$.]+)\\s/.exec(line);\n  if (match) return getLastPart(match[1]); // Safari / Firefox\n\n  match = /^([A-Za-z0-9$.]+)@/.exec(line);\n  if (match) return getLastPart(match[1]);\n  return undefined;\n};\n\nvar internalReactFunctionNames = /* #__PURE__ */new Set(['renderWithHooks', 'processChild', 'finishClassComponent', 'renderToString']); // These identifiers come from error stacks, so they have to be valid JS\n// identifiers, thus we only need to replace what is a valid character for JS,\n// but not for CSS.\n\nvar sanitizeIdentifier = function sanitizeIdentifier(identifier) {\n  return identifier.replace(/\\$/g, '-');\n};\n\nvar getLabelFromStackTrace = function getLabelFromStackTrace(stackTrace) {\n  if (!stackTrace) return undefined;\n  var lines = stackTrace.split('\\n');\n\n  for (var i = 0; i < lines.length; i++) {\n    var functionName = getFunctionNameFromStackTraceLine(lines[i]); // The first line of V8 stack traces is just \"Error\"\n\n    if (!functionName) continue; // If we reach one of these, we have gone too far and should quit\n\n    if (internalReactFunctionNames.has(functionName)) break; // The component name is the first function in the stack that starts with an\n    // uppercase letter\n\n    if (/^[A-Z]/.test(functionName)) return sanitizeIdentifier(functionName);\n  }\n\n  return undefined;\n};\n\nvar typePropName = '__EMOTION_TYPE_PLEASE_DO_NOT_USE__';\nvar labelPropName = '__EMOTION_LABEL_PLEASE_DO_NOT_USE__';\nvar createEmotionProps = function createEmotionProps(type, props) {\n  if (process.env.NODE_ENV !== 'production' && typeof props.css === 'string' && // check if there is a css declaration\n  props.css.indexOf(':') !== -1) {\n    throw new Error(\"Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`\" + props.css + \"`\");\n  }\n\n  var newProps = {};\n\n  for (var key in props) {\n    if (hasOwnProperty.call(props, key)) {\n      newProps[key] = props[key];\n    }\n  }\n\n  newProps[typePropName] = type; // For performance, only call getLabelFromStackTrace in development and when\n  // the label hasn't already been computed\n\n  if (process.env.NODE_ENV !== 'production' && !!props.css && (typeof props.css !== 'object' || typeof props.css.name !== 'string' || props.css.name.indexOf('-') === -1)) {\n    var label = getLabelFromStackTrace(new Error().stack);\n    if (label) newProps[labelPropName] = label;\n  }\n\n  return newProps;\n};\n\nvar Insertion = function Insertion(_ref) {\n  var cache = _ref.cache,\n      serialized = _ref.serialized,\n      isStringTag = _ref.isStringTag;\n  registerStyles(cache, serialized, isStringTag);\n  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {\n    return insertStyles(cache, serialized, isStringTag);\n  });\n\n  return null;\n};\n\nvar Emotion = /* #__PURE__ */withEmotionCache(function (props, cache, ref) {\n  var cssProp = props.css; // so that using `css` from `emotion` and passing the result to the css prop works\n  // not passing the registered cache to serializeStyles because it would\n  // make certain babel optimisations not possible\n\n  if (typeof cssProp === 'string' && cache.registered[cssProp] !== undefined) {\n    cssProp = cache.registered[cssProp];\n  }\n\n  var WrappedComponent = props[typePropName];\n  var registeredStyles = [cssProp];\n  var className = '';\n\n  if (typeof props.className === 'string') {\n    className = getRegisteredStyles(cache.registered, registeredStyles, props.className);\n  } else if (props.className != null) {\n    className = props.className + \" \";\n  }\n\n  var serialized = serializeStyles(registeredStyles, undefined, useContext(ThemeContext));\n\n  if (process.env.NODE_ENV !== 'production' && serialized.name.indexOf('-') === -1) {\n    var labelFromStack = props[labelPropName];\n\n    if (labelFromStack) {\n      serialized = serializeStyles([serialized, 'label:' + labelFromStack + ';']);\n    }\n  }\n\n  className += cache.key + \"-\" + serialized.name;\n  var newProps = {};\n\n  for (var key in props) {\n    if (hasOwnProperty.call(props, key) && key !== 'css' && key !== typePropName && (process.env.NODE_ENV === 'production' || key !== labelPropName)) {\n      newProps[key] = props[key];\n    }\n  }\n\n  newProps.ref = ref;\n  newProps.className = className;\n  return /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement(Insertion, {\n    cache: cache,\n    serialized: serialized,\n    isStringTag: typeof WrappedComponent === 'string'\n  }), /*#__PURE__*/createElement(WrappedComponent, newProps));\n});\n\nif (process.env.NODE_ENV !== 'production') {\n  Emotion.displayName = 'EmotionCssPropInternal';\n}\n\nexport { CacheProvider as C, Emotion as E, ThemeContext as T, __unsafe_useEmotionCache as _, ThemeProvider as a, withTheme as b, createEmotionProps as c, hasOwnProperty as h, useTheme as u, withEmotionCache as w };\n","import _extends from '@babel/runtime/helpers/esm/extends';\nimport { useContext, createElement, Fragment } from 'react';\nimport isPropValid from '@emotion/is-prop-valid';\nimport { withEmotionCache, ThemeContext } from '@emotion/react';\nimport { getRegisteredStyles, registerStyles, insertStyles } from '@emotion/utils';\nimport { serializeStyles } from '@emotion/serialize';\nimport { useInsertionEffectAlwaysWithSyncFallback } from '@emotion/use-insertion-effect-with-fallbacks';\n\nvar testOmitPropsOnStringTag = isPropValid;\n\nvar testOmitPropsOnComponent = function testOmitPropsOnComponent(key) {\n  return key !== 'theme';\n};\n\nvar getDefaultShouldForwardProp = function getDefaultShouldForwardProp(tag) {\n  return typeof tag === 'string' && // 96 is one less than the char code\n  // for \"a\" so this is checking that\n  // it's a lowercase character\n  tag.charCodeAt(0) > 96 ? testOmitPropsOnStringTag : testOmitPropsOnComponent;\n};\nvar composeShouldForwardProps = function composeShouldForwardProps(tag, options, isReal) {\n  var shouldForwardProp;\n\n  if (options) {\n    var optionsShouldForwardProp = options.shouldForwardProp;\n    shouldForwardProp = tag.__emotion_forwardProp && optionsShouldForwardProp ? function (propName) {\n      return tag.__emotion_forwardProp(propName) && optionsShouldForwardProp(propName);\n    } : optionsShouldForwardProp;\n  }\n\n  if (typeof shouldForwardProp !== 'function' && isReal) {\n    shouldForwardProp = tag.__emotion_forwardProp;\n  }\n\n  return shouldForwardProp;\n};\n\nvar ILLEGAL_ESCAPE_SEQUENCE_ERROR = \"You have illegal escape sequence in your template literal, most likely inside content's property value.\\nBecause you write your CSS inside a JavaScript string you actually have to do double escaping, so for example \\\"content: '\\\\00d7';\\\" should become \\\"content: '\\\\\\\\00d7';\\\".\\nYou can read more about this here:\\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences\";\n\nvar Insertion = function Insertion(_ref) {\n  var cache = _ref.cache,\n      serialized = _ref.serialized,\n      isStringTag = _ref.isStringTag;\n  registerStyles(cache, serialized, isStringTag);\n  var rules = useInsertionEffectAlwaysWithSyncFallback(function () {\n    return insertStyles(cache, serialized, isStringTag);\n  });\n\n  return null;\n};\n\nvar createStyled = function createStyled(tag, options) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (tag === undefined) {\n      throw new Error('You are trying to create a styled element with an undefined component.\\nYou may have forgotten to import it.');\n    }\n  }\n\n  var isReal = tag.__emotion_real === tag;\n  var baseTag = isReal && tag.__emotion_base || tag;\n  var identifierName;\n  var targetClassName;\n\n  if (options !== undefined) {\n    identifierName = options.label;\n    targetClassName = options.target;\n  }\n\n  var shouldForwardProp = composeShouldForwardProps(tag, options, isReal);\n  var defaultShouldForwardProp = shouldForwardProp || getDefaultShouldForwardProp(baseTag);\n  var shouldUseAs = !defaultShouldForwardProp('as');\n  return function () {\n    var args = arguments;\n    var styles = isReal && tag.__emotion_styles !== undefined ? tag.__emotion_styles.slice(0) : [];\n\n    if (identifierName !== undefined) {\n      styles.push(\"label:\" + identifierName + \";\");\n    }\n\n    if (args[0] == null || args[0].raw === undefined) {\n      styles.push.apply(styles, args);\n    } else {\n      if (process.env.NODE_ENV !== 'production' && args[0][0] === undefined) {\n        console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n      }\n\n      styles.push(args[0][0]);\n      var len = args.length;\n      var i = 1;\n\n      for (; i < len; i++) {\n        if (process.env.NODE_ENV !== 'production' && args[0][i] === undefined) {\n          console.error(ILLEGAL_ESCAPE_SEQUENCE_ERROR);\n        }\n\n        styles.push(args[i], args[0][i]);\n      }\n    } // $FlowFixMe: we need to cast StatelessFunctionalComponent to our PrivateStyledComponent class\n\n\n    var Styled = withEmotionCache(function (props, cache, ref) {\n      var FinalTag = shouldUseAs && props.as || baseTag;\n      var className = '';\n      var classInterpolations = [];\n      var mergedProps = props;\n\n      if (props.theme == null) {\n        mergedProps = {};\n\n        for (var key in props) {\n          mergedProps[key] = props[key];\n        }\n\n        mergedProps.theme = useContext(ThemeContext);\n      }\n\n      if (typeof props.className === 'string') {\n        className = getRegisteredStyles(cache.registered, classInterpolations, props.className);\n      } else if (props.className != null) {\n        className = props.className + \" \";\n      }\n\n      var serialized = serializeStyles(styles.concat(classInterpolations), cache.registered, mergedProps);\n      className += cache.key + \"-\" + serialized.name;\n\n      if (targetClassName !== undefined) {\n        className += \" \" + targetClassName;\n      }\n\n      var finalShouldForwardProp = shouldUseAs && shouldForwardProp === undefined ? getDefaultShouldForwardProp(FinalTag) : defaultShouldForwardProp;\n      var newProps = {};\n\n      for (var _key in props) {\n        if (shouldUseAs && _key === 'as') continue;\n\n        if ( // $FlowFixMe\n        finalShouldForwardProp(_key)) {\n          newProps[_key] = props[_key];\n        }\n      }\n\n      newProps.className = className;\n      newProps.ref = ref;\n      return /*#__PURE__*/createElement(Fragment, null, /*#__PURE__*/createElement(Insertion, {\n        cache: cache,\n        serialized: serialized,\n        isStringTag: typeof FinalTag === 'string'\n      }), /*#__PURE__*/createElement(FinalTag, newProps));\n    });\n    Styled.displayName = identifierName !== undefined ? identifierName : \"Styled(\" + (typeof baseTag === 'string' ? baseTag : baseTag.displayName || baseTag.name || 'Component') + \")\";\n    Styled.defaultProps = tag.defaultProps;\n    Styled.__emotion_real = Styled;\n    Styled.__emotion_base = baseTag;\n    Styled.__emotion_styles = styles;\n    Styled.__emotion_forwardProp = shouldForwardProp;\n    Object.defineProperty(Styled, 'toString', {\n      value: function value() {\n        if (targetClassName === undefined && process.env.NODE_ENV !== 'production') {\n          return 'NO_COMPONENT_SELECTOR';\n        } // $FlowFixMe: coerce undefined to string\n\n\n        return \".\" + targetClassName;\n      }\n    });\n\n    Styled.withComponent = function (nextTag, nextOptions) {\n      return createStyled(nextTag, _extends({}, options, nextOptions, {\n        shouldForwardProp: composeShouldForwardProps(Styled, nextOptions, true)\n      })).apply(void 0, styles);\n    };\n\n    return Styled;\n  };\n};\n\nexport default createStyled;\n","import '@babel/runtime/helpers/extends';\nimport 'react';\nimport '@emotion/is-prop-valid';\nimport createStyled from '../base/dist/emotion-styled-base.browser.esm.js';\nimport '@emotion/react';\nimport '@emotion/utils';\nimport '@emotion/serialize';\nimport '@emotion/use-insertion-effect-with-fallbacks';\n\nvar tags = ['a', 'abbr', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'bdi', 'bdo', 'big', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'cite', 'code', 'col', 'colgroup', 'data', 'datalist', 'dd', 'del', 'details', 'dfn', 'dialog', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'legend', 'li', 'link', 'main', 'map', 'mark', 'marquee', 'menu', 'menuitem', 'meta', 'meter', 'nav', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'picture', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'track', 'u', 'ul', 'var', 'video', 'wbr', // SVG\n'circle', 'clipPath', 'defs', 'ellipse', 'foreignObject', 'g', 'image', 'line', 'linearGradient', 'mask', 'path', 'pattern', 'polygon', 'polyline', 'radialGradient', 'rect', 'stop', 'svg', 'text', 'tspan'];\n\nvar newStyled = createStyled.bind();\ntags.forEach(function (tagName) {\n  // $FlowFixMe: we can ignore this because its exposed type is defined by the CreateStyled type\n  newStyled[tagName] = newStyled(tagName);\n});\n\nexport default newStyled;\n","var isBrowser = \"object\" !== 'undefined';\nfunction getRegisteredStyles(registered, registeredStyles, classNames) {\n  var rawClassName = '';\n  classNames.split(' ').forEach(function (className) {\n    if (registered[className] !== undefined) {\n      registeredStyles.push(registered[className] + \";\");\n    } else {\n      rawClassName += className + \" \";\n    }\n  });\n  return rawClassName;\n}\nvar registerStyles = function registerStyles(cache, serialized, isStringTag) {\n  var className = cache.key + \"-\" + serialized.name;\n\n  if ( // we only need to add the styles to the registered cache if the\n  // class name could be used further down\n  // the tree but if it's a string tag, we know it won't\n  // so we don't have to add it to registered cache.\n  // this improves memory usage since we can avoid storing the whole style string\n  (isStringTag === false || // we need to always store it if we're in compat mode and\n  // in node since emotion-server relies on whether a style is in\n  // the registered cache to know whether a style is global or not\n  // also, note that this check will be dead code eliminated in the browser\n  isBrowser === false ) && cache.registered[className] === undefined) {\n    cache.registered[className] = serialized.styles;\n  }\n};\nvar insertStyles = function insertStyles(cache, serialized, isStringTag) {\n  registerStyles(cache, serialized, isStringTag);\n  var className = cache.key + \"-\" + serialized.name;\n\n  if (cache.inserted[serialized.name] === undefined) {\n    var current = serialized;\n\n    do {\n      var maybeStyles = cache.insert(serialized === current ? \".\" + className : '', current, cache.sheet, true);\n\n      current = current.next;\n    } while (current !== undefined);\n  }\n};\n\nexport { getRegisteredStyles, insertStyles, registerStyles };\n","////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Encode a location the same way window.history would do (no-op for memory\n   * history) so we ensure our PUSH/REPLACE navigations for data routers\n   * behave the same as POP\n   *\n   * @param to Unencoded path\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    encodeLocation(to: To) {\n      let path = typeof to === \"string\" ? parsePath(to) : to;\n      return {\n        pathname: path.pathname || \"\",\n        search: path.search || \"\",\n        hash: path.hash || \"\",\n      };\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport function createClientSideURL(location: Location | string): URL {\n  // window.location.origin is \"null\" (the literal string value) in Firefox\n  // under certain conditions, notably when serving from a local HTML file\n  // See https://bugzilla.mozilla.org/show_bug.cgi?id=878297\n  let base =\n    typeof window !== \"undefined\" &&\n    typeof window.location !== \"undefined\" &&\n    window.location.origin !== \"null\"\n      ? window.location.origin\n      : window.location.href;\n  let href = typeof location === \"string\" ? location : createPath(location);\n  invariant(\n    base,\n    `No window.location.(origin|href) available to create URL for href: ${href}`\n  );\n  return new URL(href, base);\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    encodeLocation(to) {\n      // Encode a Location the same way window.location would\n      let url = createClientSideURL(\n        typeof to === \"string\" ? to : createPath(to)\n      );\n      return {\n        pathname: url.pathname,\n        search: url.search,\n        hash: url.hash,\n      };\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { invariant, parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type MutationFormMethod = \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormMethod = \"get\" | MutationFormMethod;\n\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: FormMethod;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n  context?: any;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // Incoming pathnames are generally encoded from either window.location\n      // or from router.navigate, but we want to match against the unencoded\n      // paths in the route definitions.  Memory router locations won't be\n      // encoded here but there also shouldn't be anything to decode so this\n      // should be a safe operation.  This avoids needing matchRoutes to be\n      // history-aware.\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  let flattenRoute = (\n    route: RouteObjectType,\n    index: number,\n    relativePath?: string\n  ) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath:\n        relativePath === undefined ? route.path || \"\" : relativePath,\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta,\n    });\n  };\n  routes.forEach((route, index) => {\n    // coarse-grain check for optional params\n    if (route.path === \"\" || !route.path?.includes(\"?\")) {\n      flattenRoute(route, index);\n    } else {\n      for (let exploded of explodeOptionalSegments(route.path)) {\n        flattenRoute(route, index, exploded);\n      }\n    }\n  });\n\n  return branches;\n}\n\n/**\n * Computes all combinations of optional path segments for a given path,\n * excluding combinations that are ambiguous and of lower priority.\n *\n * For example, `/one/:two?/three/:four?/:five?` explodes to:\n * - `/one/three`\n * - `/one/:two/three`\n * - `/one/three/:four`\n * - `/one/three/:five`\n * - `/one/:two/three/:four`\n * - `/one/:two/three/:five`\n * - `/one/three/:four/:five`\n * - `/one/:two/three/:four/:five`\n */\nfunction explodeOptionalSegments(path: string): string[] {\n  let segments = path.split(\"/\");\n  if (segments.length === 0) return [];\n\n  let [first, ...rest] = segments;\n\n  // Optional path segments are denoted by a trailing `?`\n  let isOptional = first.endsWith(\"?\");\n  // Compute the corresponding required segment: `foo?` -> `foo`\n  let required = first.replace(/\\?$/, \"\");\n\n  if (rest.length === 0) {\n    // Intepret empty string as omitting an optional segment\n    // `[\"one\", \"\", \"three\"]` corresponds to omitting `:two` from `/one/:two?/three` -> `/one/three`\n    return isOptional ? [required, \"\"] : [required];\n  }\n\n  let restExploded = explodeOptionalSegments(rest.join(\"/\"));\n\n  let result: string[] = [];\n\n  // All child paths with the prefix.  Do this for all children before the\n  // optional version for all children so we get consistent ordering where the\n  // parent optional aspect is preferred as required.  Otherwise, we can get\n  // child sections interspersed where deeper optional segments are higher than\n  // parent optional segments, where for example, /:two would explodes _earlier_\n  // then /:one.  By always including the parent as required _for all children_\n  // first, we avoid this issue\n  result.push(\n    ...restExploded.map((subpath) =>\n      subpath === \"\" ? required : [required, subpath].join(\"/\")\n    )\n  );\n\n  // Then if this is an optional value, add all child versions without\n  if (isOptional) {\n    result.push(...restExploded);\n  }\n\n  // for absolute paths, ensure `/` instead of empty segment\n  return result.map((exploded) =>\n    path.startsWith(\"/\") && exploded === \"\" ? \"/\" : exploded\n  );\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  originalPath: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  let path = originalPath;\n  if (path.endsWith(\"*\") && path !== \"*\" && !path.endsWith(\"/*\")) {\n    warning(\n      false,\n      `Route path \"${path}\" will be treated as if it were ` +\n        `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n        `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n        `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n    );\n    path = path.replace(/\\*$/, \"/*\") as Path;\n  }\n\n  return path\n    .replace(/^:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/\\/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return `/${params[key]!}`;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/\\/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"/([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n  error?: Error;\n  internal: boolean;\n\n  constructor(\n    status: number,\n    statusText: string | undefined,\n    data: any,\n    internal = false\n  ) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.internal = internal;\n    if (data instanceof Error) {\n      this.data = data.toString();\n      this.error = data;\n    } else {\n      this.data = data;\n    }\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  createClientSideURL,\n  invariant,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n  MutationFormMethod,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to URL encode a destination path according to the internal\n   * history implementation\n   * @param to\n   */\n  encodeLocation(to: To): Path;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  basename: Router[\"basename\"];\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(\n    request: Request,\n    opts?: { requestContext?: unknown }\n  ): Promise<StaticHandlerContext | Response>;\n  queryRoute(\n    request: Request,\n    opts?: { routeId?: string; requestContext?: unknown }\n  ): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n    \" _hasFetcherDoneAnything \"?: boolean;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nconst validMutationMethodsArr: MutationFormMethod[] = [\n  \"post\",\n  \"put\",\n  \"patch\",\n  \"delete\",\n];\nconst validMutationMethods = new Set<MutationFormMethod>(\n  validMutationMethodsArr\n);\n\nconst validRequestMethodsArr: FormMethod[] = [\n  \"get\",\n  ...validMutationMethodsArr,\n];\nconst validRequestMethods = new Set<FormMethod>(validRequestMethodsArr);\n\nconst redirectStatusCodes = new Set([301, 302, 303, 307, 308]);\nconst redirectPreserveMethodStatusCodes = new Set([307, 308]);\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  // Set to true if we have `hydrationData` since we assume we were SSR'd and that\n  // SSR did the initial scroll restoration.\n  let initialScrollRestored = init.hydrationData != null;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let error = getInternalRouterError(404, {\n      pathname: init.history.location.pathname,\n    });\n    let { matches, route } = getShortCircuitMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    // Don't restore on initial updateState() if we were SSR'd\n    restoreScrollPosition: init.hydrationData != null ? false : null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a mutation submission\n    // - We're past the submitting state and into the loading state\n    // - The location being loaded is not the result of a redirect\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      isMutationMethod(state.navigation.formMethod) &&\n      state.navigation.state === \"loading\" &&\n      location.state?._isRedirect !== true;\n\n    let actionData: RouteData | null;\n    if (newState.actionData) {\n      if (Object.keys(newState.actionData).length > 0) {\n        actionData = newState.actionData;\n      } else {\n        // Empty actionData -> clear prior actionData due to an action error\n        actionData = null;\n      }\n    } else if (isActionReload) {\n      // Keep the current data if we're wrapping up the action reload\n      actionData = state.actionData;\n    } else {\n      // Clear actionData on any other completed navigations\n      actionData = null;\n    }\n\n    // Always preserve any existing loaderData from re-used routes\n    let loaderData = newState.loaderData\n      ? mergeLoaderData(\n          state.loaderData,\n          newState.loaderData,\n          newState.matches || [],\n          newState.errors\n        )\n      : state.loaderData;\n\n    updateState({\n      ...newState, // matches, errors, fetchers go through as-is\n      actionData,\n      loaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    location = {\n      ...location,\n      ...init.history.encodeLocation(location),\n    };\n\n    let userReplace = opts && opts.replace != null ? opts.replace : undefined;\n\n    let historyAction = HistoryAction.Push;\n\n    if (userReplace === true) {\n      historyAction = HistoryAction.Replace;\n    } else if (userReplace === false) {\n      // no-op\n    } else if (\n      submission != null &&\n      isMutationMethod(submission.formMethod) &&\n      submission.formAction === state.location.pathname + state.location.search\n    ) {\n      // By default on submissions to the current location we REPLACE so that\n      // users don't have to double-click the back button to get to the prior\n      // location.  If the user redirects to a different location from the\n      // action/loader this will be ignored and the redirect will be a PUSH\n      historyAction = HistoryAction.Replace;\n    }\n\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createClientSideRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (\n      opts &&\n      opts.submission &&\n      isMutationMethod(opts.submission.formMethod)\n    ) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n\n      // Create a GET request for the loaders\n      request = new Request(request.url, { signal: request.signal });\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = {\n        type: ResultType.error,\n        error: getInternalRouterError(405, {\n          method: request.method,\n          pathname: location.pathname,\n          routeId: actionMatch.route.id,\n        }),\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let replace: boolean;\n      if (opts && opts.replace != null) {\n        replace = opts.replace;\n      } else {\n        // If the user didn't explicity indicate replace behavior, replace if\n        // we redirected to the exact same location we're currently at to avoid\n        // double back-buttons\n        replace =\n          result.location === state.location.pathname + state.location.search;\n      }\n      await startRedirectNavigation(state, result, { submission, replace });\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        // Send back an empty object we can use to clear out any prior actionData\n        pendingActionData: {},\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        ...submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // If this was a redirect from an action we don't have a \"submission\" but\n    // we have it on the loading navigation so use that if available\n    let activeSubmission = submission\n      ? submission\n      : loadingNavigation.formMethod &&\n        loadingNavigation.formAction &&\n        loadingNavigation.formData &&\n        loadingNavigation.formEncType\n      ? {\n          formMethod: loadingNavigation.formMethod,\n          formAction: loadingNavigation.formAction,\n          formData: loadingNavigation.formData,\n          formEncType: loadingNavigation.formEncType,\n        }\n      : undefined;\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      activeSubmission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: {},\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        ...(pendingActionData ? { actionData: pendingActionData } : {}),\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      let actionData = pendingActionData || state.actionData;\n      updateState({\n        navigation: loadingNavigation,\n        ...(actionData\n          ? Object.keys(actionData).length === 0\n            ? { actionData: null }\n            : { actionData }\n          : {}),\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      await startRedirectNavigation(state, redirect, { replace });\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(\n        key,\n        routeId,\n        getInternalRouterError(404, { pathname: href })\n      );\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission && isMutationMethod(submission.formMethod)) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches, submission);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let error = getInternalRouterError(405, {\n        method: submission.formMethod,\n        pathname: path,\n        routeId: routeId,\n      });\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(\n      path,\n      abortController.signal,\n      submission\n    );\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      return startRedirectNavigation(state, actionResult, {\n        isFetchActionRedirect: true,\n      });\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createClientSideRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n          \" _hasFetcherDoneAnything \": true,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      return startRedirectNavigation(state, redirect);\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(\n          state.loaderData,\n          loaderData,\n          matches,\n          errors\n        ),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[],\n    submission?: Submission\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createClientSideRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      await startRedirectNavigation(state, result);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      \" _hasFetcherDoneAnything \": true,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    state: RouterState,\n    redirect: RedirectResult,\n    {\n      submission,\n      replace,\n      isFetchActionRedirect,\n    }: {\n      submission?: Submission;\n      replace?: boolean;\n      isFetchActionRedirect?: boolean;\n    } = {}\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    let redirectLocation = createLocation(\n      state.location,\n      redirect.location,\n      // TODO: This can be removed once we get rid of useTransition in Remix v2\n      {\n        _isRedirect: true,\n        ...(isFetchActionRedirect ? { _isFetchActionRedirect: true } : {}),\n      }\n    );\n    invariant(\n      redirectLocation,\n      \"Expected a location on the redirect navigation\"\n    );\n\n    // Check if this an external redirect that goes to a new origin\n    if (typeof window?.location !== \"undefined\") {\n      let newOrigin = createClientSideURL(redirect.location).origin;\n      if (window.location.origin !== newOrigin) {\n        if (replace) {\n          window.location.replace(redirect.location);\n        } else {\n          window.location.assign(redirect.location);\n        }\n        return;\n      }\n    }\n\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    // Use the incoming submission if provided, fallback on the active one in\n    // state.navigation\n    let { formMethod, formAction, formEncType, formData } = state.navigation;\n    if (!submission && formMethod && formAction && formData && formEncType) {\n      submission = {\n        formMethod,\n        formAction,\n        formEncType,\n        formData,\n      };\n    }\n\n    // If this was a 307/308 submission we want to preserve the HTTP method and\n    // re-submit the GET/POST/PUT/PATCH/DELETE as a submission navigation to the\n    // redirected location\n    if (\n      redirectPreserveMethodStatusCodes.has(redirect.status) &&\n      submission &&\n      isMutationMethod(submission.formMethod)\n    ) {\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        submission: {\n          ...submission,\n          formAction: redirect.location,\n        },\n      });\n    } else {\n      // Otherwise, we kick off a new loading navigation, preserving the\n      // submission info for the duration of this navigation\n      await startNavigation(redirectHistoryAction, redirectLocation, {\n        overrideNavigation: {\n          state: \"loading\",\n          location: redirectLocation,\n          formMethod: submission ? submission.formMethod : undefined,\n          formAction: submission ? submission.formAction : undefined,\n          formEncType: submission ? submission.formEncType : undefined,\n          formData: submission ? submission.formData : undefined,\n        },\n      });\n    }\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createClientSideRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    encodeLocation: (to: To) => init.history.encodeLocation(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createStaticHandler(\n  routes: AgnosticRouteObject[],\n  opts?: {\n    basename?: string;\n  }\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  let basename = (opts ? opts.basename : null) || \"/\";\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request,\n    { requestContext }: { requestContext?: unknown } = {}\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      let error = getInternalRouterError(405, { method });\n      let { matches: methodNotAllowedMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let error = getInternalRouterError(404, { pathname: location.pathname });\n      let { matches: notFoundMatches, route } =\n        getShortCircuitMatches(dataRoutes);\n      return {\n        basename,\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches, requestContext);\n    if (isResponse(result)) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, basename, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated Errors that make sense\n   * to associate with a status code will be thrown as an ErrorResponse\n   * instance which include the raw Error, such that the calling context can\n   * serialize the error as they see fit while including the proper response\n   * code.  Examples here are 404 and 405 errors that occur prior to reaching\n   * any user-defined loaders.\n   */\n  async function queryRoute(\n    request: Request,\n    {\n      routeId,\n      requestContext,\n    }: { requestContext?: unknown; routeId?: string } = {}\n  ): Promise<any> {\n    let url = new URL(request.url);\n    let method = request.method.toLowerCase();\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location, basename);\n\n    // SSR supports HEAD requests while SPA doesn't\n    if (!isValidMethod(method) && method !== \"head\") {\n      throw getInternalRouterError(405, { method });\n    } else if (!matches) {\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (routeId && !match) {\n      throw getInternalRouterError(403, {\n        pathname: location.pathname,\n        routeId,\n      });\n    } else if (!match) {\n      // This should never hit I don't think?\n      throw getInternalRouterError(404, { pathname: location.pathname });\n    }\n\n    let result = await queryImpl(\n      request,\n      location,\n      matches,\n      requestContext,\n      match\n    );\n    if (isResponse(result)) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (isMutationMethod(request.method.toLowerCase())) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          requestContext,\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        routeMatch\n      );\n      return isResponse(result)\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    requestContext: unknown,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\" | \"basename\"> | Response> {\n    let result: DataResult;\n\n    if (!actionMatch.route.action) {\n      let error = getInternalRouterError(405, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: actionMatch.route.id,\n      });\n      if (isRouteRequest) {\n        throw error;\n      }\n      result = {\n        type: ResultType.error,\n        error,\n      };\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        basename,\n        true,\n        isRouteRequest,\n        requestContext\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        throw result.error;\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(\n        request,\n        matches,\n        requestContext,\n        undefined,\n        {\n          [boundaryMatch.route.id]: result.error,\n        }\n      );\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    // Create a GET request for the loaders\n    let loaderRequest = new Request(request.url, {\n      headers: request.headers,\n      redirect: request.redirect,\n      signal: request.signal,\n    });\n    let context = await loadRouteData(loaderRequest, matches, requestContext);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    requestContext: unknown,\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<\n        StaticHandlerContext,\n        \"location\" | \"basename\" | \"actionData\" | \"actionHeaders\"\n      >\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n\n    // Short circuit if we have no loaders to run (queryRoute())\n    if (isRouteRequest && !routeMatch?.route.loader) {\n      throw getInternalRouterError(400, {\n        method: request.method,\n        pathname: new URL(request.url).pathname,\n        routeId: routeMatch?.route.id,\n      });\n    }\n\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run (query())\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        // Add a null for all matched routes for proper revalidation on the client\n        loaderData: matches.reduce(\n          (acc, m) => Object.assign(acc, { [m.route.id]: null }),\n          {}\n        ),\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          basename,\n          true,\n          isRouteRequest,\n          requestContext\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    let executedLoaders = new Set<string>();\n    results.forEach((result, i) => {\n      executedLoaders.add(matchesToLoad[i].route.id);\n      // Can't do anything with these without the Remix side of things, so just\n      // cancel them for now\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    // Add a null for any non-loader matches for proper revalidation on the client\n    matches.forEach((match) => {\n      if (!executedLoaders.has(match.route.id)) {\n        context.loaderData[match.route.id] = null;\n      }\n    });\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\nfunction isSubmissionNavigation(\n  opts: RouterNavigateOptions\n): opts is SubmissionNavigateOptions {\n  return opts != null && \"formData\" in opts;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || !isSubmissionNavigation(opts)) {\n    return { path };\n  }\n\n  if (opts.formMethod && !isValidMethod(opts.formMethod)) {\n    return {\n      path,\n      error: getInternalRouterError(405, { method: opts.formMethod }),\n    };\n  }\n\n  // Create a Submission on non-GET navigations\n  let submission: Submission | undefined;\n  if (opts.formData) {\n    submission = {\n      formMethod: opts.formMethod || \"get\",\n      formAction: stripHashFromPath(path),\n      formEncType:\n        (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n      formData: opts.formData,\n    };\n\n    if (isMutationMethod(submission.formMethod)) {\n      return { path, submission };\n    }\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: getInternalRouterError(400),\n    };\n  }\n\n  return { path: createPath(parsedPath), submission };\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : undefined;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createClientSideURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createClientSideURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename = \"/\",\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false,\n  requestContext?: unknown\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params, context: requestContext }),\n      abortPromise,\n    ]);\n\n    invariant(\n      result !== undefined,\n      `You defined ${type === \"action\" ? \"an action\" : \"a loader\"} for route ` +\n        `\"${match.route.id}\" but didn't return anything from your \\`${type}\\` ` +\n        `function. Please return a value or \\`null\\`.`\n    );\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (isResponse(result)) {\n    let status = result.status;\n\n    // Process redirects\n    if (redirectStatusCodes.has(status)) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      let isAbsolute =\n        /^[a-z+]+:\\/\\//i.test(location) || location.startsWith(\"//\");\n\n      // Support relative routing in internal redirects\n      if (!isAbsolute) {\n        let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n        let routePathnames = getPathContributingMatches(activeMatches).map(\n          (match) => match.pathnameBase\n        );\n        let resolvedLocation = resolveTo(\n          location,\n          routePathnames,\n          new URL(request.url).pathname\n        );\n        invariant(\n          createPath(resolvedLocation),\n          `Unable to resolve redirect location: ${location}`\n        );\n\n        // Prepend the basename to the redirect location if we have one\n        if (basename) {\n          let path = resolvedLocation.pathname;\n          resolvedLocation.pathname =\n            path === \"/\" ? basename : joinPaths([basename, path]);\n        }\n\n        location = createPath(resolvedLocation);\n      }\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    // Check between word boundaries instead of startsWith() due to the last\n    // paragraph of https://httpwg.org/specs/rfc9110.html#field.content-type\n    if (contentType && /\\bapplication\\/json\\b/.test(contentType)) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\n// Utility method for creating the Request instances for loaders/actions during\n// client-side navigations and fetches.  During SSR we will always have a\n// Request instance from the static handler (query/queryRoute)\nfunction createClientSideRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createClientSideURL(stripHashFromPath(location)).toString();\n  let init: RequestInit = { signal };\n\n  if (submission && isMutationMethod(submission.formMethod)) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = errors || {};\n\n      // Prefer higher error values if lower errors bubble to the same boundary\n      if (errors[boundaryMatch.route.id] == null) {\n        errors[boundaryMatch.route.id] = error;\n      }\n\n      // Clear our any prior loaderData for the throwing route\n      loaderData[id] = undefined;\n\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here.  Also clear out any loaderData for the\n  // throwing route\n  if (pendingError) {\n    errors = pendingError;\n    loaderData[Object.keys(pendingError)[0]] = undefined;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n        \" _hasFetcherDoneAnything \": true,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[],\n  errors: RouteData | null | undefined\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  for (let match of matches) {\n    let id = match.route.id;\n    if (newLoaderData.hasOwnProperty(id)) {\n      if (newLoaderData[id] !== undefined) {\n        mergedLoaderData[id] = newLoaderData[id];\n      } else {\n        // No-op - this is so we ignore existing data if we have a key in the\n        // incoming object with an undefined value, which is how we unset a prior\n        // loaderData if we encounter a loader error\n      }\n    } else if (loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n\n    if (errors && errors.hasOwnProperty(id)) {\n      // Don't keep any loader data below the boundary\n      break;\n    }\n  }\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(routes: AgnosticDataRouteObject[]): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-error-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n  };\n}\n\nfunction getInternalRouterError(\n  status: number,\n  {\n    pathname,\n    routeId,\n    method,\n  }: {\n    pathname?: string;\n    routeId?: string;\n    method?: string;\n  } = {}\n) {\n  let statusText = \"Unknown Server Error\";\n  let errorMessage = \"Unknown @remix-run/router error\";\n\n  if (status === 400) {\n    statusText = \"Bad Request\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method} request to \"${pathname}\" but ` +\n        `did not provide a \\`loader\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else {\n      errorMessage = \"Cannot submit binary form data using GET\";\n    }\n  } else if (status === 403) {\n    statusText = \"Forbidden\";\n    errorMessage = `Route \"${routeId}\" does not match URL \"${pathname}\"`;\n  } else if (status === 404) {\n    statusText = \"Not Found\";\n    errorMessage = `No route matches URL \"${pathname}\"`;\n  } else if (status === 405) {\n    statusText = \"Method Not Allowed\";\n    if (method && pathname && routeId) {\n      errorMessage =\n        `You made a ${method.toUpperCase()} request to \"${pathname}\" but ` +\n        `did not provide an \\`action\\` for route \"${routeId}\", ` +\n        `so there is no way to handle the request.`;\n    } else if (method) {\n      errorMessage = `Invalid request method \"${method.toUpperCase()}\"`;\n    }\n  }\n\n  return new ErrorResponse(\n    status || 500,\n    statusText,\n    new Error(errorMessage),\n    true\n  );\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\nfunction stripHashFromPath(path: To) {\n  let parsedPath = typeof path === \"string\" ? parsePath(path) : path;\n  return createPath({ ...parsedPath, hash: \"\" });\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isResponse(value: any): value is Response {\n  return (\n    value != null &&\n    typeof value.status === \"number\" &&\n    typeof value.statusText === \"string\" &&\n    typeof value.headers === \"object\" &&\n    typeof value.body !== \"undefined\"\n  );\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!isResponse(result)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    isResponse(obj.response) &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nfunction isValidMethod(method: string): method is FormMethod {\n  return validRequestMethods.has(method as FormMethod);\n}\n\nfunction isMutationMethod(method?: string): method is MutationFormMethod {\n  return validMutationMethods.has(method as MutationFormMethod);\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n//#endregion\n","module.exports=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){\"undefined\"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:\"Module\"}),Object.defineProperty(t,\"__esModule\",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&\"object\"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,\"default\",{enumerable:!0,value:t}),2&e&&\"string\"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,\"a\",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p=\"\",n(n.s=1)}([function(t,e){t.exports=require(\"react\")},function(t,e,n){\"use strict\";n.r(e),n.d(e,\"default\",(function(){return f}));var r=n(0),o=n.n(r);n(2);function i(t){return(i=\"function\"==typeof Symbol&&\"symbol\"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&\"function\"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?\"symbol\":typeof t})(t)}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,\"value\"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function a(t){return(a=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function c(t){if(void 0===t)throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");return t}function l(t,e){return(l=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function u(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}var f=function(t){function e(t){var n,r,s;return function(t,e){if(!(t instanceof e))throw new TypeError(\"Cannot call a class as a function\")}(this,e),r=this,s=a(e).call(this,t),n=!s||\"object\"!==i(s)&&\"function\"!=typeof s?c(r):s,u(c(n),\"toggle\",(function(t){n.state.checked?n.off():n.on()})),u(c(n),\"off\",(function(){n.state.disabled||(n.setState({checked:!1}),n.props.onChange&&n.props.onChange(!1))})),u(c(n),\"on\",(function(){n.state.disabled||(n.setState({checked:!0}),n.props.onChange&&n.props.onChange(!0))})),u(c(n),\"enable\",(function(){n.setState({disabled:!1})})),u(c(n),\"disable\",(function(){n.setState({disabled:!0})})),u(c(n),\"render\",(function(){var t={};n.state.width&&(t.width=n.state.width+\"px\"),n.state.height&&(t.height=n.state.height+\"px\");var e={};return n.state.height&&(e.lineHeight=\"calc(\"+n.state.height+\"px * 0.8)\"),o.a.createElement(\"div\",{className:\"switch btn \"+(n.state.checked?\"on btn-\"+n.state.onstyle:\"off btn-\"+n.state.offstyle)+(n.state.size?\" btn-\"+n.state.size:\"\")+(n.state.style?\" \"+n.state.style:\"\"),style:t,onClick:n.toggle},o.a.createElement(\"div\",{className:\"switch-group\"},o.a.createElement(\"span\",{className:\"switch-on btn btn-\"+n.state.onstyle+(n.state.size?\" btn-\"+n.state.size:\"\"),style:e},n.state.onlabel),o.a.createElement(\"span\",{className:\"switch-off btn btn-\"+n.state.offstyle+(n.state.size?\" btn-\"+n.state.size:\"\"),style:e},n.state.offlabel),o.a.createElement(\"span\",{className:\"switch-handle btn btn-light\"+(n.state.size?\"btn-\"+n.state.size:\"\")})))})),n.state={checked:\"boolean\"==typeof n.props.checked&&n.props.checked,disabled:\"boolean\"==typeof n.props.disabled&&n.props.disabled,onlabel:n.props.onlabel||\"On\",offlabel:n.props.offlabel||\"Off\",onstyle:n.props.onstyle||\"primary\",offstyle:n.props.offstyle||\"light\",size:n.props.size||\"\",style:n.props.style||\"\",width:n.props.width||null,height:n.props.height||null},n}var n,r,f;return function(t,e){if(\"function\"!=typeof e&&null!==e)throw new TypeError(\"Super expression must either be null or a function\");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&l(t,e)}(e,t),n=e,(r=[{key:\"componentDidUpdate\",value:function(t,e){var n=this.props.checked;\"boolean\"==typeof n&&n!==e.checked&&this.setState({checked:n})}}])&&s(n.prototype,r),f&&s(n,f),e}(o.a.Component)},function(t,e,n){var r=n(3);\"string\"==typeof r&&(r=[[t.i,r,\"\"]]);var o={hmr:!0,transform:void 0,insertInto:void 0};n(5)(r,o);r.locals&&(t.exports=r.locals)},function(t,e,n){(t.exports=n(4)(!1)).push([t.i,'/*\\\\\\n|*|  :: Bootstrap Switch Button ::\\n|*|\\n|*|  Bootstrap Switch Button (React)\\n|*|  https://github.com/gitbrent/bootstrap-switch-button-react\\n|*|\\n|*|  This library is released under the MIT Public License (MIT)\\n|*|\\n|*|  Bootstrap Switch Button (C) 2019-present Brent Ely (https://github.com/gitbrent)\\n|*|\\n|*|  Permission is hereby granted, free of charge, to any person obtaining a copy\\n|*|  of this software and associated documentation files (the \"Software\"), to deal\\n|*|  in the Software without restriction, including without limitation the rights\\n|*|  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n|*|  copies of the Software, and to permit persons to whom the Software is\\n|*|  furnished to do so, subject to the following conditions:\\n|*|\\n|*|  The above copyright notice and this permission notice shall be included in all\\n|*|  copies or substantial portions of the Software.\\n|*|\\n|*|  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n|*|  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n|*|  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n|*|  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n|*|  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n|*|  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n|*|  SOFTWARE.\\n\\\\*/\\n\\n.btn-group-xs > .btn, .btn-xs {\\n\\tpadding: .35rem .4rem .25rem .4rem;\\n\\tfont-size: .875rem;\\n\\tline-height: .5;\\n\\tborder-radius: .2rem;\\n}\\n\\n.switch {\\n\\tposition: relative;\\n\\toverflow: hidden;\\n}\\n.switch.btn.btn-light, .switch.btn.btn-outline-light {\\n\\tborder-color: rgba(0, 0, 0, .15); /* Add a border so switch is delineated */\\n}\\n.switch input[type=\"checkbox\"] {\\n\\tdisplay: none;\\n}\\n.switch-group {\\n\\tposition: absolute;\\n\\twidth: 200%;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\ttransition: left 0.35s;\\n\\t-webkit-transition: left 0.35s;\\n\\t-moz-user-select: none;\\n\\t-webkit-user-select: none;\\n}\\n.switch.off .switch-group {\\n\\tleft: -100%;\\n}\\n.switch-on {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 0;\\n\\tright: 50%;\\n\\tmargin: 0;\\n\\tborder: 0;\\n\\tborder-radius: 0;\\n}\\n.switch-off {\\n\\tposition: absolute;\\n\\ttop: 0;\\n\\tbottom: 0;\\n\\tleft: 50%;\\n\\tright: 0;\\n\\tmargin: 0;\\n\\tborder: 0;\\n\\tborder-radius: 0;\\n\\tbox-shadow: none;\\n}\\n.switch-handle {\\n\\tposition: relative;\\n\\tmargin: 0 auto;\\n\\tpadding-top: 0px;\\n\\tpadding-bottom: 0px;\\n\\theight: 100%;\\n\\twidth: 0px;\\n\\tborder-width: 0 1px;\\n\\tbackground-color: #fff;\\n}\\n\\n.switch.btn-outline-primary .switch-handle {\\n\\tbackground-color: var(--primary);\\n\\tborder-color: var(--primary);\\n}\\n.switch.btn-outline-secondary .switch-handle {\\n\\tbackground-color: var(--secondary);\\n\\tborder-color: var(--secondary);\\n}\\n.switch.btn-outline-success .switch-handle {\\n\\tbackground-color: var(--success);\\n\\tborder-color: var(--success);\\n}\\n.switch.btn-outline-danger .switch-handle {\\n\\tbackground-color: var(--danger);\\n\\tborder-color: var(--danger);\\n}\\n.switch.btn-outline-warning .switch-handle {\\n\\tbackground-color: var(--warning);\\n\\tborder-color: var(--warning);\\n}\\n.switch.btn-outline-info .switch-handle {\\n\\tbackground-color: var(--info);\\n\\tborder-color: var(--info);\\n}\\n.switch.btn-outline-light .switch-handle {\\n\\tbackground-color: var(--light);\\n\\tborder-color: var(--light);\\n}\\n.switch.btn-outline-dark .switch-handle {\\n\\tbackground-color: var(--dark);\\n\\tborder-color: var(--dark);\\n}\\n.switch[class*=\"btn-outline\"]:hover .switch-handle {\\n\\tbackground-color: var(--light);\\n\\topacity: 0.5;\\n}\\n\\n/* NOTE: Must come first, so classes below override as needed */\\n/* bootstrap-4.x .form-control {height} values used as `min-height` to mirror output sizes */\\n\\n.switch.btn { min-width: 3.7rem; min-height: calc(1.5em + .75rem + 2px); }\\n.switch-on.btn { padding-right: 1.5rem; }\\n.switch-off.btn { padding-left: 1.5rem; }\\n\\n.switch.btn-lg { min-width: 5rem; line-height: 1.5; min-height: calc(1.5em + 1rem + 2px); }\\n.switch-on.btn-lg { padding-right: 2rem; }\\n.switch-off.btn-lg { padding-left: 2rem; }\\n.switch-handle.btn-lg { width: 2.5rem; }\\n\\n.switch.btn-sm { min-width: 3.25rem; min-height: calc(1.5em + .5rem + 2px); }\\n.switch-on.btn-sm { padding-right: 1rem; }\\n.switch-off.btn-sm { padding-left: 1rem; }\\n\\n/* `xs` (bootstrap-3.3 - .btn - h:22px) */\\n.switch.btn-xs { min-width: 3.125rem; min-height: 1.375rem; }\\n.switch-on.btn-xs { padding-right: .8rem; }\\n.switch-off.btn-xs { padding-left: .8rem; }\\n',\"\"])},function(t,e,n){\"use strict\";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=function(t,e){var n=t[1]||\"\",r=t[3];if(!r)return n;if(e&&\"function\"==typeof btoa){var o=(s=r,\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+\" */\"),i=r.sources.map((function(t){return\"/*# sourceURL=\"+r.sourceRoot+t+\" */\"}));return[n].concat(i).concat([o]).join(\"\\n\")}var s;return[n].join(\"\\n\")}(e,t);return e[2]?\"@media \"+e[2]+\"{\"+n+\"}\":n})).join(\"\")},e.i=function(t,n){\"string\"==typeof t&&(t=[[null,t,\"\"]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];null!=i&&(r[i]=!0)}for(o=0;o<t.length;o++){var s=t[o];null!=s[0]&&r[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]=\"(\"+s[2]+\") and (\"+n+\")\"),e.push(s))}},e}},function(t,e,n){var r,o,i={},s=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),a=function(t,e){return e?e.querySelector(t):document.querySelector(t)},c=function(t){var e={};return function(t,n){if(\"function\"==typeof t)return t();if(void 0===e[t]){var r=a.call(this,t,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}}(),l=null,u=0,f=[],d=n(6);function p(t,e){for(var n=0;n<t.length;n++){var r=t[n],o=i[r.id];if(o){o.refs++;for(var s=0;s<o.parts.length;s++)o.parts[s](r.parts[s]);for(;s<r.parts.length;s++)o.parts.push(y(r.parts[s],e))}else{var a=[];for(s=0;s<r.parts.length;s++)a.push(y(r.parts[s],e));i[r.id]={id:r.id,refs:1,parts:a}}}}function h(t,e){for(var n=[],r={},o=0;o<t.length;o++){var i=t[o],s=e.base?i[0]+e.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};r[s]?r[s].parts.push(a):n.push(r[s]={id:s,parts:[a]})}return n}function b(t,e){var n=c(t.insertInto);if(!n)throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.\");var r=f[f.length-1];if(\"top\"===t.insertAt)r?r.nextSibling?n.insertBefore(e,r.nextSibling):n.appendChild(e):n.insertBefore(e,n.firstChild),f.push(e);else if(\"bottom\"===t.insertAt)n.appendChild(e);else{if(\"object\"!=typeof t.insertAt||!t.insertAt.before)throw new Error(\"[Style Loader]\\n\\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\\n Must be 'top', 'bottom', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n\");var o=c(t.insertAt.before,n);n.insertBefore(e,o)}}function m(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t);var e=f.indexOf(t);e>=0&&f.splice(e,1)}function g(t){var e=document.createElement(\"style\");if(void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),void 0===t.attrs.nonce){var r=function(){0;return n.nc}();r&&(t.attrs.nonce=r)}return w(e,t.attrs),b(t,e),e}function w(t,e){Object.keys(e).forEach((function(n){t.setAttribute(n,e[n])}))}function y(t,e){var n,r,o,i;if(e.transform&&t.css){if(!(i=\"function\"==typeof e.transform?e.transform(t.css):e.transform.default(t.css)))return function(){};t.css=i}if(e.singleton){var s=u++;n=l||(l=g(e)),r=S.bind(null,n,s,!1),o=S.bind(null,n,s,!0)}else t.sourceMap&&\"function\"==typeof URL&&\"function\"==typeof URL.createObjectURL&&\"function\"==typeof URL.revokeObjectURL&&\"function\"==typeof Blob&&\"function\"==typeof btoa?(n=function(t){var e=document.createElement(\"link\");return void 0===t.attrs.type&&(t.attrs.type=\"text/css\"),t.attrs.rel=\"stylesheet\",w(e,t.attrs),b(t,e),e}(e),r=E.bind(null,n,e),o=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=g(e),r=T.bind(null,n),o=function(){m(n)});return r(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;r(t=e)}else o()}}t.exports=function(t,e){if(\"undefined\"!=typeof DEBUG&&DEBUG&&\"object\"!=typeof document)throw new Error(\"The style-loader cannot be used in a non-browser environment\");(e=e||{}).attrs=\"object\"==typeof e.attrs?e.attrs:{},e.singleton||\"boolean\"==typeof e.singleton||(e.singleton=s()),e.insertInto||(e.insertInto=\"head\"),e.insertAt||(e.insertAt=\"bottom\");var n=h(t,e);return p(n,e),function(t){for(var r=[],o=0;o<n.length;o++){var s=n[o];(a=i[s.id]).refs--,r.push(a)}t&&p(h(t,e),e);for(o=0;o<r.length;o++){var a;if(0===(a=r[o]).refs){for(var c=0;c<a.parts.length;c++)a.parts[c]();delete i[a.id]}}}};var v,O=(v=[],function(t,e){return v[t]=e,v.filter(Boolean).join(\"\\n\")});function S(t,e,n,r){var o=n?\"\":r.css;if(t.styleSheet)t.styleSheet.cssText=O(e,o);else{var i=document.createTextNode(o),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(i,s[e]):t.appendChild(i)}}function T(t,e){var n=e.css,r=e.media;if(r&&t.setAttribute(\"media\",r),t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}function E(t,e,n){var r=n.css,o=n.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=d(r)),o&&(r+=\"\\n/*# sourceMappingURL=data:application/json;base64,\"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+\" */\");var s=new Blob([r],{type:\"text/css\"}),a=t.href;t.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}},function(t,e){t.exports=function(t){var e=\"undefined\"!=typeof window&&window.location;if(!e)throw new Error(\"fixUrls requires window.location\");if(!t||\"string\"!=typeof t)return t;var n=e.protocol+\"//\"+e.host,r=n+e.pathname.replace(/\\/[^\\/]*$/,\"/\");return t.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi,(function(t,e){var o,i=e.trim().replace(/^\"(.*)\"$/,(function(t,e){return e})).replace(/^'(.*)'$/,(function(t,e){return e}));return/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(i)?t:(o=0===i.indexOf(\"//\")?i:0===i.indexOf(\"/\")?n+i:r+i.replace(/^\\.\\//,\"\"),\"url(\"+JSON.stringify(o)+\")\")}))}}]);","/** @license React v16.14.0\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var l=require(\"object-assign\"),n=\"function\"===typeof Symbol&&Symbol.for,p=n?Symbol.for(\"react.element\"):60103,q=n?Symbol.for(\"react.portal\"):60106,r=n?Symbol.for(\"react.fragment\"):60107,t=n?Symbol.for(\"react.strict_mode\"):60108,u=n?Symbol.for(\"react.profiler\"):60114,v=n?Symbol.for(\"react.provider\"):60109,w=n?Symbol.for(\"react.context\"):60110,x=n?Symbol.for(\"react.forward_ref\"):60112,y=n?Symbol.for(\"react.suspense\"):60113,z=n?Symbol.for(\"react.memo\"):60115,A=n?Symbol.for(\"react.lazy\"):\n60116,B=\"function\"===typeof Symbol&&Symbol.iterator;function C(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}\nvar D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,\"setState\")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};\nfunction G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=\"\"+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}\nfunction N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+(\"\"+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}\nfunction S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}\nfunction T(a,b,c,e){var d=typeof a;if(\"undefined\"===d||\"boolean\"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case \"string\":case \"number\":g=!0;break;case \"object\":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,\"\"===b?\".\"+U(a,0):b),1;g=0;b=\"\"===b?\".\":b+\":\";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||\"object\"!==typeof a?f=null:(f=B&&a[B]||a[\"@@iterator\"],f=\"function\"===typeof f?f:null),\"function\"===typeof f)for(a=f.call(a),k=\n0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if(\"object\"===d)throw c=\"\"+a,Error(C(31,\"[object Object]\"===c?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":c,\"\"));return g}function V(a,b,c){return null==a?0:T(a,\"\",b,c)}function U(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}\nfunction aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?\"\":(\"\"+a.key).replace(P,\"$&/\")+\"/\")+c)),e.push(a))}function X(a,b,c,e,d){var g=\"\";null!=c&&(g=(\"\"+c).replace(P,\"$&/\")+\"/\");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}\nvar ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};\nexports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;\nexports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=\"\"+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,\nkey:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;\nexports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};\nexports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version=\"16.14.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n","/**\n * @license React\n * react-dom.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n/*\n Modernizr 3.0.0pre (Custom Build) | MIT\n*/\n'use strict';var aa=require(\"react\"),ca=require(\"scheduler\");function p(a){for(var b=\"https://reactjs.org/docs/error-decoder.html?invariant=\"+a,c=1;c<arguments.length;c++)b+=\"&args[]=\"+encodeURIComponent(arguments[c]);return\"Minified React error #\"+a+\"; visit \"+b+\" for the full message or use the non-minified dev environment for full errors and additional helpful warnings.\"}var da=new Set,ea={};function fa(a,b){ha(a,b);ha(a+\"Capture\",b)}\nfunction ha(a,b){ea[a]=b;for(a=0;a<b.length;a++)da.add(b[a])}\nvar ia=!(\"undefined\"===typeof window||\"undefined\"===typeof window.document||\"undefined\"===typeof window.document.createElement),ja=Object.prototype.hasOwnProperty,ka=/^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$/,la=\n{},ma={};function oa(a){if(ja.call(ma,a))return!0;if(ja.call(la,a))return!1;if(ka.test(a))return ma[a]=!0;la[a]=!0;return!1}function pa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case \"function\":case \"symbol\":return!0;case \"boolean\":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return\"data-\"!==a&&\"aria-\"!==a;default:return!1}}\nfunction qa(a,b,c,d){if(null===b||\"undefined\"===typeof b||pa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f,g){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f;this.removeEmptyString=g}var z={};\n\"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style\".split(\" \").forEach(function(a){z[a]=new v(a,0,!1,a,null,!1,!1)});[[\"acceptCharset\",\"accept-charset\"],[\"className\",\"class\"],[\"htmlFor\",\"for\"],[\"httpEquiv\",\"http-equiv\"]].forEach(function(a){var b=a[0];z[b]=new v(b,1,!1,a[1],null,!1,!1)});[\"contentEditable\",\"draggable\",\"spellCheck\",\"value\"].forEach(function(a){z[a]=new v(a,2,!1,a.toLowerCase(),null,!1,!1)});\n[\"autoReverse\",\"externalResourcesRequired\",\"focusable\",\"preserveAlpha\"].forEach(function(a){z[a]=new v(a,2,!1,a,null,!1,!1)});\"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope\".split(\" \").forEach(function(a){z[a]=new v(a,3,!1,a.toLowerCase(),null,!1,!1)});\n[\"checked\",\"multiple\",\"muted\",\"selected\"].forEach(function(a){z[a]=new v(a,3,!0,a,null,!1,!1)});[\"capture\",\"download\"].forEach(function(a){z[a]=new v(a,4,!1,a,null,!1,!1)});[\"cols\",\"rows\",\"size\",\"span\"].forEach(function(a){z[a]=new v(a,6,!1,a,null,!1,!1)});[\"rowSpan\",\"start\"].forEach(function(a){z[a]=new v(a,5,!1,a.toLowerCase(),null,!1,!1)});var ra=/[\\-:]([a-z])/g;function sa(a){return a[1].toUpperCase()}\n\"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height\".split(\" \").forEach(function(a){var b=a.replace(ra,\nsa);z[b]=new v(b,1,!1,a,null,!1,!1)});\"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type\".split(\" \").forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/1999/xlink\",!1,!1)});[\"xml:base\",\"xml:lang\",\"xml:space\"].forEach(function(a){var b=a.replace(ra,sa);z[b]=new v(b,1,!1,a,\"http://www.w3.org/XML/1998/namespace\",!1,!1)});[\"tabIndex\",\"crossOrigin\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!1,!1)});\nz.xlinkHref=new v(\"xlinkHref\",1,!1,\"xlink:href\",\"http://www.w3.org/1999/xlink\",!0,!1);[\"src\",\"href\",\"action\",\"formAction\"].forEach(function(a){z[a]=new v(a,1,!1,a.toLowerCase(),null,!0,!0)});\nfunction ta(a,b,c,d){var e=z.hasOwnProperty(b)?z[b]:null;if(null!==e?0!==e.type:d||!(2<b.length)||\"o\"!==b[0]&&\"O\"!==b[0]||\"n\"!==b[1]&&\"N\"!==b[1])qa(b,c,e,d)&&(c=null),d||null===e?oa(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,\"\"+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:\"\":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?\"\":\"\"+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c)))}\nvar ua=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,va=Symbol.for(\"react.element\"),wa=Symbol.for(\"react.portal\"),ya=Symbol.for(\"react.fragment\"),za=Symbol.for(\"react.strict_mode\"),Aa=Symbol.for(\"react.profiler\"),Ba=Symbol.for(\"react.provider\"),Ca=Symbol.for(\"react.context\"),Da=Symbol.for(\"react.forward_ref\"),Ea=Symbol.for(\"react.suspense\"),Fa=Symbol.for(\"react.suspense_list\"),Ga=Symbol.for(\"react.memo\"),Ha=Symbol.for(\"react.lazy\");Symbol.for(\"react.scope\");Symbol.for(\"react.debug_trace_mode\");\nvar Ia=Symbol.for(\"react.offscreen\");Symbol.for(\"react.legacy_hidden\");Symbol.for(\"react.cache\");Symbol.for(\"react.tracing_marker\");var Ja=Symbol.iterator;function Ka(a){if(null===a||\"object\"!==typeof a)return null;a=Ja&&a[Ja]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}var A=Object.assign,La;function Ma(a){if(void 0===La)try{throw Error();}catch(c){var b=c.stack.trim().match(/\\n( *(at )?)/);La=b&&b[1]||\"\"}return\"\\n\"+La+a}var Na=!1;\nfunction Oa(a,b){if(!a||Na)return\"\";Na=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,\"props\",{set:function(){throw Error();}}),\"object\"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[])}catch(l){var d=l}Reflect.construct(a,[],b)}else{try{b.call()}catch(l){d=l}a.call(b.prototype)}else{try{throw Error();}catch(l){d=l}a()}}catch(l){if(l&&d&&\"string\"===typeof l.stack){for(var e=l.stack.split(\"\\n\"),\nf=d.stack.split(\"\\n\"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k=\"\\n\"+e[g].replace(\" at new \",\" at \");a.displayName&&k.includes(\"<anonymous>\")&&(k=k.replace(\"<anonymous>\",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{Na=!1,Error.prepareStackTrace=c}return(a=a?a.displayName||a.name:\"\")?Ma(a):\"\"}\nfunction Pa(a){switch(a.tag){case 5:return Ma(a.type);case 16:return Ma(\"Lazy\");case 13:return Ma(\"Suspense\");case 19:return Ma(\"SuspenseList\");case 0:case 2:case 15:return a=Oa(a.type,!1),a;case 11:return a=Oa(a.type.render,!1),a;case 1:return a=Oa(a.type,!0),a;default:return\"\"}}\nfunction Qa(a){if(null==a)return null;if(\"function\"===typeof a)return a.displayName||a.name||null;if(\"string\"===typeof a)return a;switch(a){case ya:return\"Fragment\";case wa:return\"Portal\";case Aa:return\"Profiler\";case za:return\"StrictMode\";case Ea:return\"Suspense\";case Fa:return\"SuspenseList\"}if(\"object\"===typeof a)switch(a.$$typeof){case Ca:return(a.displayName||\"Context\")+\".Consumer\";case Ba:return(a._context.displayName||\"Context\")+\".Provider\";case Da:var b=a.render;a=a.displayName;a||(a=b.displayName||\nb.name||\"\",a=\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");return a;case Ga:return b=a.displayName||null,null!==b?b:Qa(a.type)||\"Memo\";case Ha:b=a._payload;a=a._init;try{return Qa(a(b))}catch(c){}}return null}\nfunction Ra(a){var b=a.type;switch(a.tag){case 24:return\"Cache\";case 9:return(b.displayName||\"Context\")+\".Consumer\";case 10:return(b._context.displayName||\"Context\")+\".Provider\";case 18:return\"DehydratedFragment\";case 11:return a=b.render,a=a.displayName||a.name||\"\",b.displayName||(\"\"!==a?\"ForwardRef(\"+a+\")\":\"ForwardRef\");case 7:return\"Fragment\";case 5:return b;case 4:return\"Portal\";case 3:return\"Root\";case 6:return\"Text\";case 16:return Qa(b);case 8:return b===za?\"StrictMode\":\"Mode\";case 22:return\"Offscreen\";\ncase 12:return\"Profiler\";case 21:return\"Scope\";case 13:return\"Suspense\";case 19:return\"SuspenseList\";case 25:return\"TracingMarker\";case 1:case 0:case 17:case 2:case 14:case 15:if(\"function\"===typeof b)return b.displayName||b.name||null;if(\"string\"===typeof b)return b}return null}function Sa(a){switch(typeof a){case \"boolean\":case \"number\":case \"string\":case \"undefined\":return a;case \"object\":return a;default:return\"\"}}\nfunction Ta(a){var b=a.type;return(a=a.nodeName)&&\"input\"===a.toLowerCase()&&(\"checkbox\"===b||\"radio\"===b)}\nfunction Ua(a){var b=Ta(a)?\"checked\":\"value\",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=\"\"+a[b];if(!a.hasOwnProperty(b)&&\"undefined\"!==typeof c&&\"function\"===typeof c.get&&\"function\"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=\"\"+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=\"\"+a},stopTracking:function(){a._valueTracker=\nnull;delete a[b]}}}}function Va(a){a._valueTracker||(a._valueTracker=Ua(a))}function Wa(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d=\"\";a&&(d=Ta(a)?a.checked?\"true\":\"false\":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function Xa(a){a=a||(\"undefined\"!==typeof document?document:void 0);if(\"undefined\"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}\nfunction Ya(a,b){var c=b.checked;return A({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}function Za(a,b){var c=null==b.defaultValue?\"\":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=Sa(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:\"checkbox\"===b.type||\"radio\"===b.type?null!=b.checked:null!=b.value}}function ab(a,b){b=b.checked;null!=b&&ta(a,\"checked\",b,!1)}\nfunction bb(a,b){ab(a,b);var c=Sa(b.value),d=b.type;if(null!=c)if(\"number\"===d){if(0===c&&\"\"===a.value||a.value!=c)a.value=\"\"+c}else a.value!==\"\"+c&&(a.value=\"\"+c);else if(\"submit\"===d||\"reset\"===d){a.removeAttribute(\"value\");return}b.hasOwnProperty(\"value\")?cb(a,b.type,c):b.hasOwnProperty(\"defaultValue\")&&cb(a,b.type,Sa(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}\nfunction db(a,b,c){if(b.hasOwnProperty(\"value\")||b.hasOwnProperty(\"defaultValue\")){var d=b.type;if(!(\"submit\"!==d&&\"reset\"!==d||void 0!==b.value&&null!==b.value))return;b=\"\"+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;\"\"!==c&&(a.name=\"\");a.defaultChecked=!!a._wrapperState.initialChecked;\"\"!==c&&(a.name=c)}\nfunction cb(a,b,c){if(\"number\"!==b||Xa(a.ownerDocument)!==a)null==c?a.defaultValue=\"\"+a._wrapperState.initialValue:a.defaultValue!==\"\"+c&&(a.defaultValue=\"\"+c)}var eb=Array.isArray;\nfunction fb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b[\"$\"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty(\"$\"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=\"\"+Sa(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}\nfunction gb(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(p(91));return A({},b,{value:void 0,defaultValue:void 0,children:\"\"+a._wrapperState.initialValue})}function hb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(p(92));if(eb(c)){if(1<c.length)throw Error(p(93));c=c[0]}b=c}null==b&&(b=\"\");c=b}a._wrapperState={initialValue:Sa(c)}}\nfunction ib(a,b){var c=Sa(b.value),d=Sa(b.defaultValue);null!=c&&(c=\"\"+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=\"\"+d)}function jb(a){var b=a.textContent;b===a._wrapperState.initialValue&&\"\"!==b&&null!==b&&(a.value=b)}function kb(a){switch(a){case \"svg\":return\"http://www.w3.org/2000/svg\";case \"math\":return\"http://www.w3.org/1998/Math/MathML\";default:return\"http://www.w3.org/1999/xhtml\"}}\nfunction lb(a,b){return null==a||\"http://www.w3.org/1999/xhtml\"===a?kb(b):\"http://www.w3.org/2000/svg\"===a&&\"foreignObject\"===b?\"http://www.w3.org/1999/xhtml\":a}\nvar mb,nb=function(a){return\"undefined\"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(\"http://www.w3.org/2000/svg\"!==a.namespaceURI||\"innerHTML\"in a)a.innerHTML=b;else{mb=mb||document.createElement(\"div\");mb.innerHTML=\"<svg>\"+b.valueOf().toString()+\"</svg>\";for(b=mb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});\nfunction ob(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}\nvar pb={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,\nzoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},qb=[\"Webkit\",\"ms\",\"Moz\",\"O\"];Object.keys(pb).forEach(function(a){qb.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);pb[b]=pb[a]})});function rb(a,b,c){return null==b||\"boolean\"===typeof b||\"\"===b?\"\":c||\"number\"!==typeof b||0===b||pb.hasOwnProperty(a)&&pb[a]?(\"\"+b).trim():b+\"px\"}\nfunction sb(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf(\"--\"),e=rb(c,b[c],d);\"float\"===c&&(c=\"cssFloat\");d?a.setProperty(c,e):a[c]=e}}var tb=A({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});\nfunction ub(a,b){if(b){if(tb[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(p(137,a));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(p(60));if(\"object\"!==typeof b.dangerouslySetInnerHTML||!(\"__html\"in b.dangerouslySetInnerHTML))throw Error(p(61));}if(null!=b.style&&\"object\"!==typeof b.style)throw Error(p(62));}}\nfunction vb(a,b){if(-1===a.indexOf(\"-\"))return\"string\"===typeof b.is;switch(a){case \"annotation-xml\":case \"color-profile\":case \"font-face\":case \"font-face-src\":case \"font-face-uri\":case \"font-face-format\":case \"font-face-name\":case \"missing-glyph\":return!1;default:return!0}}var wb=null;function xb(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}var yb=null,zb=null,Ab=null;\nfunction Bb(a){if(a=Cb(a)){if(\"function\"!==typeof yb)throw Error(p(280));var b=a.stateNode;b&&(b=Db(b),yb(a.stateNode,a.type,b))}}function Eb(a){zb?Ab?Ab.push(a):Ab=[a]:zb=a}function Fb(){if(zb){var a=zb,b=Ab;Ab=zb=null;Bb(a);if(b)for(a=0;a<b.length;a++)Bb(b[a])}}function Gb(a,b){return a(b)}function Hb(){}var Ib=!1;function Jb(a,b,c){if(Ib)return a(b,c);Ib=!0;try{return Gb(a,b,c)}finally{if(Ib=!1,null!==zb||null!==Ab)Hb(),Fb()}}\nfunction Kb(a,b){var c=a.stateNode;if(null===c)return null;var d=Db(c);if(null===d)return null;c=d[b];a:switch(b){case \"onClick\":case \"onClickCapture\":case \"onDoubleClick\":case \"onDoubleClickCapture\":case \"onMouseDown\":case \"onMouseDownCapture\":case \"onMouseMove\":case \"onMouseMoveCapture\":case \"onMouseUp\":case \"onMouseUpCapture\":case \"onMouseEnter\":(d=!d.disabled)||(a=a.type,d=!(\"button\"===a||\"input\"===a||\"select\"===a||\"textarea\"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&\"function\"!==\ntypeof c)throw Error(p(231,b,typeof c));return c}var Lb=!1;if(ia)try{var Mb={};Object.defineProperty(Mb,\"passive\",{get:function(){Lb=!0}});window.addEventListener(\"test\",Mb,Mb);window.removeEventListener(\"test\",Mb,Mb)}catch(a){Lb=!1}function Nb(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var Ob=!1,Pb=null,Qb=!1,Rb=null,Sb={onError:function(a){Ob=!0;Pb=a}};function Tb(a,b,c,d,e,f,g,h,k){Ob=!1;Pb=null;Nb.apply(Sb,arguments)}\nfunction Ub(a,b,c,d,e,f,g,h,k){Tb.apply(this,arguments);if(Ob){if(Ob){var l=Pb;Ob=!1;Pb=null}else throw Error(p(198));Qb||(Qb=!0,Rb=l)}}function Vb(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function Wb(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function Xb(a){if(Vb(a)!==a)throw Error(p(188));}\nfunction Yb(a){var b=a.alternate;if(!b){b=Vb(a);if(null===b)throw Error(p(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return Xb(e),a;if(f===d)return Xb(e),b;f=f.sibling}throw Error(p(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===\nc){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(p(189));}}if(c.alternate!==d)throw Error(p(190));}if(3!==c.tag)throw Error(p(188));return c.stateNode.current===c?a:b}function Zb(a){a=Yb(a);return null!==a?$b(a):null}function $b(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=$b(a);if(null!==b)return b;a=a.sibling}return null}\nvar ac=ca.unstable_scheduleCallback,bc=ca.unstable_cancelCallback,cc=ca.unstable_shouldYield,dc=ca.unstable_requestPaint,B=ca.unstable_now,ec=ca.unstable_getCurrentPriorityLevel,fc=ca.unstable_ImmediatePriority,gc=ca.unstable_UserBlockingPriority,hc=ca.unstable_NormalPriority,ic=ca.unstable_LowPriority,jc=ca.unstable_IdlePriority,kc=null,lc=null;function mc(a){if(lc&&\"function\"===typeof lc.onCommitFiberRoot)try{lc.onCommitFiberRoot(kc,a,void 0,128===(a.current.flags&128))}catch(b){}}\nvar oc=Math.clz32?Math.clz32:nc,pc=Math.log,qc=Math.LN2;function nc(a){a>>>=0;return 0===a?32:31-(pc(a)/qc|0)|0}var rc=64,sc=4194304;\nfunction tc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;\ndefault:return a}}function uc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=tc(h):(f&=g,0!==f&&(d=tc(f)))}else g=c&~e,0!==g?d=tc(g):0!==f&&(d=tc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-oc(b),e=1<<c,d|=a[c],b&=~e;return d}\nfunction vc(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return-1;case 134217728:case 268435456:case 536870912:case 1073741824:return-1;default:return-1}}\nfunction wc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-oc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=vc(h,b)}else k<=b&&(a.expiredLanes|=h);f&=~h}}function xc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function yc(){var a=rc;rc<<=1;0===(rc&4194240)&&(rc=64);return a}function zc(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}\nfunction Ac(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-oc(b);a[b]=c}function Bc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-oc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f}}\nfunction Cc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-oc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e}}var C=0;function Dc(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Ec,Fc,Gc,Hc,Ic,Jc=!1,Kc=[],Lc=null,Mc=null,Nc=null,Oc=new Map,Pc=new Map,Qc=[],Rc=\"mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit\".split(\" \");\nfunction Sc(a,b){switch(a){case \"focusin\":case \"focusout\":Lc=null;break;case \"dragenter\":case \"dragleave\":Mc=null;break;case \"mouseover\":case \"mouseout\":Nc=null;break;case \"pointerover\":case \"pointerout\":Oc.delete(b.pointerId);break;case \"gotpointercapture\":case \"lostpointercapture\":Pc.delete(b.pointerId)}}\nfunction Tc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a={blockedOn:b,domEventName:c,eventSystemFlags:d,nativeEvent:f,targetContainers:[e]},null!==b&&(b=Cb(b),null!==b&&Fc(b)),a;a.eventSystemFlags|=d;b=a.targetContainers;null!==e&&-1===b.indexOf(e)&&b.push(e);return a}\nfunction Uc(a,b,c,d,e){switch(b){case \"focusin\":return Lc=Tc(Lc,a,b,c,d,e),!0;case \"dragenter\":return Mc=Tc(Mc,a,b,c,d,e),!0;case \"mouseover\":return Nc=Tc(Nc,a,b,c,d,e),!0;case \"pointerover\":var f=e.pointerId;Oc.set(f,Tc(Oc.get(f)||null,a,b,c,d,e));return!0;case \"gotpointercapture\":return f=e.pointerId,Pc.set(f,Tc(Pc.get(f)||null,a,b,c,d,e)),!0}return!1}\nfunction Vc(a){var b=Wc(a.target);if(null!==b){var c=Vb(b);if(null!==c)if(b=c.tag,13===b){if(b=Wb(c),null!==b){a.blockedOn=b;Ic(a.priority,function(){Gc(c)});return}}else if(3===b&&c.stateNode.current.memoizedState.isDehydrated){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}\nfunction Xc(a){if(null!==a.blockedOn)return!1;for(var b=a.targetContainers;0<b.length;){var c=Yc(a.domEventName,a.eventSystemFlags,b[0],a.nativeEvent);if(null===c){c=a.nativeEvent;var d=new c.constructor(c.type,c);wb=d;c.target.dispatchEvent(d);wb=null}else return b=Cb(c),null!==b&&Fc(b),a.blockedOn=c,!1;b.shift()}return!0}function Zc(a,b,c){Xc(a)&&c.delete(b)}function $c(){Jc=!1;null!==Lc&&Xc(Lc)&&(Lc=null);null!==Mc&&Xc(Mc)&&(Mc=null);null!==Nc&&Xc(Nc)&&(Nc=null);Oc.forEach(Zc);Pc.forEach(Zc)}\nfunction ad(a,b){a.blockedOn===b&&(a.blockedOn=null,Jc||(Jc=!0,ca.unstable_scheduleCallback(ca.unstable_NormalPriority,$c)))}\nfunction bd(a){function b(b){return ad(b,a)}if(0<Kc.length){ad(Kc[0],a);for(var c=1;c<Kc.length;c++){var d=Kc[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Lc&&ad(Lc,a);null!==Mc&&ad(Mc,a);null!==Nc&&ad(Nc,a);Oc.forEach(b);Pc.forEach(b);for(c=0;c<Qc.length;c++)d=Qc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Qc.length&&(c=Qc[0],null===c.blockedOn);)Vc(c),null===c.blockedOn&&Qc.shift()}var cd=ua.ReactCurrentBatchConfig,dd=!0;\nfunction ed(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=1,fd(a,b,c,d)}finally{C=e,cd.transition=f}}function gd(a,b,c,d){var e=C,f=cd.transition;cd.transition=null;try{C=4,fd(a,b,c,d)}finally{C=e,cd.transition=f}}\nfunction fd(a,b,c,d){if(dd){var e=Yc(a,b,c,d);if(null===e)hd(a,b,d,id,c),Sc(a,d);else if(Uc(e,a,b,c,d))d.stopPropagation();else if(Sc(a,d),b&4&&-1<Rc.indexOf(a)){for(;null!==e;){var f=Cb(e);null!==f&&Ec(f);f=Yc(a,b,c,d);null===f&&hd(a,b,d,id,c);if(f===e)break;e=f}null!==e&&d.stopPropagation()}else hd(a,b,d,null,c)}}var id=null;\nfunction Yc(a,b,c,d){id=null;a=xb(d);a=Wc(a);if(null!==a)if(b=Vb(a),null===b)a=null;else if(c=b.tag,13===c){a=Wb(b);if(null!==a)return a;a=null}else if(3===c){if(b.stateNode.current.memoizedState.isDehydrated)return 3===b.tag?b.stateNode.containerInfo:null;a=null}else b!==a&&(a=null);id=a;return null}\nfunction jd(a){switch(a){case \"cancel\":case \"click\":case \"close\":case \"contextmenu\":case \"copy\":case \"cut\":case \"auxclick\":case \"dblclick\":case \"dragend\":case \"dragstart\":case \"drop\":case \"focusin\":case \"focusout\":case \"input\":case \"invalid\":case \"keydown\":case \"keypress\":case \"keyup\":case \"mousedown\":case \"mouseup\":case \"paste\":case \"pause\":case \"play\":case \"pointercancel\":case \"pointerdown\":case \"pointerup\":case \"ratechange\":case \"reset\":case \"resize\":case \"seeked\":case \"submit\":case \"touchcancel\":case \"touchend\":case \"touchstart\":case \"volumechange\":case \"change\":case \"selectionchange\":case \"textInput\":case \"compositionstart\":case \"compositionend\":case \"compositionupdate\":case \"beforeblur\":case \"afterblur\":case \"beforeinput\":case \"blur\":case \"fullscreenchange\":case \"focus\":case \"hashchange\":case \"popstate\":case \"select\":case \"selectstart\":return 1;case \"drag\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"mousemove\":case \"mouseout\":case \"mouseover\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"scroll\":case \"toggle\":case \"touchmove\":case \"wheel\":case \"mouseenter\":case \"mouseleave\":case \"pointerenter\":case \"pointerleave\":return 4;\ncase \"message\":switch(ec()){case fc:return 1;case gc:return 4;case hc:case ic:return 16;case jc:return 536870912;default:return 16}default:return 16}}var kd=null,ld=null,md=null;function nd(){if(md)return md;var a,b=ld,c=b.length,d,e=\"value\"in kd?kd.value:kd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return md=e.slice(a,1<d?1-d:void 0)}\nfunction od(a){var b=a.keyCode;\"charCode\"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}function pd(){return!0}function qd(){return!1}\nfunction rd(a){function b(b,d,e,f,g){this._reactName=b;this._targetInst=e;this.type=d;this.nativeEvent=f;this.target=g;this.currentTarget=null;for(var c in a)a.hasOwnProperty(c)&&(b=a[c],this[c]=b?b(f):f[c]);this.isDefaultPrevented=(null!=f.defaultPrevented?f.defaultPrevented:!1===f.returnValue)?pd:qd;this.isPropagationStopped=qd;return this}A(b.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():\"unknown\"!==typeof a.returnValue&&\n(a.returnValue=!1),this.isDefaultPrevented=pd)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():\"unknown\"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=pd)},persist:function(){},isPersistent:pd});return b}\nvar sd={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},td=rd(sd),ud=A({},sd,{view:0,detail:0}),vd=rd(ud),wd,xd,yd,Ad=A({},ud,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:zd,button:0,buttons:0,relatedTarget:function(a){return void 0===a.relatedTarget?a.fromElement===a.srcElement?a.toElement:a.fromElement:a.relatedTarget},movementX:function(a){if(\"movementX\"in\na)return a.movementX;a!==yd&&(yd&&\"mousemove\"===a.type?(wd=a.screenX-yd.screenX,xd=a.screenY-yd.screenY):xd=wd=0,yd=a);return wd},movementY:function(a){return\"movementY\"in a?a.movementY:xd}}),Bd=rd(Ad),Cd=A({},Ad,{dataTransfer:0}),Dd=rd(Cd),Ed=A({},ud,{relatedTarget:0}),Fd=rd(Ed),Gd=A({},sd,{animationName:0,elapsedTime:0,pseudoElement:0}),Hd=rd(Gd),Id=A({},sd,{clipboardData:function(a){return\"clipboardData\"in a?a.clipboardData:window.clipboardData}}),Jd=rd(Id),Kd=A({},sd,{data:0}),Ld=rd(Kd),Md={Esc:\"Escape\",\nSpacebar:\" \",Left:\"ArrowLeft\",Up:\"ArrowUp\",Right:\"ArrowRight\",Down:\"ArrowDown\",Del:\"Delete\",Win:\"OS\",Menu:\"ContextMenu\",Apps:\"ContextMenu\",Scroll:\"ScrollLock\",MozPrintableKey:\"Unidentified\"},Nd={8:\"Backspace\",9:\"Tab\",12:\"Clear\",13:\"Enter\",16:\"Shift\",17:\"Control\",18:\"Alt\",19:\"Pause\",20:\"CapsLock\",27:\"Escape\",32:\" \",33:\"PageUp\",34:\"PageDown\",35:\"End\",36:\"Home\",37:\"ArrowLeft\",38:\"ArrowUp\",39:\"ArrowRight\",40:\"ArrowDown\",45:\"Insert\",46:\"Delete\",112:\"F1\",113:\"F2\",114:\"F3\",115:\"F4\",116:\"F5\",117:\"F6\",118:\"F7\",\n119:\"F8\",120:\"F9\",121:\"F10\",122:\"F11\",123:\"F12\",144:\"NumLock\",145:\"ScrollLock\",224:\"Meta\"},Od={Alt:\"altKey\",Control:\"ctrlKey\",Meta:\"metaKey\",Shift:\"shiftKey\"};function Pd(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Od[a])?!!b[a]:!1}function zd(){return Pd}\nvar Qd=A({},ud,{key:function(a){if(a.key){var b=Md[a.key]||a.key;if(\"Unidentified\"!==b)return b}return\"keypress\"===a.type?(a=od(a),13===a?\"Enter\":String.fromCharCode(a)):\"keydown\"===a.type||\"keyup\"===a.type?Nd[a.keyCode]||\"Unidentified\":\"\"},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:zd,charCode:function(a){return\"keypress\"===a.type?od(a):0},keyCode:function(a){return\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0},which:function(a){return\"keypress\"===\na.type?od(a):\"keydown\"===a.type||\"keyup\"===a.type?a.keyCode:0}}),Rd=rd(Qd),Sd=A({},Ad,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0}),Td=rd(Sd),Ud=A({},ud,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:zd}),Vd=rd(Ud),Wd=A({},sd,{propertyName:0,elapsedTime:0,pseudoElement:0}),Xd=rd(Wd),Yd=A({},Ad,{deltaX:function(a){return\"deltaX\"in a?a.deltaX:\"wheelDeltaX\"in a?-a.wheelDeltaX:0},\ndeltaY:function(a){return\"deltaY\"in a?a.deltaY:\"wheelDeltaY\"in a?-a.wheelDeltaY:\"wheelDelta\"in a?-a.wheelDelta:0},deltaZ:0,deltaMode:0}),Zd=rd(Yd),$d=[9,13,27,32],ae=ia&&\"CompositionEvent\"in window,be=null;ia&&\"documentMode\"in document&&(be=document.documentMode);var ce=ia&&\"TextEvent\"in window&&!be,de=ia&&(!ae||be&&8<be&&11>=be),ee=String.fromCharCode(32),fe=!1;\nfunction ge(a,b){switch(a){case \"keyup\":return-1!==$d.indexOf(b.keyCode);case \"keydown\":return 229!==b.keyCode;case \"keypress\":case \"mousedown\":case \"focusout\":return!0;default:return!1}}function he(a){a=a.detail;return\"object\"===typeof a&&\"data\"in a?a.data:null}var ie=!1;function je(a,b){switch(a){case \"compositionend\":return he(b);case \"keypress\":if(32!==b.which)return null;fe=!0;return ee;case \"textInput\":return a=b.data,a===ee&&fe?null:a;default:return null}}\nfunction ke(a,b){if(ie)return\"compositionend\"===a||!ae&&ge(a,b)?(a=nd(),md=ld=kd=null,ie=!1,a):null;switch(a){case \"paste\":return null;case \"keypress\":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case \"compositionend\":return de&&\"ko\"!==b.locale?null:b.data;default:return null}}\nvar le={color:!0,date:!0,datetime:!0,\"datetime-local\":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function me(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return\"input\"===b?!!le[a.type]:\"textarea\"===b?!0:!1}function ne(a,b,c,d){Eb(d);b=oe(b,\"onChange\");0<b.length&&(c=new td(\"onChange\",\"change\",null,c,d),a.push({event:c,listeners:b}))}var pe=null,qe=null;function re(a){se(a,0)}function te(a){var b=ue(a);if(Wa(b))return a}\nfunction ve(a,b){if(\"change\"===a)return b}var we=!1;if(ia){var xe;if(ia){var ye=\"oninput\"in document;if(!ye){var ze=document.createElement(\"div\");ze.setAttribute(\"oninput\",\"return;\");ye=\"function\"===typeof ze.oninput}xe=ye}else xe=!1;we=xe&&(!document.documentMode||9<document.documentMode)}function Ae(){pe&&(pe.detachEvent(\"onpropertychange\",Be),qe=pe=null)}function Be(a){if(\"value\"===a.propertyName&&te(qe)){var b=[];ne(b,qe,a,xb(a));Jb(re,b)}}\nfunction Ce(a,b,c){\"focusin\"===a?(Ae(),pe=b,qe=c,pe.attachEvent(\"onpropertychange\",Be)):\"focusout\"===a&&Ae()}function De(a){if(\"selectionchange\"===a||\"keyup\"===a||\"keydown\"===a)return te(qe)}function Ee(a,b){if(\"click\"===a)return te(b)}function Fe(a,b){if(\"input\"===a||\"change\"===a)return te(b)}function Ge(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var He=\"function\"===typeof Object.is?Object.is:Ge;\nfunction Ie(a,b){if(He(a,b))return!0;if(\"object\"!==typeof a||null===a||\"object\"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++){var e=c[d];if(!ja.call(b,e)||!He(a[e],b[e]))return!1}return!0}function Je(a){for(;a&&a.firstChild;)a=a.firstChild;return a}\nfunction Ke(a,b){var c=Je(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=Je(c)}}function Le(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?Le(a,b.parentNode):\"contains\"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}\nfunction Me(){for(var a=window,b=Xa();b instanceof a.HTMLIFrameElement;){try{var c=\"string\"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=Xa(a.document)}return b}function Ne(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&(\"input\"===b&&(\"text\"===a.type||\"search\"===a.type||\"tel\"===a.type||\"url\"===a.type||\"password\"===a.type)||\"textarea\"===b||\"true\"===a.contentEditable)}\nfunction Oe(a){var b=Me(),c=a.focusedElem,d=a.selectionRange;if(b!==c&&c&&c.ownerDocument&&Le(c.ownerDocument.documentElement,c)){if(null!==d&&Ne(c))if(b=d.start,a=d.end,void 0===a&&(a=b),\"selectionStart\"in c)c.selectionStart=b,c.selectionEnd=Math.min(a,c.value.length);else if(a=(b=c.ownerDocument||document)&&b.defaultView||window,a.getSelection){a=a.getSelection();var e=c.textContent.length,f=Math.min(d.start,e);d=void 0===d.end?f:Math.min(d.end,e);!a.extend&&f>d&&(e=d,d=f,f=e);e=Ke(c,f);var g=Ke(c,\nd);e&&g&&(1!==a.rangeCount||a.anchorNode!==e.node||a.anchorOffset!==e.offset||a.focusNode!==g.node||a.focusOffset!==g.offset)&&(b=b.createRange(),b.setStart(e.node,e.offset),a.removeAllRanges(),f>d?(a.addRange(b),a.extend(g.node,g.offset)):(b.setEnd(g.node,g.offset),a.addRange(b)))}b=[];for(a=c;a=a.parentNode;)1===a.nodeType&&b.push({element:a,left:a.scrollLeft,top:a.scrollTop});\"function\"===typeof c.focus&&c.focus();for(c=0;c<b.length;c++)a=b[c],a.element.scrollLeft=a.left,a.element.scrollTop=a.top}}\nvar Pe=ia&&\"documentMode\"in document&&11>=document.documentMode,Qe=null,Re=null,Se=null,Te=!1;\nfunction Ue(a,b,c){var d=c.window===c?c.document:9===c.nodeType?c:c.ownerDocument;Te||null==Qe||Qe!==Xa(d)||(d=Qe,\"selectionStart\"in d&&Ne(d)?d={start:d.selectionStart,end:d.selectionEnd}:(d=(d.ownerDocument&&d.ownerDocument.defaultView||window).getSelection(),d={anchorNode:d.anchorNode,anchorOffset:d.anchorOffset,focusNode:d.focusNode,focusOffset:d.focusOffset}),Se&&Ie(Se,d)||(Se=d,d=oe(Re,\"onSelect\"),0<d.length&&(b=new td(\"onSelect\",\"select\",null,b,c),a.push({event:b,listeners:d}),b.target=Qe)))}\nfunction Ve(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c[\"Webkit\"+a]=\"webkit\"+b;c[\"Moz\"+a]=\"moz\"+b;return c}var We={animationend:Ve(\"Animation\",\"AnimationEnd\"),animationiteration:Ve(\"Animation\",\"AnimationIteration\"),animationstart:Ve(\"Animation\",\"AnimationStart\"),transitionend:Ve(\"Transition\",\"TransitionEnd\")},Xe={},Ye={};\nia&&(Ye=document.createElement(\"div\").style,\"AnimationEvent\"in window||(delete We.animationend.animation,delete We.animationiteration.animation,delete We.animationstart.animation),\"TransitionEvent\"in window||delete We.transitionend.transition);function Ze(a){if(Xe[a])return Xe[a];if(!We[a])return a;var b=We[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Ye)return Xe[a]=b[c];return a}var $e=Ze(\"animationend\"),af=Ze(\"animationiteration\"),bf=Ze(\"animationstart\"),cf=Ze(\"transitionend\"),df=new Map,ef=\"abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel\".split(\" \");\nfunction ff(a,b){df.set(a,b);fa(b,[a])}for(var gf=0;gf<ef.length;gf++){var hf=ef[gf],jf=hf.toLowerCase(),kf=hf[0].toUpperCase()+hf.slice(1);ff(jf,\"on\"+kf)}ff($e,\"onAnimationEnd\");ff(af,\"onAnimationIteration\");ff(bf,\"onAnimationStart\");ff(\"dblclick\",\"onDoubleClick\");ff(\"focusin\",\"onFocus\");ff(\"focusout\",\"onBlur\");ff(cf,\"onTransitionEnd\");ha(\"onMouseEnter\",[\"mouseout\",\"mouseover\"]);ha(\"onMouseLeave\",[\"mouseout\",\"mouseover\"]);ha(\"onPointerEnter\",[\"pointerout\",\"pointerover\"]);\nha(\"onPointerLeave\",[\"pointerout\",\"pointerover\"]);fa(\"onChange\",\"change click focusin focusout input keydown keyup selectionchange\".split(\" \"));fa(\"onSelect\",\"focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange\".split(\" \"));fa(\"onBeforeInput\",[\"compositionend\",\"keypress\",\"textInput\",\"paste\"]);fa(\"onCompositionEnd\",\"compositionend focusout keydown keypress keyup mousedown\".split(\" \"));fa(\"onCompositionStart\",\"compositionstart focusout keydown keypress keyup mousedown\".split(\" \"));\nfa(\"onCompositionUpdate\",\"compositionupdate focusout keydown keypress keyup mousedown\".split(\" \"));var lf=\"abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting\".split(\" \"),mf=new Set(\"cancel close invalid load scroll toggle\".split(\" \").concat(lf));\nfunction nf(a,b,c){var d=a.type||\"unknown-event\";a.currentTarget=c;Ub(d,b,void 0,a);a.currentTarget=null}\nfunction se(a,b){b=0!==(b&4);for(var c=0;c<a.length;c++){var d=a[c],e=d.event;d=d.listeners;a:{var f=void 0;if(b)for(var g=d.length-1;0<=g;g--){var h=d[g],k=h.instance,l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}else for(g=0;g<d.length;g++){h=d[g];k=h.instance;l=h.currentTarget;h=h.listener;if(k!==f&&e.isPropagationStopped())break a;nf(e,h,l);f=k}}}if(Qb)throw a=Rb,Qb=!1,Rb=null,a;}\nfunction D(a,b){var c=b[of];void 0===c&&(c=b[of]=new Set);var d=a+\"__bubble\";c.has(d)||(pf(b,a,2,!1),c.add(d))}function qf(a,b,c){var d=0;b&&(d|=4);pf(c,a,d,b)}var rf=\"_reactListening\"+Math.random().toString(36).slice(2);function sf(a){if(!a[rf]){a[rf]=!0;da.forEach(function(b){\"selectionchange\"!==b&&(mf.has(b)||qf(b,!1,a),qf(b,!0,a))});var b=9===a.nodeType?a:a.ownerDocument;null===b||b[rf]||(b[rf]=!0,qf(\"selectionchange\",!1,b))}}\nfunction pf(a,b,c,d){switch(jd(b)){case 1:var e=ed;break;case 4:e=gd;break;default:e=fd}c=e.bind(null,b,c,a);e=void 0;!Lb||\"touchstart\"!==b&&\"touchmove\"!==b&&\"wheel\"!==b||(e=!0);d?void 0!==e?a.addEventListener(b,c,{capture:!0,passive:e}):a.addEventListener(b,c,!0):void 0!==e?a.addEventListener(b,c,{passive:e}):a.addEventListener(b,c,!1)}\nfunction hd(a,b,c,d,e){var f=d;if(0===(b&1)&&0===(b&2)&&null!==d)a:for(;;){if(null===d)return;var g=d.tag;if(3===g||4===g){var h=d.stateNode.containerInfo;if(h===e||8===h.nodeType&&h.parentNode===e)break;if(4===g)for(g=d.return;null!==g;){var k=g.tag;if(3===k||4===k)if(k=g.stateNode.containerInfo,k===e||8===k.nodeType&&k.parentNode===e)return;g=g.return}for(;null!==h;){g=Wc(h);if(null===g)return;k=g.tag;if(5===k||6===k){d=f=g;continue a}h=h.parentNode}}d=d.return}Jb(function(){var d=f,e=xb(c),g=[];\na:{var h=df.get(a);if(void 0!==h){var k=td,n=a;switch(a){case \"keypress\":if(0===od(c))break a;case \"keydown\":case \"keyup\":k=Rd;break;case \"focusin\":n=\"focus\";k=Fd;break;case \"focusout\":n=\"blur\";k=Fd;break;case \"beforeblur\":case \"afterblur\":k=Fd;break;case \"click\":if(2===c.button)break a;case \"auxclick\":case \"dblclick\":case \"mousedown\":case \"mousemove\":case \"mouseup\":case \"mouseout\":case \"mouseover\":case \"contextmenu\":k=Bd;break;case \"drag\":case \"dragend\":case \"dragenter\":case \"dragexit\":case \"dragleave\":case \"dragover\":case \"dragstart\":case \"drop\":k=\nDd;break;case \"touchcancel\":case \"touchend\":case \"touchmove\":case \"touchstart\":k=Vd;break;case $e:case af:case bf:k=Hd;break;case cf:k=Xd;break;case \"scroll\":k=vd;break;case \"wheel\":k=Zd;break;case \"copy\":case \"cut\":case \"paste\":k=Jd;break;case \"gotpointercapture\":case \"lostpointercapture\":case \"pointercancel\":case \"pointerdown\":case \"pointermove\":case \"pointerout\":case \"pointerover\":case \"pointerup\":k=Td}var t=0!==(b&4),J=!t&&\"scroll\"===a,x=t?null!==h?h+\"Capture\":null:h;t=[];for(var w=d,u;null!==\nw;){u=w;var F=u.stateNode;5===u.tag&&null!==F&&(u=F,null!==x&&(F=Kb(w,x),null!=F&&t.push(tf(w,F,u))));if(J)break;w=w.return}0<t.length&&(h=new k(h,n,null,c,e),g.push({event:h,listeners:t}))}}if(0===(b&7)){a:{h=\"mouseover\"===a||\"pointerover\"===a;k=\"mouseout\"===a||\"pointerout\"===a;if(h&&c!==wb&&(n=c.relatedTarget||c.fromElement)&&(Wc(n)||n[uf]))break a;if(k||h){h=e.window===e?e:(h=e.ownerDocument)?h.defaultView||h.parentWindow:window;if(k){if(n=c.relatedTarget||c.toElement,k=d,n=n?Wc(n):null,null!==\nn&&(J=Vb(n),n!==J||5!==n.tag&&6!==n.tag))n=null}else k=null,n=d;if(k!==n){t=Bd;F=\"onMouseLeave\";x=\"onMouseEnter\";w=\"mouse\";if(\"pointerout\"===a||\"pointerover\"===a)t=Td,F=\"onPointerLeave\",x=\"onPointerEnter\",w=\"pointer\";J=null==k?h:ue(k);u=null==n?h:ue(n);h=new t(F,w+\"leave\",k,c,e);h.target=J;h.relatedTarget=u;F=null;Wc(e)===d&&(t=new t(x,w+\"enter\",n,c,e),t.target=u,t.relatedTarget=J,F=t);J=F;if(k&&n)b:{t=k;x=n;w=0;for(u=t;u;u=vf(u))w++;u=0;for(F=x;F;F=vf(F))u++;for(;0<w-u;)t=vf(t),w--;for(;0<u-w;)x=\nvf(x),u--;for(;w--;){if(t===x||null!==x&&t===x.alternate)break b;t=vf(t);x=vf(x)}t=null}else t=null;null!==k&&wf(g,h,k,t,!1);null!==n&&null!==J&&wf(g,J,n,t,!0)}}}a:{h=d?ue(d):window;k=h.nodeName&&h.nodeName.toLowerCase();if(\"select\"===k||\"input\"===k&&\"file\"===h.type)var na=ve;else if(me(h))if(we)na=Fe;else{na=De;var xa=Ce}else(k=h.nodeName)&&\"input\"===k.toLowerCase()&&(\"checkbox\"===h.type||\"radio\"===h.type)&&(na=Ee);if(na&&(na=na(a,d))){ne(g,na,c,e);break a}xa&&xa(a,h,d);\"focusout\"===a&&(xa=h._wrapperState)&&\nxa.controlled&&\"number\"===h.type&&cb(h,\"number\",h.value)}xa=d?ue(d):window;switch(a){case \"focusin\":if(me(xa)||\"true\"===xa.contentEditable)Qe=xa,Re=d,Se=null;break;case \"focusout\":Se=Re=Qe=null;break;case \"mousedown\":Te=!0;break;case \"contextmenu\":case \"mouseup\":case \"dragend\":Te=!1;Ue(g,c,e);break;case \"selectionchange\":if(Pe)break;case \"keydown\":case \"keyup\":Ue(g,c,e)}var $a;if(ae)b:{switch(a){case \"compositionstart\":var ba=\"onCompositionStart\";break b;case \"compositionend\":ba=\"onCompositionEnd\";\nbreak b;case \"compositionupdate\":ba=\"onCompositionUpdate\";break b}ba=void 0}else ie?ge(a,c)&&(ba=\"onCompositionEnd\"):\"keydown\"===a&&229===c.keyCode&&(ba=\"onCompositionStart\");ba&&(de&&\"ko\"!==c.locale&&(ie||\"onCompositionStart\"!==ba?\"onCompositionEnd\"===ba&&ie&&($a=nd()):(kd=e,ld=\"value\"in kd?kd.value:kd.textContent,ie=!0)),xa=oe(d,ba),0<xa.length&&(ba=new Ld(ba,a,null,c,e),g.push({event:ba,listeners:xa}),$a?ba.data=$a:($a=he(c),null!==$a&&(ba.data=$a))));if($a=ce?je(a,c):ke(a,c))d=oe(d,\"onBeforeInput\"),\n0<d.length&&(e=new Ld(\"onBeforeInput\",\"beforeinput\",null,c,e),g.push({event:e,listeners:d}),e.data=$a)}se(g,b)})}function tf(a,b,c){return{instance:a,listener:b,currentTarget:c}}function oe(a,b){for(var c=b+\"Capture\",d=[];null!==a;){var e=a,f=e.stateNode;5===e.tag&&null!==f&&(e=f,f=Kb(a,c),null!=f&&d.unshift(tf(a,f,e)),f=Kb(a,b),null!=f&&d.push(tf(a,f,e)));a=a.return}return d}function vf(a){if(null===a)return null;do a=a.return;while(a&&5!==a.tag);return a?a:null}\nfunction wf(a,b,c,d,e){for(var f=b._reactName,g=[];null!==c&&c!==d;){var h=c,k=h.alternate,l=h.stateNode;if(null!==k&&k===d)break;5===h.tag&&null!==l&&(h=l,e?(k=Kb(c,f),null!=k&&g.unshift(tf(c,k,h))):e||(k=Kb(c,f),null!=k&&g.push(tf(c,k,h))));c=c.return}0!==g.length&&a.push({event:b,listeners:g})}var xf=/\\r\\n?/g,yf=/\\u0000|\\uFFFD/g;function zf(a){return(\"string\"===typeof a?a:\"\"+a).replace(xf,\"\\n\").replace(yf,\"\")}function Af(a,b,c){b=zf(b);if(zf(a)!==b&&c)throw Error(p(425));}function Bf(){}\nvar Cf=null,Df=null;function Ef(a,b){return\"textarea\"===a||\"noscript\"===a||\"string\"===typeof b.children||\"number\"===typeof b.children||\"object\"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}\nvar Ff=\"function\"===typeof setTimeout?setTimeout:void 0,Gf=\"function\"===typeof clearTimeout?clearTimeout:void 0,Hf=\"function\"===typeof Promise?Promise:void 0,Jf=\"function\"===typeof queueMicrotask?queueMicrotask:\"undefined\"!==typeof Hf?function(a){return Hf.resolve(null).then(a).catch(If)}:Ff;function If(a){setTimeout(function(){throw a;})}\nfunction Kf(a,b){var c=b,d=0;do{var e=c.nextSibling;a.removeChild(c);if(e&&8===e.nodeType)if(c=e.data,\"/$\"===c){if(0===d){a.removeChild(e);bd(b);return}d--}else\"$\"!==c&&\"$?\"!==c&&\"$!\"!==c||d++;c=e}while(c);bd(b)}function Lf(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break;if(8===b){b=a.data;if(\"$\"===b||\"$!\"===b||\"$?\"===b)break;if(\"/$\"===b)return null}}return a}\nfunction Mf(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(\"$\"===c||\"$!\"===c||\"$?\"===c){if(0===b)return a;b--}else\"/$\"===c&&b++}a=a.previousSibling}return null}var Nf=Math.random().toString(36).slice(2),Of=\"__reactFiber$\"+Nf,Pf=\"__reactProps$\"+Nf,uf=\"__reactContainer$\"+Nf,of=\"__reactEvents$\"+Nf,Qf=\"__reactListeners$\"+Nf,Rf=\"__reactHandles$\"+Nf;\nfunction Wc(a){var b=a[Of];if(b)return b;for(var c=a.parentNode;c;){if(b=c[uf]||c[Of]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Mf(a);null!==a;){if(c=a[Of])return c;a=Mf(a)}return b}a=c;c=a.parentNode}return null}function Cb(a){a=a[Of]||a[uf];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function ue(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(p(33));}function Db(a){return a[Pf]||null}var Sf=[],Tf=-1;function Uf(a){return{current:a}}\nfunction E(a){0>Tf||(a.current=Sf[Tf],Sf[Tf]=null,Tf--)}function G(a,b){Tf++;Sf[Tf]=a.current;a.current=b}var Vf={},H=Uf(Vf),Wf=Uf(!1),Xf=Vf;function Yf(a,b){var c=a.type.contextTypes;if(!c)return Vf;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}\nfunction Zf(a){a=a.childContextTypes;return null!==a&&void 0!==a}function $f(){E(Wf);E(H)}function ag(a,b,c){if(H.current!==Vf)throw Error(p(168));G(H,b);G(Wf,c)}function bg(a,b,c){var d=a.stateNode;b=b.childContextTypes;if(\"function\"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(p(108,Ra(a)||\"Unknown\",e));return A({},c,d)}\nfunction cg(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Vf;Xf=H.current;G(H,a);G(Wf,Wf.current);return!0}function dg(a,b,c){var d=a.stateNode;if(!d)throw Error(p(169));c?(a=bg(a,b,Xf),d.__reactInternalMemoizedMergedChildContext=a,E(Wf),E(H),G(H,a)):E(Wf);G(Wf,c)}var eg=null,fg=!1,gg=!1;function hg(a){null===eg?eg=[a]:eg.push(a)}function ig(a){fg=!0;hg(a)}\nfunction jg(){if(!gg&&null!==eg){gg=!0;var a=0,b=C;try{var c=eg;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}eg=null;fg=!1}catch(e){throw null!==eg&&(eg=eg.slice(a+1)),ac(fc,jg),e;}finally{C=b,gg=!1}}return null}var kg=[],lg=0,mg=null,ng=0,og=[],pg=0,qg=null,rg=1,sg=\"\";function tg(a,b){kg[lg++]=ng;kg[lg++]=mg;mg=a;ng=b}\nfunction ug(a,b,c){og[pg++]=rg;og[pg++]=sg;og[pg++]=qg;qg=a;var d=rg;a=sg;var e=32-oc(d)-1;d&=~(1<<e);c+=1;var f=32-oc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;rg=1<<32-oc(b)+e|c<<e|d;sg=f+a}else rg=1<<f|c<<e|d,sg=a}function vg(a){null!==a.return&&(tg(a,1),ug(a,1,0))}function wg(a){for(;a===mg;)mg=kg[--lg],kg[lg]=null,ng=kg[--lg],kg[lg]=null;for(;a===qg;)qg=og[--pg],og[pg]=null,sg=og[--pg],og[pg]=null,rg=og[--pg],og[pg]=null}var xg=null,yg=null,I=!1,zg=null;\nfunction Ag(a,b){var c=Bg(5,null,null,0);c.elementType=\"DELETED\";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c)}\nfunction Cg(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,xg=a,yg=Lf(b.firstChild),!0):!1;case 6:return b=\"\"===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,xg=a,yg=null,!0):!1;case 13:return b=8!==b.nodeType?null:b,null!==b?(c=null!==qg?{id:rg,overflow:sg}:null,a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824},c=Bg(18,null,null,0),c.stateNode=b,c.return=a,a.child=c,xg=a,yg=\nnull,!0):!1;default:return!1}}function Dg(a){return 0!==(a.mode&1)&&0===(a.flags&128)}function Eg(a){if(I){var b=yg;if(b){var c=b;if(!Cg(a,b)){if(Dg(a))throw Error(p(418));b=Lf(c.nextSibling);var d=xg;b&&Cg(a,b)?Ag(d,c):(a.flags=a.flags&-4097|2,I=!1,xg=a)}}else{if(Dg(a))throw Error(p(418));a.flags=a.flags&-4097|2;I=!1;xg=a}}}function Fg(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;xg=a}\nfunction Gg(a){if(a!==xg)return!1;if(!I)return Fg(a),I=!0,!1;var b;(b=3!==a.tag)&&!(b=5!==a.tag)&&(b=a.type,b=\"head\"!==b&&\"body\"!==b&&!Ef(a.type,a.memoizedProps));if(b&&(b=yg)){if(Dg(a))throw Hg(),Error(p(418));for(;b;)Ag(a,b),b=Lf(b.nextSibling)}Fg(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(p(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(\"/$\"===c){if(0===b){yg=Lf(a.nextSibling);break a}b--}else\"$\"!==c&&\"$!\"!==c&&\"$?\"!==c||b++}a=a.nextSibling}yg=\nnull}}else yg=xg?Lf(a.stateNode.nextSibling):null;return!0}function Hg(){for(var a=yg;a;)a=Lf(a.nextSibling)}function Ig(){yg=xg=null;I=!1}function Jg(a){null===zg?zg=[a]:zg.push(a)}var Kg=ua.ReactCurrentBatchConfig;function Lg(a,b){if(a&&a.defaultProps){b=A({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}var Mg=Uf(null),Ng=null,Og=null,Pg=null;function Qg(){Pg=Og=Ng=null}function Rg(a){var b=Mg.current;E(Mg);a._currentValue=b}\nfunction Sg(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return}}function Tg(a,b){Ng=a;Pg=Og=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(Ug=!0),a.firstContext=null)}\nfunction Vg(a){var b=a._currentValue;if(Pg!==a)if(a={context:a,memoizedValue:b,next:null},null===Og){if(null===Ng)throw Error(p(308));Og=a;Ng.dependencies={lanes:0,firstContext:a}}else Og=Og.next=a;return b}var Wg=null;function Xg(a){null===Wg?Wg=[a]:Wg.push(a)}function Yg(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,Xg(b)):(c.next=e.next,e.next=c);b.interleaved=c;return Zg(a,d)}\nfunction Zg(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var $g=!1;function ah(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}\nfunction bh(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects})}function ch(a,b){return{eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}\nfunction dh(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(K&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return Zg(a,c)}e=d.interleaved;null===e?(b.next=b,Xg(d)):(b.next=e.next,e.next=b);d.interleaved=b;return Zg(a,c)}function eh(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nfunction fh(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next}while(null!==c);null===f?e=f=b:f=f.next=b}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=\nb;c.lastBaseUpdate=b}\nfunction gh(a,b,c,d){var e=a.updateQueue;$g=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k))}if(null!==f){var q=e.baseState;g=0;m=l=k=null;h=f;do{var r=h.lane,y=h.eventTime;if((d&r)===r){null!==m&&(m=m.next={eventTime:y,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,\nnext:null});a:{var n=a,t=h;r=b;y=c;switch(t.tag){case 1:n=t.payload;if(\"function\"===typeof n){q=n.call(y,q,r);break a}q=n;break a;case 3:n.flags=n.flags&-65537|128;case 0:n=t.payload;r=\"function\"===typeof n?n.call(y,q,r):n;if(null===r||void 0===r)break a;q=A({},q,r);break a;case 2:$g=!0}}null!==h.callback&&0!==h.lane&&(a.flags|=64,r=e.effects,null===r?e.effects=[h]:r.push(h))}else y={eventTime:y,lane:r,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=y,k=q):m=m.next=y,g|=r;\nh=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else r=h,h=r.next,r.next=null,e.lastBaseUpdate=r,e.shared.pending=null}while(1);null===m&&(k=q);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);hh|=g;a.lanes=g;a.memoizedState=q}}\nfunction ih(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if(\"function\"!==typeof e)throw Error(p(191,e));e.call(d)}}}var jh=(new aa.Component).refs;function kh(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:A({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c)}\nvar nh={isMounted:function(a){return(a=a._reactInternals)?Vb(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=L(),e=lh(a),f=ch(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=dh(a,f,e);null!==b&&(mh(b,a,e,d),eh(b,a,e))},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=L(),d=\nlh(a),e=ch(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=dh(a,e,d);null!==b&&(mh(b,a,d,c),eh(b,a,d))}};function oh(a,b,c,d,e,f,g){a=a.stateNode;return\"function\"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Ie(c,d)||!Ie(e,f):!0}\nfunction ph(a,b,c){var d=!1,e=Vf;var f=b.contextType;\"object\"===typeof f&&null!==f?f=Vg(f):(e=Zf(b)?Xf:H.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Yf(a,e):Vf);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=nh;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}\nfunction qh(a,b,c,d){a=b.state;\"function\"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);\"function\"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&nh.enqueueReplaceState(b,b.state,null)}\nfunction rh(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=jh;ah(a);var f=b.contextType;\"object\"===typeof f&&null!==f?e.context=Vg(f):(f=Zf(b)?Xf:H.current,e.context=Yf(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;\"function\"===typeof f&&(kh(a,b,f,c),e.state=a.memoizedState);\"function\"===typeof b.getDerivedStateFromProps||\"function\"===typeof e.getSnapshotBeforeUpdate||\"function\"!==typeof e.UNSAFE_componentWillMount&&\"function\"!==typeof e.componentWillMount||(b=e.state,\n\"function\"===typeof e.componentWillMount&&e.componentWillMount(),\"function\"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&nh.enqueueReplaceState(e,e.state,null),gh(a,c,e,d),e.state=a.memoizedState);\"function\"===typeof e.componentDidMount&&(a.flags|=4194308)}\nfunction sh(a,b,c){a=c.ref;if(null!==a&&\"function\"!==typeof a&&\"object\"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(p(309));var d=c.stateNode}if(!d)throw Error(p(147,a));var e=d,f=\"\"+a;if(null!==b&&null!==b.ref&&\"function\"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;b===jh&&(b=e.refs={});null===a?delete b[f]:b[f]=a};b._stringRef=f;return b}if(\"string\"!==typeof a)throw Error(p(284));if(!c._owner)throw Error(p(290,a));}return a}\nfunction th(a,b){a=Object.prototype.toString.call(b);throw Error(p(31,\"[object Object]\"===a?\"object with keys {\"+Object.keys(b).join(\", \")+\"}\":a));}function uh(a){var b=a._init;return b(a._payload)}\nfunction vh(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c)}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=wh(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&\nnull===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=xh(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ya)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||\"object\"===typeof f&&null!==f&&f.$$typeof===Ha&&uh(f)===b.type))return d=e(b,c.props),d.ref=sh(a,b,c),d.return=a,d;d=yh(c.type,c.key,c.props,null,a.mode,d);d.ref=sh(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||\nb.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=zh(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Ah(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function q(a,b,c){if(\"string\"===typeof b&&\"\"!==b||\"number\"===typeof b)return b=xh(\"\"+b,a.mode,c),b.return=a,b;if(\"object\"===typeof b&&null!==b){switch(b.$$typeof){case va:return c=yh(b.type,b.key,b.props,null,a.mode,c),\nc.ref=sh(a,null,b),c.return=a,c;case wa:return b=zh(b,a.mode,c),b.return=a,b;case Ha:var d=b._init;return q(a,d(b._payload),c)}if(eb(b)||Ka(b))return b=Ah(b,a.mode,c,null),b.return=a,b;th(a,b)}return null}function r(a,b,c,d){var e=null!==b?b.key:null;if(\"string\"===typeof c&&\"\"!==c||\"number\"===typeof c)return null!==e?null:h(a,b,\"\"+c,d);if(\"object\"===typeof c&&null!==c){switch(c.$$typeof){case va:return c.key===e?k(a,b,c,d):null;case wa:return c.key===e?l(a,b,c,d):null;case Ha:return e=c._init,r(a,\nb,e(c._payload),d)}if(eb(c)||Ka(c))return null!==e?null:m(a,b,c,d,null);th(a,c)}return null}function y(a,b,c,d,e){if(\"string\"===typeof d&&\"\"!==d||\"number\"===typeof d)return a=a.get(c)||null,h(b,a,\"\"+d,e);if(\"object\"===typeof d&&null!==d){switch(d.$$typeof){case va:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case wa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case Ha:var f=d._init;return y(a,b,c,f(d._payload),e)}if(eb(d)||Ka(d))return a=a.get(c)||null,m(b,a,d,e,null);th(b,d)}return null}\nfunction n(e,g,h,k){for(var l=null,m=null,u=g,w=g=0,x=null;null!==u&&w<h.length;w++){u.index>w?(x=u,u=null):x=u.sibling;var n=r(e,u,h[w],k);if(null===n){null===u&&(u=x);break}a&&u&&null===n.alternate&&b(e,u);g=f(n,g,w);null===m?l=n:m.sibling=n;m=n;u=x}if(w===h.length)return c(e,u),I&&tg(e,w),l;if(null===u){for(;w<h.length;w++)u=q(e,h[w],k),null!==u&&(g=f(u,g,w),null===m?l=u:m.sibling=u,m=u);I&&tg(e,w);return l}for(u=d(e,u);w<h.length;w++)x=y(u,e,w,h[w],k),null!==x&&(a&&null!==x.alternate&&u.delete(null===\nx.key?w:x.key),g=f(x,g,w),null===m?l=x:m.sibling=x,m=x);a&&u.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function t(e,g,h,k){var l=Ka(h);if(\"function\"!==typeof l)throw Error(p(150));h=l.call(h);if(null==h)throw Error(p(151));for(var u=l=null,m=g,w=g=0,x=null,n=h.next();null!==m&&!n.done;w++,n=h.next()){m.index>w?(x=m,m=null):x=m.sibling;var t=r(e,m,n.value,k);if(null===t){null===m&&(m=x);break}a&&m&&null===t.alternate&&b(e,m);g=f(t,g,w);null===u?l=t:u.sibling=t;u=t;m=x}if(n.done)return c(e,\nm),I&&tg(e,w),l;if(null===m){for(;!n.done;w++,n=h.next())n=q(e,n.value,k),null!==n&&(g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);I&&tg(e,w);return l}for(m=d(e,m);!n.done;w++,n=h.next())n=y(m,e,w,n.value,k),null!==n&&(a&&null!==n.alternate&&m.delete(null===n.key?w:n.key),g=f(n,g,w),null===u?l=n:u.sibling=n,u=n);a&&m.forEach(function(a){return b(e,a)});I&&tg(e,w);return l}function J(a,d,f,h){\"object\"===typeof f&&null!==f&&f.type===ya&&null===f.key&&(f=f.props.children);if(\"object\"===typeof f&&null!==f){switch(f.$$typeof){case va:a:{for(var k=\nf.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ya){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||\"object\"===typeof k&&null!==k&&k.$$typeof===Ha&&uh(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=sh(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling}f.type===ya?(d=Ah(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=yh(f.type,f.key,f.props,null,a.mode,h),h.ref=sh(a,d,f),h.return=a,a=h)}return g(a);case wa:a:{for(l=f.key;null!==\nd;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=d.sibling}d=zh(f,a.mode,h);d.return=a;a=d}return g(a);case Ha:return l=f._init,J(a,d,l(f._payload),h)}if(eb(f))return n(a,d,f,h);if(Ka(f))return t(a,d,f,h);th(a,f)}return\"string\"===typeof f&&\"\"!==f||\"number\"===typeof f?(f=\"\"+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):\n(c(a,d),d=xh(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return J}var Bh=vh(!0),Ch=vh(!1),Dh={},Eh=Uf(Dh),Fh=Uf(Dh),Gh=Uf(Dh);function Hh(a){if(a===Dh)throw Error(p(174));return a}function Ih(a,b){G(Gh,b);G(Fh,a);G(Eh,Dh);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:lb(null,\"\");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=lb(b,a)}E(Eh);G(Eh,b)}function Jh(){E(Eh);E(Fh);E(Gh)}\nfunction Kh(a){Hh(Gh.current);var b=Hh(Eh.current);var c=lb(b,a.type);b!==c&&(G(Fh,a),G(Eh,c))}function Lh(a){Fh.current===a&&(E(Eh),E(Fh))}var M=Uf(0);\nfunction Mh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||\"$?\"===c.data||\"$!\"===c.data))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}var Nh=[];\nfunction Oh(){for(var a=0;a<Nh.length;a++)Nh[a]._workInProgressVersionPrimary=null;Nh.length=0}var Ph=ua.ReactCurrentDispatcher,Qh=ua.ReactCurrentBatchConfig,Rh=0,N=null,O=null,P=null,Sh=!1,Th=!1,Uh=0,Vh=0;function Q(){throw Error(p(321));}function Wh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!He(a[c],b[c]))return!1;return!0}\nfunction Xh(a,b,c,d,e,f){Rh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;Ph.current=null===a||null===a.memoizedState?Yh:Zh;a=c(d,e);if(Th){f=0;do{Th=!1;Uh=0;if(25<=f)throw Error(p(301));f+=1;P=O=null;b.updateQueue=null;Ph.current=$h;a=c(d,e)}while(Th)}Ph.current=ai;b=null!==O&&null!==O.next;Rh=0;P=O=N=null;Sh=!1;if(b)throw Error(p(300));return a}function bi(){var a=0!==Uh;Uh=0;return a}\nfunction ci(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function di(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(p(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}\nfunction ei(a,b){return\"function\"===typeof b?b(a):b}\nfunction fi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Rh&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else{var q={lane:m,action:l.action,hasEagerState:l.hasEagerState,\neagerState:l.eagerState,next:null};null===k?(h=k=q,g=d):k=k.next=q;N.lanes|=m;hh|=m}l=l.next}while(null!==l&&l!==f);null===k?g=d:k.next=h;He(d,b.memoizedState)||(Ug=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d}a=c.interleaved;if(null!==a){e=a;do f=e.lane,N.lanes|=f,hh|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return[b.memoizedState,c.dispatch]}\nfunction gi(a){var b=di(),c=b.queue;if(null===c)throw Error(p(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);He(f,b.memoizedState)||(Ug=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}function hi(){}\nfunction ii(a,b){var c=N,d=di(),e=b(),f=!He(d.memoizedState,e);f&&(d.memoizedState=e,Ug=!0);d=d.queue;ji(ki.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==P&&P.memoizedState.tag&1){c.flags|=2048;li(9,mi.bind(null,c,d,e,b),void 0,null);if(null===R)throw Error(p(349));0!==(Rh&30)||ni(c,b,e)}return e}function ni(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a))}\nfunction mi(a,b,c,d){b.value=c;b.getSnapshot=d;oi(b)&&pi(a)}function ki(a,b,c){return c(function(){oi(b)&&pi(a)})}function oi(a){var b=a.getSnapshot;a=a.value;try{var c=b();return!He(a,c)}catch(d){return!0}}function pi(a){var b=Zg(a,1);null!==b&&mh(b,a,1,-1)}\nfunction qi(a){var b=ci();\"function\"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:ei,lastRenderedState:a};b.queue=a;a=a.dispatch=ri.bind(null,N,a);return[b.memoizedState,a]}\nfunction li(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null,stores:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function si(){return di().memoizedState}function ti(a,b,c,d){var e=ci();N.flags|=a;e.memoizedState=li(1|b,c,void 0,void 0===d?null:d)}\nfunction ui(a,b,c,d){var e=di();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&Wh(d,g.deps)){e.memoizedState=li(b,c,f,d);return}}N.flags|=a;e.memoizedState=li(1|b,c,f,d)}function vi(a,b){return ti(8390656,8,a,b)}function ji(a,b){return ui(2048,8,a,b)}function wi(a,b){return ui(4,2,a,b)}function xi(a,b){return ui(4,4,a,b)}\nfunction yi(a,b){if(\"function\"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function zi(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ui(4,4,yi.bind(null,b,a),c)}function Ai(){}function Bi(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}\nfunction Ci(a,b){var c=di();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Wh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Di(a,b,c){if(0===(Rh&21))return a.baseState&&(a.baseState=!1,Ug=!0),a.memoizedState=c;He(c,b)||(c=yc(),N.lanes|=c,hh|=c,a.baseState=!0);return b}function Ei(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Qh.transition;Qh.transition={};try{a(!1),b()}finally{C=c,Qh.transition=d}}function Fi(){return di().memoizedState}\nfunction Gi(a,b,c){var d=lh(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,c);else if(c=Yg(a,b,c,d),null!==c){var e=L();mh(c,a,d,e);Ji(c,b,d)}}\nfunction ri(a,b,c){var d=lh(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(Hi(a))Ii(b,e);else{var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(He(h,g)){var k=b.interleaved;null===k?(e.next=e,Xg(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=Yg(a,b,e,d);null!==c&&(e=L(),mh(c,a,d,e),Ji(c,b,d))}}\nfunction Hi(a){var b=a.alternate;return a===N||null!==b&&b===N}function Ii(a,b){Th=Sh=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}function Ji(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Cc(a,c)}}\nvar ai={readContext:Vg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useInsertionEffect:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useDeferredValue:Q,useTransition:Q,useMutableSource:Q,useSyncExternalStore:Q,useId:Q,unstable_isNewReconciler:!1},Yh={readContext:Vg,useCallback:function(a,b){ci().memoizedState=[a,void 0===b?null:b];return a},useContext:Vg,useEffect:vi,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ti(4194308,\n4,yi.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ti(4194308,4,a,b)},useInsertionEffect:function(a,b){return ti(4,2,a,b)},useMemo:function(a,b){var c=ci();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=ci();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=Gi.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=\nci();a={current:a};return b.memoizedState=a},useState:qi,useDebugValue:Ai,useDeferredValue:function(a){return ci().memoizedState=a},useTransition:function(){var a=qi(!1),b=a[0];a=Ei.bind(null,a[1]);ci().memoizedState=a;return[b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=N,e=ci();if(I){if(void 0===c)throw Error(p(407));c=c()}else{c=b();if(null===R)throw Error(p(349));0!==(Rh&30)||ni(d,b,c)}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;vi(ki.bind(null,d,\nf,a),[a]);d.flags|=2048;li(9,mi.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=ci(),b=R.identifierPrefix;if(I){var c=sg;var d=rg;c=(d&~(1<<32-oc(d)-1)).toString(32)+c;b=\":\"+b+\"R\"+c;c=Uh++;0<c&&(b+=\"H\"+c.toString(32));b+=\":\"}else c=Vh++,b=\":\"+b+\"r\"+c.toString(32)+\":\";return a.memoizedState=b},unstable_isNewReconciler:!1},Zh={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:fi,useRef:si,useState:function(){return fi(ei)},\nuseDebugValue:Ai,useDeferredValue:function(a){var b=di();return Di(b,O.memoizedState,a)},useTransition:function(){var a=fi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1},$h={readContext:Vg,useCallback:Bi,useContext:Vg,useEffect:ji,useImperativeHandle:zi,useInsertionEffect:wi,useLayoutEffect:xi,useMemo:Ci,useReducer:gi,useRef:si,useState:function(){return gi(ei)},useDebugValue:Ai,useDeferredValue:function(a){var b=di();return null===\nO?b.memoizedState=a:Di(b,O.memoizedState,a)},useTransition:function(){var a=gi(ei)[0],b=di().memoizedState;return[a,b]},useMutableSource:hi,useSyncExternalStore:ii,useId:Fi,unstable_isNewReconciler:!1};function Ki(a,b){try{var c=\"\",d=b;do c+=Pa(d),d=d.return;while(d);var e=c}catch(f){e=\"\\nError generating stack: \"+f.message+\"\\n\"+f.stack}return{value:a,source:b,stack:e,digest:null}}function Li(a,b,c){return{value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}\nfunction Mi(a,b){try{console.error(b.value)}catch(c){setTimeout(function(){throw c;})}}var Ni=\"function\"===typeof WeakMap?WeakMap:Map;function Oi(a,b,c){c=ch(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Pi||(Pi=!0,Qi=d);Mi(a,b)};return c}\nfunction Ri(a,b,c){c=ch(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if(\"function\"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Mi(a,b)}}var f=a.stateNode;null!==f&&\"function\"===typeof f.componentDidCatch&&(c.callback=function(){Mi(a,b);\"function\"!==typeof d&&(null===Si?Si=new Set([this]):Si.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:\"\"})});return c}\nfunction Ti(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Ni;var e=new Set;d.set(b,e)}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Ui.bind(null,a,b,c),b.then(a,a))}function Vi(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return}while(null!==a);return null}\nfunction Wi(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ch(-1,1),b.tag=2,dh(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Xi=ua.ReactCurrentOwner,Ug=!1;function Yi(a,b,c,d){b.child=null===a?Ch(b,null,c,d):Bh(b,a.child,c,d)}\nfunction Zi(a,b,c,d,e){c=c.render;var f=b.ref;Tg(b,e);d=Xh(a,b,c,d,f,e);c=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&c&&vg(b);b.flags|=1;Yi(a,b,d,e);return b.child}\nfunction aj(a,b,c,d,e){if(null===a){var f=c.type;if(\"function\"===typeof f&&!bj(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,cj(a,b,f,d,e);a=yh(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Ie;if(c(g,d)&&a.ref===b.ref)return $i(a,b,e)}b.flags|=1;a=wh(f,d);a.ref=b.ref;a.return=b;return b.child=a}\nfunction cj(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Ie(f,d)&&a.ref===b.ref)if(Ug=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(Ug=!0);else return b.lanes=a.lanes,$i(a,b,e)}return dj(a,b,c,d,e)}\nfunction ej(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if(\"hidden\"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},G(fj,gj),gj|=c;else{if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,G(fj,gj),gj|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;G(fj,gj);gj|=d}else null!==\nf?(d=f.baseLanes|c,b.memoizedState=null):d=c,G(fj,gj),gj|=d;Yi(a,b,e,c);return b.child}function hj(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152}function dj(a,b,c,d,e){var f=Zf(c)?Xf:H.current;f=Yf(b,f);Tg(b,e);c=Xh(a,b,c,d,f,e);d=bi();if(null!==a&&!Ug)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,$i(a,b,e);I&&d&&vg(b);b.flags|=1;Yi(a,b,c,e);return b.child}\nfunction ij(a,b,c,d,e){if(Zf(c)){var f=!0;cg(b)}else f=!1;Tg(b,e);if(null===b.stateNode)jj(a,b),ph(b,c,d),rh(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;\"object\"===typeof l&&null!==l?l=Vg(l):(l=Zf(c)?Xf:H.current,l=Yf(b,l));var m=c.getDerivedStateFromProps,q=\"function\"===typeof m||\"function\"===typeof g.getSnapshotBeforeUpdate;q||\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||\n(h!==d||k!==l)&&qh(b,g,d,l);$g=!1;var r=b.memoizedState;g.state=r;gh(b,d,g,e);k=b.memoizedState;h!==d||r!==k||Wf.current||$g?(\"function\"===typeof m&&(kh(b,c,m,d),k=b.memoizedState),(h=$g||oh(b,c,h,d,r,k,l))?(q||\"function\"!==typeof g.UNSAFE_componentWillMount&&\"function\"!==typeof g.componentWillMount||(\"function\"===typeof g.componentWillMount&&g.componentWillMount(),\"function\"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),\"function\"===typeof g.componentDidMount&&(b.flags|=4194308)):\n(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):(\"function\"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1)}else{g=b.stateNode;bh(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:Lg(b.type,h);g.props=l;q=b.pendingProps;r=g.context;k=c.contextType;\"object\"===typeof k&&null!==k?k=Vg(k):(k=Zf(c)?Xf:H.current,k=Yf(b,k));var y=c.getDerivedStateFromProps;(m=\"function\"===typeof y||\"function\"===typeof g.getSnapshotBeforeUpdate)||\n\"function\"!==typeof g.UNSAFE_componentWillReceiveProps&&\"function\"!==typeof g.componentWillReceiveProps||(h!==q||r!==k)&&qh(b,g,d,k);$g=!1;r=b.memoizedState;g.state=r;gh(b,d,g,e);var n=b.memoizedState;h!==q||r!==n||Wf.current||$g?(\"function\"===typeof y&&(kh(b,c,y,d),n=b.memoizedState),(l=$g||oh(b,c,l,d,r,n,k)||!1)?(m||\"function\"!==typeof g.UNSAFE_componentWillUpdate&&\"function\"!==typeof g.componentWillUpdate||(\"function\"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,n,k),\"function\"===typeof g.UNSAFE_componentWillUpdate&&\ng.UNSAFE_componentWillUpdate(d,n,k)),\"function\"===typeof g.componentDidUpdate&&(b.flags|=4),\"function\"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=n),g.props=d,g.state=n,g.context=k,d=l):(\"function\"!==typeof g.componentDidUpdate||h===a.memoizedProps&&r===\na.memoizedState||(b.flags|=4),\"function\"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&r===a.memoizedState||(b.flags|=1024),d=!1)}return kj(a,b,c,d,f,e)}\nfunction kj(a,b,c,d,e,f){hj(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&dg(b,c,!1),$i(a,b,f);d=b.stateNode;Xi.current=b;var h=g&&\"function\"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Bh(b,a.child,null,f),b.child=Bh(b,null,h,f)):Yi(a,b,h,f);b.memoizedState=d.state;e&&dg(b,c,!0);return b.child}function lj(a){var b=a.stateNode;b.pendingContext?ag(a,b.pendingContext,b.pendingContext!==b.context):b.context&&ag(a,b.context,!1);Ih(a,b.containerInfo)}\nfunction mj(a,b,c,d,e){Ig();Jg(e);b.flags|=256;Yi(a,b,c,d);return b.child}var nj={dehydrated:null,treeContext:null,retryLane:0};function oj(a){return{baseLanes:a,cachePool:null,transitions:null}}\nfunction pj(a,b,c){var d=b.pendingProps,e=M.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;G(M,e&1);if(null===a){Eg(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:\"$!\"===a.data?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:\"hidden\",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=\ng):f=qj(g,d,0,null),a=Ah(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=oj(c),b.memoizedState=nj,a):rj(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return sj(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:\"hidden\",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=wh(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=wh(h,f):(f=Ah(f,g,c,null),f.flags|=2);f.return=\nb;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?oj(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=nj;return d}f=a.child;a=f.sibling;d=wh(f,{mode:\"visible\",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}\nfunction rj(a,b){b=qj({mode:\"visible\",children:b},a.mode,0,null);b.return=a;return a.child=b}function tj(a,b,c,d){null!==d&&Jg(d);Bh(b,a.child,null,c);a=rj(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}\nfunction sj(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Li(Error(p(422))),tj(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=qj({mode:\"visible\",children:d.children},e,0,null);f=Ah(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Bh(b,a.child,null,g);b.child.memoizedState=oj(g);b.memoizedState=nj;return f}if(0===(b.mode&1))return tj(a,b,g,null);if(\"$!\"===e.data){d=e.nextSibling&&e.nextSibling.dataset;\nif(d)var h=d.dgst;d=h;f=Error(p(419));d=Li(f,d,void 0);return tj(a,b,g,d)}h=0!==(g&a.childLanes);if(Ug||h){d=R;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0}e=0!==(e&(d.suspendedLanes|g))?0:e;\n0!==e&&e!==f.retryLane&&(f.retryLane=e,Zg(a,e),mh(d,a,e,-1))}uj();d=Li(Error(p(421)));return tj(a,b,g,d)}if(\"$?\"===e.data)return b.flags|=128,b.child=a.child,b=vj.bind(null,a),e._reactRetry=b,null;a=f.treeContext;yg=Lf(e.nextSibling);xg=b;I=!0;zg=null;null!==a&&(og[pg++]=rg,og[pg++]=sg,og[pg++]=qg,rg=a.id,sg=a.overflow,qg=b);b=rj(b,d.children);b.flags|=4096;return b}function wj(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Sg(a.return,b,c)}\nfunction xj(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e)}\nfunction yj(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;Yi(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else{if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&wj(a,c,b);else if(19===a.tag)wj(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}G(M,d);if(0===(b.mode&1))b.memoizedState=\nnull;else switch(e){case \"forwards\":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===Mh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);xj(b,!1,e,c,f);break;case \"backwards\":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===Mh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}xj(b,!0,c,null,f);break;case \"together\":xj(b,!1,null,null,void 0);break;default:b.memoizedState=null}return b.child}\nfunction jj(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2)}function $i(a,b,c){null!==a&&(b.dependencies=a.dependencies);hh|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(p(153));if(null!==b.child){a=b.child;c=wh(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=wh(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}\nfunction zj(a,b,c){switch(b.tag){case 3:lj(b);Ig();break;case 5:Kh(b);break;case 1:Zf(b.type)&&cg(b);break;case 4:Ih(b,b.stateNode.containerInfo);break;case 10:var d=b.type._context,e=b.memoizedProps.value;G(Mg,d._currentValue);d._currentValue=e;break;case 13:d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return G(M,M.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return pj(a,b,c);G(M,M.current&1);a=$i(a,b,c);return null!==a?a.sibling:null}G(M,M.current&1);break;case 19:d=0!==(c&\nb.childLanes);if(0!==(a.flags&128)){if(d)return yj(a,b,c);b.flags|=128}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);G(M,M.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,ej(a,b,c)}return $i(a,b,c)}var Aj,Bj,Cj,Dj;\nAj=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};Bj=function(){};\nCj=function(a,b,c,d){var e=a.memoizedProps;if(e!==d){a=b.stateNode;Hh(Eh.current);var f=null;switch(c){case \"input\":e=Ya(a,e);d=Ya(a,d);f=[];break;case \"select\":e=A({},e,{value:void 0});d=A({},d,{value:void 0});f=[];break;case \"textarea\":e=gb(a,e);d=gb(a,d);f=[];break;default:\"function\"!==typeof e.onClick&&\"function\"===typeof d.onClick&&(a.onclick=Bf)}ub(c,d);var g;c=null;for(l in e)if(!d.hasOwnProperty(l)&&e.hasOwnProperty(l)&&null!=e[l])if(\"style\"===l){var h=e[l];for(g in h)h.hasOwnProperty(g)&&\n(c||(c={}),c[g]=\"\")}else\"dangerouslySetInnerHTML\"!==l&&\"children\"!==l&&\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&\"autoFocus\"!==l&&(ea.hasOwnProperty(l)?f||(f=[]):(f=f||[]).push(l,null));for(l in d){var k=d[l];h=null!=e?e[l]:void 0;if(d.hasOwnProperty(l)&&k!==h&&(null!=k||null!=h))if(\"style\"===l)if(h){for(g in h)!h.hasOwnProperty(g)||k&&k.hasOwnProperty(g)||(c||(c={}),c[g]=\"\");for(g in k)k.hasOwnProperty(g)&&h[g]!==k[g]&&(c||(c={}),c[g]=k[g])}else c||(f||(f=[]),f.push(l,\nc)),c=k;else\"dangerouslySetInnerHTML\"===l?(k=k?k.__html:void 0,h=h?h.__html:void 0,null!=k&&h!==k&&(f=f||[]).push(l,k)):\"children\"===l?\"string\"!==typeof k&&\"number\"!==typeof k||(f=f||[]).push(l,\"\"+k):\"suppressContentEditableWarning\"!==l&&\"suppressHydrationWarning\"!==l&&(ea.hasOwnProperty(l)?(null!=k&&\"onScroll\"===l&&D(\"scroll\",a),f||h===k||(f=[])):(f=f||[]).push(l,k))}c&&(f=f||[]).push(\"style\",c);var l=f;if(b.updateQueue=l)b.flags|=4}};Dj=function(a,b,c,d){c!==d&&(b.flags|=4)};\nfunction Ej(a,b){if(!I)switch(a.tailMode){case \"hidden\":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case \"collapsed\":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}\nfunction S(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}\nfunction Fj(a,b,c){var d=b.pendingProps;wg(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return S(b),null;case 1:return Zf(b.type)&&$f(),S(b),null;case 3:d=b.stateNode;Jh();E(Wf);E(H);Oh();d.pendingContext&&(d.context=d.pendingContext,d.pendingContext=null);if(null===a||null===a.child)Gg(b)?b.flags|=4:null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==zg&&(Gj(zg),zg=null));Bj(a,b);S(b);return null;case 5:Lh(b);var e=Hh(Gh.current);\nc=b.type;if(null!==a&&null!=b.stateNode)Cj(a,b,c,d,e),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else{if(!d){if(null===b.stateNode)throw Error(p(166));S(b);return null}a=Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.type;var f=b.memoizedProps;d[Of]=b;d[Pf]=f;a=0!==(b.mode&1);switch(c){case \"dialog\":D(\"cancel\",d);D(\"close\",d);break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",d);break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],d);break;case \"source\":D(\"error\",d);break;case \"img\":case \"image\":case \"link\":D(\"error\",\nd);D(\"load\",d);break;case \"details\":D(\"toggle\",d);break;case \"input\":Za(d,f);D(\"invalid\",d);break;case \"select\":d._wrapperState={wasMultiple:!!f.multiple};D(\"invalid\",d);break;case \"textarea\":hb(d,f),D(\"invalid\",d)}ub(c,f);e=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];\"children\"===g?\"string\"===typeof h?d.textContent!==h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,h,a),e=[\"children\",h]):\"number\"===typeof h&&d.textContent!==\"\"+h&&(!0!==f.suppressHydrationWarning&&Af(d.textContent,\nh,a),e=[\"children\",\"\"+h]):ea.hasOwnProperty(g)&&null!=h&&\"onScroll\"===g&&D(\"scroll\",d)}switch(c){case \"input\":Va(d);db(d,f,!0);break;case \"textarea\":Va(d);jb(d);break;case \"select\":case \"option\":break;default:\"function\"===typeof f.onClick&&(d.onclick=Bf)}d=e;b.updateQueue=d;null!==d&&(b.flags|=4)}else{g=9===e.nodeType?e:e.ownerDocument;\"http://www.w3.org/1999/xhtml\"===a&&(a=kb(c));\"http://www.w3.org/1999/xhtml\"===a?\"script\"===c?(a=g.createElement(\"div\"),a.innerHTML=\"<script>\\x3c/script>\",a=a.removeChild(a.firstChild)):\n\"string\"===typeof d.is?a=g.createElement(c,{is:d.is}):(a=g.createElement(c),\"select\"===c&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,c);a[Of]=b;a[Pf]=d;Aj(a,b,!1,!1);b.stateNode=a;a:{g=vb(c,d);switch(c){case \"dialog\":D(\"cancel\",a);D(\"close\",a);e=d;break;case \"iframe\":case \"object\":case \"embed\":D(\"load\",a);e=d;break;case \"video\":case \"audio\":for(e=0;e<lf.length;e++)D(lf[e],a);e=d;break;case \"source\":D(\"error\",a);e=d;break;case \"img\":case \"image\":case \"link\":D(\"error\",\na);D(\"load\",a);e=d;break;case \"details\":D(\"toggle\",a);e=d;break;case \"input\":Za(a,d);e=Ya(a,d);D(\"invalid\",a);break;case \"option\":e=d;break;case \"select\":a._wrapperState={wasMultiple:!!d.multiple};e=A({},d,{value:void 0});D(\"invalid\",a);break;case \"textarea\":hb(a,d);e=gb(a,d);D(\"invalid\",a);break;default:e=d}ub(c,e);h=e;for(f in h)if(h.hasOwnProperty(f)){var k=h[f];\"style\"===f?sb(a,k):\"dangerouslySetInnerHTML\"===f?(k=k?k.__html:void 0,null!=k&&nb(a,k)):\"children\"===f?\"string\"===typeof k?(\"textarea\"!==\nc||\"\"!==k)&&ob(a,k):\"number\"===typeof k&&ob(a,\"\"+k):\"suppressContentEditableWarning\"!==f&&\"suppressHydrationWarning\"!==f&&\"autoFocus\"!==f&&(ea.hasOwnProperty(f)?null!=k&&\"onScroll\"===f&&D(\"scroll\",a):null!=k&&ta(a,f,k,g))}switch(c){case \"input\":Va(a);db(a,d,!1);break;case \"textarea\":Va(a);jb(a);break;case \"option\":null!=d.value&&a.setAttribute(\"value\",\"\"+Sa(d.value));break;case \"select\":a.multiple=!!d.multiple;f=d.value;null!=f?fb(a,!!d.multiple,f,!1):null!=d.defaultValue&&fb(a,!!d.multiple,d.defaultValue,\n!0);break;default:\"function\"===typeof e.onClick&&(a.onclick=Bf)}switch(c){case \"button\":case \"input\":case \"select\":case \"textarea\":d=!!d.autoFocus;break a;case \"img\":d=!0;break a;default:d=!1}}d&&(b.flags|=4)}null!==b.ref&&(b.flags|=512,b.flags|=2097152)}S(b);return null;case 6:if(a&&null!=b.stateNode)Dj(a,b,a.memoizedProps,d);else{if(\"string\"!==typeof d&&null===b.stateNode)throw Error(p(166));c=Hh(Gh.current);Hh(Eh.current);if(Gg(b)){d=b.stateNode;c=b.memoizedProps;d[Of]=b;if(f=d.nodeValue!==c)if(a=\nxg,null!==a)switch(a.tag){case 3:Af(d.nodeValue,c,0!==(a.mode&1));break;case 5:!0!==a.memoizedProps.suppressHydrationWarning&&Af(d.nodeValue,c,0!==(a.mode&1))}f&&(b.flags|=4)}else d=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),d[Of]=b,b.stateNode=d}S(b);return null;case 13:E(M);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(I&&null!==yg&&0!==(b.mode&1)&&0===(b.flags&128))Hg(),Ig(),b.flags|=98560,f=!1;else if(f=Gg(b),null!==d&&null!==d.dehydrated){if(null===\na){if(!f)throw Error(p(318));f=b.memoizedState;f=null!==f?f.dehydrated:null;if(!f)throw Error(p(317));f[Of]=b}else Ig(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;S(b);f=!1}else null!==zg&&(Gj(zg),zg=null),f=!0;if(!f)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;d=null!==d;d!==(null!==a&&null!==a.memoizedState)&&d&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(M.current&1)?0===T&&(T=3):uj()));null!==b.updateQueue&&(b.flags|=4);S(b);return null;case 4:return Jh(),\nBj(a,b),null===a&&sf(b.stateNode.containerInfo),S(b),null;case 10:return Rg(b.type._context),S(b),null;case 17:return Zf(b.type)&&$f(),S(b),null;case 19:E(M);f=b.memoizedState;if(null===f)return S(b),null;d=0!==(b.flags&128);g=f.rendering;if(null===g)if(d)Ej(f,!1);else{if(0!==T||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){g=Mh(a);if(null!==g){b.flags|=128;Ej(f,!1);d=g.updateQueue;null!==d&&(b.updateQueue=d,b.flags|=4);b.subtreeFlags=0;d=c;for(c=b.child;null!==c;)f=c,a=d,f.flags&=14680066,\ng=f.alternate,null===g?(f.childLanes=0,f.lanes=a,f.child=null,f.subtreeFlags=0,f.memoizedProps=null,f.memoizedState=null,f.updateQueue=null,f.dependencies=null,f.stateNode=null):(f.childLanes=g.childLanes,f.lanes=g.lanes,f.child=g.child,f.subtreeFlags=0,f.deletions=null,f.memoizedProps=g.memoizedProps,f.memoizedState=g.memoizedState,f.updateQueue=g.updateQueue,f.type=g.type,a=g.dependencies,f.dependencies=null===a?null:{lanes:a.lanes,firstContext:a.firstContext}),c=c.sibling;G(M,M.current&1|2);return b.child}a=\na.sibling}null!==f.tail&&B()>Hj&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304)}else{if(!d)if(a=Mh(g),null!==a){if(b.flags|=128,d=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.flags|=4),Ej(f,!0),null===f.tail&&\"hidden\"===f.tailMode&&!g.alternate&&!I)return S(b),null}else 2*B()-f.renderingStartTime>Hj&&1073741824!==c&&(b.flags|=128,d=!0,Ej(f,!1),b.lanes=4194304);f.isBackwards?(g.sibling=b.child,b.child=g):(c=f.last,null!==c?c.sibling=g:b.child=g,f.last=g)}if(null!==f.tail)return b=f.tail,f.rendering=\nb,f.tail=b.sibling,f.renderingStartTime=B(),b.sibling=null,c=M.current,G(M,d?c&1|2:c&1),b;S(b);return null;case 22:case 23:return Ij(),d=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==d&&(b.flags|=8192),d&&0!==(b.mode&1)?0!==(gj&1073741824)&&(S(b),b.subtreeFlags&6&&(b.flags|=8192)):S(b),null;case 24:return null;case 25:return null}throw Error(p(156,b.tag));}\nfunction Jj(a,b){wg(b);switch(b.tag){case 1:return Zf(b.type)&&$f(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return Jh(),E(Wf),E(H),Oh(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return Lh(b),null;case 13:E(M);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(p(340));Ig()}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return E(M),null;case 4:return Jh(),null;case 10:return Rg(b.type._context),null;case 22:case 23:return Ij(),\nnull;case 24:return null;default:return null}}var Kj=!1,U=!1,Lj=\"function\"===typeof WeakSet?WeakSet:Set,V=null;function Mj(a,b){var c=a.ref;if(null!==c)if(\"function\"===typeof c)try{c(null)}catch(d){W(a,b,d)}else c.current=null}function Nj(a,b,c){try{c()}catch(d){W(a,b,d)}}var Oj=!1;\nfunction Pj(a,b){Cf=dd;a=Me();if(Ne(a)){if(\"selectionStart\"in a)var c={start:a.selectionStart,end:a.selectionEnd};else a:{c=(c=a.ownerDocument)&&c.defaultView||window;var d=c.getSelection&&c.getSelection();if(d&&0!==d.rangeCount){c=d.anchorNode;var e=d.anchorOffset,f=d.focusNode;d=d.focusOffset;try{c.nodeType,f.nodeType}catch(F){c=null;break a}var g=0,h=-1,k=-1,l=0,m=0,q=a,r=null;b:for(;;){for(var y;;){q!==c||0!==e&&3!==q.nodeType||(h=g+e);q!==f||0!==d&&3!==q.nodeType||(k=g+d);3===q.nodeType&&(g+=\nq.nodeValue.length);if(null===(y=q.firstChild))break;r=q;q=y}for(;;){if(q===a)break b;r===c&&++l===e&&(h=g);r===f&&++m===d&&(k=g);if(null!==(y=q.nextSibling))break;q=r;r=q.parentNode}q=y}c=-1===h||-1===k?null:{start:h,end:k}}else c=null}c=c||{start:0,end:0}}else c=null;Df={focusedElem:a,selectionRange:c};dd=!1;for(V=b;null!==V;)if(b=V,a=b.child,0!==(b.subtreeFlags&1028)&&null!==a)a.return=b,V=a;else for(;null!==V;){b=V;try{var n=b.alternate;if(0!==(b.flags&1024))switch(b.tag){case 0:case 11:case 15:break;\ncase 1:if(null!==n){var t=n.memoizedProps,J=n.memoizedState,x=b.stateNode,w=x.getSnapshotBeforeUpdate(b.elementType===b.type?t:Lg(b.type,t),J);x.__reactInternalSnapshotBeforeUpdate=w}break;case 3:var u=b.stateNode.containerInfo;1===u.nodeType?u.textContent=\"\":9===u.nodeType&&u.documentElement&&u.removeChild(u.documentElement);break;case 5:case 6:case 4:case 17:break;default:throw Error(p(163));}}catch(F){W(b,b.return,F)}a=b.sibling;if(null!==a){a.return=b.return;V=a;break}V=b.return}n=Oj;Oj=!1;return n}\nfunction Qj(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Nj(b,c,f)}e=e.next}while(e!==d)}}function Rj(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}function Sj(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=c;break;default:a=c}\"function\"===typeof b?b(a):b.current=a}}\nfunction Tj(a){var b=a.alternate;null!==b&&(a.alternate=null,Tj(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&(delete b[Of],delete b[Pf],delete b[of],delete b[Qf],delete b[Rf]));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null}function Uj(a){return 5===a.tag||3===a.tag||4===a.tag}\nfunction Vj(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Uj(a.return))return null;a=a.return}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child}if(!(a.flags&2))return a.stateNode}}\nfunction Wj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=Bf));else if(4!==d&&(a=a.child,null!==a))for(Wj(a,b,c),a=a.sibling;null!==a;)Wj(a,b,c),a=a.sibling}\nfunction Xj(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Xj(a,b,c),a=a.sibling;null!==a;)Xj(a,b,c),a=a.sibling}var X=null,Yj=!1;function Zj(a,b,c){for(c=c.child;null!==c;)ak(a,b,c),c=c.sibling}\nfunction ak(a,b,c){if(lc&&\"function\"===typeof lc.onCommitFiberUnmount)try{lc.onCommitFiberUnmount(kc,c)}catch(h){}switch(c.tag){case 5:U||Mj(c,b);case 6:var d=X,e=Yj;X=null;Zj(a,b,c);X=d;Yj=e;null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?a.parentNode.removeChild(c):a.removeChild(c)):X.removeChild(c.stateNode));break;case 18:null!==X&&(Yj?(a=X,c=c.stateNode,8===a.nodeType?Kf(a.parentNode,c):1===a.nodeType&&Kf(a,c),bd(a)):Kf(X,c.stateNode));break;case 4:d=X;e=Yj;X=c.stateNode.containerInfo;Yj=!0;\nZj(a,b,c);X=d;Yj=e;break;case 0:case 11:case 14:case 15:if(!U&&(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Nj(c,b,g):0!==(f&4)&&Nj(c,b,g));e=e.next}while(e!==d)}Zj(a,b,c);break;case 1:if(!U&&(Mj(c,b),d=c.stateNode,\"function\"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount()}catch(h){W(c,b,h)}Zj(a,b,c);break;case 21:Zj(a,b,c);break;case 22:c.mode&1?(U=(d=U)||null!==\nc.memoizedState,Zj(a,b,c),U=d):Zj(a,b,c);break;default:Zj(a,b,c)}}function bk(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Lj);b.forEach(function(b){var d=ck.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}\nfunction dk(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b,h=g;a:for(;null!==h;){switch(h.tag){case 5:X=h.stateNode;Yj=!1;break a;case 3:X=h.stateNode.containerInfo;Yj=!0;break a;case 4:X=h.stateNode.containerInfo;Yj=!0;break a}h=h.return}if(null===X)throw Error(p(160));ak(f,g,e);X=null;Yj=!1;var k=e.alternate;null!==k&&(k.return=null);e.return=null}catch(l){W(e,b,l)}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)ek(b,a),b=b.sibling}\nfunction ek(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:dk(b,a);fk(a);if(d&4){try{Qj(3,a,a.return),Rj(3,a)}catch(t){W(a,a.return,t)}try{Qj(5,a,a.return)}catch(t){W(a,a.return,t)}}break;case 1:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);break;case 5:dk(b,a);fk(a);d&512&&null!==c&&Mj(c,c.return);if(a.flags&32){var e=a.stateNode;try{ob(e,\"\")}catch(t){W(a,a.return,t)}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps,g=null!==c?c.memoizedProps:f,h=a.type,k=a.updateQueue;\na.updateQueue=null;if(null!==k)try{\"input\"===h&&\"radio\"===f.type&&null!=f.name&&ab(e,f);vb(h,g);var l=vb(h,f);for(g=0;g<k.length;g+=2){var m=k[g],q=k[g+1];\"style\"===m?sb(e,q):\"dangerouslySetInnerHTML\"===m?nb(e,q):\"children\"===m?ob(e,q):ta(e,m,q,l)}switch(h){case \"input\":bb(e,f);break;case \"textarea\":ib(e,f);break;case \"select\":var r=e._wrapperState.wasMultiple;e._wrapperState.wasMultiple=!!f.multiple;var y=f.value;null!=y?fb(e,!!f.multiple,y,!1):r!==!!f.multiple&&(null!=f.defaultValue?fb(e,!!f.multiple,\nf.defaultValue,!0):fb(e,!!f.multiple,f.multiple?[]:\"\",!1))}e[Pf]=f}catch(t){W(a,a.return,t)}}break;case 6:dk(b,a);fk(a);if(d&4){if(null===a.stateNode)throw Error(p(162));e=a.stateNode;f=a.memoizedProps;try{e.nodeValue=f}catch(t){W(a,a.return,t)}}break;case 3:dk(b,a);fk(a);if(d&4&&null!==c&&c.memoizedState.isDehydrated)try{bd(b.containerInfo)}catch(t){W(a,a.return,t)}break;case 4:dk(b,a);fk(a);break;case 13:dk(b,a);fk(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||\nnull!==e.alternate&&null!==e.alternate.memoizedState||(gk=B()));d&4&&bk(a);break;case 22:m=null!==c&&null!==c.memoizedState;a.mode&1?(U=(l=U)||m,dk(b,a),U=l):dk(b,a);fk(a);if(d&8192){l=null!==a.memoizedState;if((a.stateNode.isHidden=l)&&!m&&0!==(a.mode&1))for(V=a,m=a.child;null!==m;){for(q=V=m;null!==V;){r=V;y=r.child;switch(r.tag){case 0:case 11:case 14:case 15:Qj(4,r,r.return);break;case 1:Mj(r,r.return);var n=r.stateNode;if(\"function\"===typeof n.componentWillUnmount){d=r;c=r.return;try{b=d,n.props=\nb.memoizedProps,n.state=b.memoizedState,n.componentWillUnmount()}catch(t){W(d,c,t)}}break;case 5:Mj(r,r.return);break;case 22:if(null!==r.memoizedState){hk(q);continue}}null!==y?(y.return=r,V=y):hk(q)}m=m.sibling}a:for(m=null,q=a;;){if(5===q.tag){if(null===m){m=q;try{e=q.stateNode,l?(f=e.style,\"function\"===typeof f.setProperty?f.setProperty(\"display\",\"none\",\"important\"):f.display=\"none\"):(h=q.stateNode,k=q.memoizedProps.style,g=void 0!==k&&null!==k&&k.hasOwnProperty(\"display\")?k.display:null,h.style.display=\nrb(\"display\",g))}catch(t){W(a,a.return,t)}}}else if(6===q.tag){if(null===m)try{q.stateNode.nodeValue=l?\"\":q.memoizedProps}catch(t){W(a,a.return,t)}}else if((22!==q.tag&&23!==q.tag||null===q.memoizedState||q===a)&&null!==q.child){q.child.return=q;q=q.child;continue}if(q===a)break a;for(;null===q.sibling;){if(null===q.return||q.return===a)break a;m===q&&(m=null);q=q.return}m===q&&(m=null);q.sibling.return=q.return;q=q.sibling}}break;case 19:dk(b,a);fk(a);d&4&&bk(a);break;case 21:break;default:dk(b,\na),fk(a)}}function fk(a){var b=a.flags;if(b&2){try{a:{for(var c=a.return;null!==c;){if(Uj(c)){var d=c;break a}c=c.return}throw Error(p(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(ob(e,\"\"),d.flags&=-33);var f=Vj(a);Xj(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Vj(a);Wj(a,h,g);break;default:throw Error(p(161));}}catch(k){W(a,a.return,k)}a.flags&=-3}b&4096&&(a.flags&=-4097)}function ik(a,b,c){V=a;jk(a,b,c)}\nfunction jk(a,b,c){for(var d=0!==(a.mode&1);null!==V;){var e=V,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Kj;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||U;h=Kj;var l=U;Kj=g;if((U=k)&&!l)for(V=e;null!==V;)g=V,k=g.child,22===g.tag&&null!==g.memoizedState?kk(e):null!==k?(k.return=g,V=k):kk(e);for(;null!==f;)V=f,jk(f,b,c),f=f.sibling;V=e;Kj=h;U=l}lk(a,b,c)}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,V=f):lk(a,b,c)}}\nfunction lk(a){for(;null!==V;){var b=V;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:U||Rj(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!U)if(null===c)d.componentDidMount();else{var e=b.elementType===b.type?c.memoizedProps:Lg(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate)}var f=b.updateQueue;null!==f&&ih(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=\nb.child.stateNode;break;case 1:c=b.child.stateNode}ih(b,g,c)}break;case 5:var h=b.stateNode;if(null===c&&b.flags&4){c=h;var k=b.memoizedProps;switch(b.type){case \"button\":case \"input\":case \"select\":case \"textarea\":k.autoFocus&&c.focus();break;case \"img\":k.src&&(c.src=k.src)}}break;case 6:break;case 4:break;case 12:break;case 13:if(null===b.memoizedState){var l=b.alternate;if(null!==l){var m=l.memoizedState;if(null!==m){var q=m.dehydrated;null!==q&&bd(q)}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;\ndefault:throw Error(p(163));}U||b.flags&512&&Sj(b)}catch(r){W(b,b.return,r)}}if(b===a){V=null;break}c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}function hk(a){for(;null!==V;){var b=V;if(b===a){V=null;break}var c=b.sibling;if(null!==c){c.return=b.return;V=c;break}V=b.return}}\nfunction kk(a){for(;null!==V;){var b=V;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Rj(4,b)}catch(k){W(b,c,k)}break;case 1:var d=b.stateNode;if(\"function\"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount()}catch(k){W(b,e,k)}}var f=b.return;try{Sj(b)}catch(k){W(b,f,k)}break;case 5:var g=b.return;try{Sj(b)}catch(k){W(b,g,k)}}}catch(k){W(b,b.return,k)}if(b===a){V=null;break}var h=b.sibling;if(null!==h){h.return=b.return;V=h;break}V=b.return}}\nvar mk=Math.ceil,nk=ua.ReactCurrentDispatcher,ok=ua.ReactCurrentOwner,pk=ua.ReactCurrentBatchConfig,K=0,R=null,Y=null,Z=0,gj=0,fj=Uf(0),T=0,qk=null,hh=0,rk=0,sk=0,tk=null,uk=null,gk=0,Hj=Infinity,vk=null,Pi=!1,Qi=null,Si=null,wk=!1,xk=null,yk=0,zk=0,Ak=null,Bk=-1,Ck=0;function L(){return 0!==(K&6)?B():-1!==Bk?Bk:Bk=B()}\nfunction lh(a){if(0===(a.mode&1))return 1;if(0!==(K&2)&&0!==Z)return Z&-Z;if(null!==Kg.transition)return 0===Ck&&(Ck=yc()),Ck;a=C;if(0!==a)return a;a=window.event;a=void 0===a?16:jd(a.type);return a}function mh(a,b,c,d){if(50<zk)throw zk=0,Ak=null,Error(p(185));Ac(a,c,d);if(0===(K&2)||a!==R)a===R&&(0===(K&2)&&(rk|=c),4===T&&Dk(a,Z)),Ek(a,d),1===c&&0===K&&0===(b.mode&1)&&(Hj=B()+500,fg&&jg())}\nfunction Ek(a,b){var c=a.callbackNode;wc(a,b);var d=uc(a,a===R?Z:0);if(0===d)null!==c&&bc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&bc(c);if(1===b)0===a.tag?ig(Fk.bind(null,a)):hg(Fk.bind(null,a)),Jf(function(){0===(K&6)&&jg()}),c=null;else{switch(Dc(d)){case 1:c=fc;break;case 4:c=gc;break;case 16:c=hc;break;case 536870912:c=jc;break;default:c=hc}c=Gk(c,Hk.bind(null,a))}a.callbackPriority=b;a.callbackNode=c}}\nfunction Hk(a,b){Bk=-1;Ck=0;if(0!==(K&6))throw Error(p(327));var c=a.callbackNode;if(Ik()&&a.callbackNode!==c)return null;var d=uc(a,a===R?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Jk(a,d);else{b=d;var e=K;K|=2;var f=Kk();if(R!==a||Z!==b)vk=null,Hj=B()+500,Lk(a,b);do try{Mk();break}catch(h){Nk(a,h)}while(1);Qg();nk.current=f;K=e;null!==Y?b=0:(R=null,Z=0,b=T)}if(0!==b){2===b&&(e=xc(a),0!==e&&(d=e,b=Ok(a,e)));if(1===b)throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;if(6===b)Dk(a,d);\nelse{e=a.current.alternate;if(0===(d&30)&&!Pk(e)&&(b=Jk(a,d),2===b&&(f=xc(a),0!==f&&(d=f,b=Ok(a,f))),1===b))throw c=qk,Lk(a,0),Dk(a,d),Ek(a,B()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(p(345));case 2:Qk(a,uk,vk);break;case 3:Dk(a,d);if((d&130023424)===d&&(b=gk+500-B(),10<b)){if(0!==uc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){L();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),b);break}Qk(a,uk,vk);break;case 4:Dk(a,d);if((d&4194240)===\nd)break;b=a.eventTimes;for(e=-1;0<d;){var g=31-oc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f}d=e;d=B()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*mk(d/1960))-d;if(10<d){a.timeoutHandle=Ff(Qk.bind(null,a,uk,vk),d);break}Qk(a,uk,vk);break;case 5:Qk(a,uk,vk);break;default:throw Error(p(329));}}}Ek(a,B());return a.callbackNode===c?Hk.bind(null,a):null}\nfunction Ok(a,b){var c=tk;a.current.memoizedState.isDehydrated&&(Lk(a,b).flags|=256);a=Jk(a,b);2!==a&&(b=uk,uk=c,null!==b&&Gj(b));return a}function Gj(a){null===uk?uk=a:uk.push.apply(uk,a)}\nfunction Pk(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!He(f(),e))return!1}catch(g){return!1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else{if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return!0;b=b.return}b.sibling.return=b.return;b=b.sibling}}return!0}\nfunction Dk(a,b){b&=~sk;b&=~rk;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-oc(b),d=1<<c;a[c]=-1;b&=~d}}function Fk(a){if(0!==(K&6))throw Error(p(327));Ik();var b=uc(a,0);if(0===(b&1))return Ek(a,B()),null;var c=Jk(a,b);if(0!==a.tag&&2===c){var d=xc(a);0!==d&&(b=d,c=Ok(a,d))}if(1===c)throw c=qk,Lk(a,0),Dk(a,b),Ek(a,B()),c;if(6===c)throw Error(p(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Qk(a,uk,vk);Ek(a,B());return null}\nfunction Rk(a,b){var c=K;K|=1;try{return a(b)}finally{K=c,0===K&&(Hj=B()+500,fg&&jg())}}function Sk(a){null!==xk&&0===xk.tag&&0===(K&6)&&Ik();var b=K;K|=1;var c=pk.transition,d=C;try{if(pk.transition=null,C=1,a)return a()}finally{C=d,pk.transition=c,K=b,0===(K&6)&&jg()}}function Ij(){gj=fj.current;E(fj)}\nfunction Lk(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Gf(c));if(null!==Y)for(c=Y.return;null!==c;){var d=c;wg(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&$f();break;case 3:Jh();E(Wf);E(H);Oh();break;case 5:Lh(d);break;case 4:Jh();break;case 13:E(M);break;case 19:E(M);break;case 10:Rg(d.type._context);break;case 22:case 23:Ij()}c=c.return}R=a;Y=a=wh(a.current,null);Z=gj=b;T=0;qk=null;sk=rk=hh=0;uk=tk=null;if(null!==Wg){for(b=\n0;b<Wg.length;b++)if(c=Wg[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g}c.pending=d}Wg=null}return a}\nfunction Nk(a,b){do{var c=Y;try{Qg();Ph.current=ai;if(Sh){for(var d=N.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next}Sh=!1}Rh=0;P=O=N=null;Th=!1;Uh=0;ok.current=null;if(null===c||null===c.return){T=1;qk=b;Y=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&\"object\"===typeof k&&\"function\"===typeof k.then){var l=k,m=h,q=m.tag;if(0===(m.mode&1)&&(0===q||11===q||15===q)){var r=m.alternate;r?(m.updateQueue=r.updateQueue,m.memoizedState=r.memoizedState,\nm.lanes=r.lanes):(m.updateQueue=null,m.memoizedState=null)}var y=Vi(g);if(null!==y){y.flags&=-257;Wi(y,g,h,f,b);y.mode&1&&Ti(f,l,b);b=y;k=l;var n=b.updateQueue;if(null===n){var t=new Set;t.add(k);b.updateQueue=t}else n.add(k);break a}else{if(0===(b&1)){Ti(f,l,b);uj();break a}k=Error(p(426))}}else if(I&&h.mode&1){var J=Vi(g);if(null!==J){0===(J.flags&65536)&&(J.flags|=256);Wi(J,g,h,f,b);Jg(Ki(k,h));break a}}f=k=Ki(k,h);4!==T&&(T=2);null===tk?tk=[f]:tk.push(f);f=g;do{switch(f.tag){case 3:f.flags|=65536;\nb&=-b;f.lanes|=b;var x=Oi(f,k,b);fh(f,x);break a;case 1:h=k;var w=f.type,u=f.stateNode;if(0===(f.flags&128)&&(\"function\"===typeof w.getDerivedStateFromError||null!==u&&\"function\"===typeof u.componentDidCatch&&(null===Si||!Si.has(u)))){f.flags|=65536;b&=-b;f.lanes|=b;var F=Ri(f,h,b);fh(f,F);break a}}f=f.return}while(null!==f)}Tk(c)}catch(na){b=na;Y===c&&null!==c&&(Y=c=c.return);continue}break}while(1)}function Kk(){var a=nk.current;nk.current=ai;return null===a?ai:a}\nfunction uj(){if(0===T||3===T||2===T)T=4;null===R||0===(hh&268435455)&&0===(rk&268435455)||Dk(R,Z)}function Jk(a,b){var c=K;K|=2;var d=Kk();if(R!==a||Z!==b)vk=null,Lk(a,b);do try{Uk();break}catch(e){Nk(a,e)}while(1);Qg();K=c;nk.current=d;if(null!==Y)throw Error(p(261));R=null;Z=0;return T}function Uk(){for(;null!==Y;)Vk(Y)}function Mk(){for(;null!==Y&&!cc();)Vk(Y)}function Vk(a){var b=Wk(a.alternate,a,gj);a.memoizedProps=a.pendingProps;null===b?Tk(a):Y=b;ok.current=null}\nfunction Tk(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Fj(c,b,gj),null!==c){Y=c;return}}else{c=Jj(c,b);if(null!==c){c.flags&=32767;Y=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else{T=6;Y=null;return}}b=b.sibling;if(null!==b){Y=b;return}Y=b=a}while(null!==b);0===T&&(T=5)}function Qk(a,b,c){var d=C,e=pk.transition;try{pk.transition=null,C=1,Xk(a,b,c,d)}finally{pk.transition=e,C=d}return null}\nfunction Xk(a,b,c,d){do Ik();while(null!==xk);if(0!==(K&6))throw Error(p(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(p(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Bc(a,f);a===R&&(Y=R=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||wk||(wk=!0,Gk(hc,function(){Ik();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=pk.transition;pk.transition=null;\nvar g=C;C=1;var h=K;K|=4;ok.current=null;Pj(a,c);ek(c,a);Oe(Df);dd=!!Cf;Df=Cf=null;a.current=c;ik(c,a,e);dc();K=h;C=g;pk.transition=f}else a.current=c;wk&&(wk=!1,xk=a,yk=e);f=a.pendingLanes;0===f&&(Si=null);mc(c.stateNode,d);Ek(a,B());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Pi)throw Pi=!1,a=Qi,Qi=null,a;0!==(yk&1)&&0!==a.tag&&Ik();f=a.pendingLanes;0!==(f&1)?a===Ak?zk++:(zk=0,Ak=a):zk=0;jg();return null}\nfunction Ik(){if(null!==xk){var a=Dc(yk),b=pk.transition,c=C;try{pk.transition=null;C=16>a?16:a;if(null===xk)var d=!1;else{a=xk;xk=null;yk=0;if(0!==(K&6))throw Error(p(331));var e=K;K|=4;for(V=a.current;null!==V;){var f=V,g=f.child;if(0!==(V.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(V=l;null!==V;){var m=V;switch(m.tag){case 0:case 11:case 15:Qj(8,m,f)}var q=m.child;if(null!==q)q.return=m,V=q;else for(;null!==V;){m=V;var r=m.sibling,y=m.return;Tj(m);if(m===\nl){V=null;break}if(null!==r){r.return=y;V=r;break}V=y}}}var n=f.alternate;if(null!==n){var t=n.child;if(null!==t){n.child=null;do{var J=t.sibling;t.sibling=null;t=J}while(null!==t)}}V=f}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,V=g;else b:for(;null!==V;){f=V;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Qj(9,f,f.return)}var x=f.sibling;if(null!==x){x.return=f.return;V=x;break b}V=f.return}}var w=a.current;for(V=w;null!==V;){g=V;var u=g.child;if(0!==(g.subtreeFlags&2064)&&null!==\nu)u.return=g,V=u;else b:for(g=w;null!==V;){h=V;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Rj(9,h)}}catch(na){W(h,h.return,na)}if(h===g){V=null;break b}var F=h.sibling;if(null!==F){F.return=h.return;V=F;break b}V=h.return}}K=e;jg();if(lc&&\"function\"===typeof lc.onPostCommitFiberRoot)try{lc.onPostCommitFiberRoot(kc,a)}catch(na){}d=!0}return d}finally{C=c,pk.transition=b}}return!1}function Yk(a,b,c){b=Ki(c,b);b=Oi(a,b,1);a=dh(a,b,1);b=L();null!==a&&(Ac(a,1,b),Ek(a,b))}\nfunction W(a,b,c){if(3===a.tag)Yk(a,a,c);else for(;null!==b;){if(3===b.tag){Yk(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if(\"function\"===typeof b.type.getDerivedStateFromError||\"function\"===typeof d.componentDidCatch&&(null===Si||!Si.has(d))){a=Ki(c,a);a=Ri(b,a,1);b=dh(b,a,1);a=L();null!==b&&(Ac(b,1,a),Ek(b,a));break}}b=b.return}}\nfunction Ui(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=L();a.pingedLanes|=a.suspendedLanes&c;R===a&&(Z&c)===c&&(4===T||3===T&&(Z&130023424)===Z&&500>B()-gk?Lk(a,0):sk|=c);Ek(a,b)}function Zk(a,b){0===b&&(0===(a.mode&1)?b=1:(b=sc,sc<<=1,0===(sc&130023424)&&(sc=4194304)));var c=L();a=Zg(a,b);null!==a&&(Ac(a,b,c),Ek(a,c))}function vj(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);Zk(a,c)}\nfunction ck(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(p(314));}null!==d&&d.delete(b);Zk(a,c)}var Wk;\nWk=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||Wf.current)Ug=!0;else{if(0===(a.lanes&c)&&0===(b.flags&128))return Ug=!1,zj(a,b,c);Ug=0!==(a.flags&131072)?!0:!1}else Ug=!1,I&&0!==(b.flags&1048576)&&ug(b,ng,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;jj(a,b);a=b.pendingProps;var e=Yf(b,H.current);Tg(b,c);e=Xh(null,b,d,a,e,c);var f=bi();b.flags|=1;\"object\"===typeof e&&null!==e&&\"function\"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=\nnull,Zf(d)?(f=!0,cg(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ah(b),e.updater=nh,b.stateNode=e,e._reactInternals=b,rh(b,d,a,c),b=kj(null,b,d,!0,f,c)):(b.tag=0,I&&f&&vg(b),Yi(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{jj(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=$k(d);a=Lg(d,a);switch(e){case 0:b=dj(null,b,d,a,c);break a;case 1:b=ij(null,b,d,a,c);break a;case 11:b=Zi(null,b,d,a,c);break a;case 14:b=aj(null,b,d,Lg(d.type,a),c);break a}throw Error(p(306,\nd,\"\"));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),dj(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),ij(a,b,d,e,c);case 3:a:{lj(b);if(null===a)throw Error(p(387));d=b.pendingProps;f=b.memoizedState;e=f.element;bh(a,b);gh(b,d,null,c);var g=b.memoizedState;d=g.element;if(f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=\nf,b.memoizedState=f,b.flags&256){e=Ki(Error(p(423)),b);b=mj(a,b,d,c,e);break a}else if(d!==e){e=Ki(Error(p(424)),b);b=mj(a,b,d,c,e);break a}else for(yg=Lf(b.stateNode.containerInfo.firstChild),xg=b,I=!0,zg=null,c=Ch(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else{Ig();if(d===e){b=$i(a,b,c);break a}Yi(a,b,d,c)}b=b.child}return b;case 5:return Kh(b),null===a&&Eg(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Ef(d,e)?g=null:null!==f&&Ef(d,f)&&(b.flags|=32),\nhj(a,b),Yi(a,b,g,c),b.child;case 6:return null===a&&Eg(b),null;case 13:return pj(a,b,c);case 4:return Ih(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Bh(b,null,d,c):Yi(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),Zi(a,b,d,e,c);case 7:return Yi(a,b,b.pendingProps,c),b.child;case 8:return Yi(a,b,b.pendingProps.children,c),b.child;case 12:return Yi(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;\ng=e.value;G(Mg,d._currentValue);d._currentValue=g;if(null!==f)if(He(f.value,g)){if(f.children===e.children&&!Wf.current){b=$i(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ch(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Sg(f.return,\nc,b);h.lanes|=c;break}k=k.next}}else if(10===f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(p(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Sg(g,c,b);g=f.sibling}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return}f=g}Yi(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,d=b.pendingProps.children,Tg(b,c),e=Vg(e),d=d(e),b.flags|=1,Yi(a,b,d,c),\nb.child;case 14:return d=b.type,e=Lg(d,b.pendingProps),e=Lg(d.type,e),aj(a,b,d,e,c);case 15:return cj(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:Lg(d,e),jj(a,b),b.tag=1,Zf(d)?(a=!0,cg(b)):a=!1,Tg(b,c),ph(b,d,e),rh(b,d,e,c),kj(null,b,d,!0,a,c);case 19:return yj(a,b,c);case 22:return ej(a,b,c)}throw Error(p(156,b.tag));};function Gk(a,b){return ac(a,b)}\nfunction al(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null}function Bg(a,b,c,d){return new al(a,b,c,d)}function bj(a){a=a.prototype;return!(!a||!a.isReactComponent)}\nfunction $k(a){if(\"function\"===typeof a)return bj(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===Da)return 11;if(a===Ga)return 14}return 2}\nfunction wh(a,b){var c=a.alternate;null===c?(c=Bg(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};\nc.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}\nfunction yh(a,b,c,d,e,f){var g=2;d=a;if(\"function\"===typeof a)bj(a)&&(g=1);else if(\"string\"===typeof a)g=5;else a:switch(a){case ya:return Ah(c.children,e,f,b);case za:g=8;e|=8;break;case Aa:return a=Bg(12,c,b,e|2),a.elementType=Aa,a.lanes=f,a;case Ea:return a=Bg(13,c,b,e),a.elementType=Ea,a.lanes=f,a;case Fa:return a=Bg(19,c,b,e),a.elementType=Fa,a.lanes=f,a;case Ia:return qj(c,e,f,b);default:if(\"object\"===typeof a&&null!==a)switch(a.$$typeof){case Ba:g=10;break a;case Ca:g=9;break a;case Da:g=11;\nbreak a;case Ga:g=14;break a;case Ha:g=16;d=null;break a}throw Error(p(130,null==a?a:typeof a,\"\"));}b=Bg(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Ah(a,b,c,d){a=Bg(7,a,d,b);a.lanes=c;return a}function qj(a,b,c,d){a=Bg(22,a,d,b);a.elementType=Ia;a.lanes=c;a.stateNode={isHidden:!1};return a}function xh(a,b,c){a=Bg(6,a,null,b);a.lanes=c;return a}\nfunction zh(a,b,c){b=Bg(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}\nfunction bl(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=-1;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=zc(0);this.expirationTimes=zc(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=zc(0);this.identifierPrefix=d;this.onRecoverableError=e;this.mutableSourceEagerHydrationData=\nnull}function cl(a,b,c,d,e,f,g,h,k){a=new bl(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=Bg(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ah(f);return a}function dl(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:wa,key:null==d?null:\"\"+d,children:a,containerInfo:b,implementation:c}}\nfunction el(a){if(!a)return Vf;a=a._reactInternals;a:{if(Vb(a)!==a||1!==a.tag)throw Error(p(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(Zf(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return}while(null!==b);throw Error(p(171));}if(1===a.tag){var c=a.type;if(Zf(c))return bg(a,c,b)}return b}\nfunction fl(a,b,c,d,e,f,g,h,k){a=cl(c,d,!0,a,e,f,g,h,k);a.context=el(null);c=a.current;d=L();e=lh(c);f=ch(d,e);f.callback=void 0!==b&&null!==b?b:null;dh(c,f,e);a.current.lanes=e;Ac(a,e,d);Ek(a,d);return a}function gl(a,b,c,d){var e=b.current,f=L(),g=lh(e);c=el(c);null===b.context?b.context=c:b.pendingContext=c;b=ch(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=dh(e,b,g);null!==a&&(mh(a,e,g,f),eh(a,e,g));return g}\nfunction hl(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function il(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b}}function jl(a,b){il(a,b);(a=a.alternate)&&il(a,b)}function kl(){return null}var ll=\"function\"===typeof reportError?reportError:function(a){console.error(a)};function ml(a){this._internalRoot=a}\nnl.prototype.render=ml.prototype.render=function(a){var b=this._internalRoot;if(null===b)throw Error(p(409));gl(a,b,null,null)};nl.prototype.unmount=ml.prototype.unmount=function(){var a=this._internalRoot;if(null!==a){this._internalRoot=null;var b=a.containerInfo;Sk(function(){gl(null,a,null,null)});b[uf]=null}};function nl(a){this._internalRoot=a}\nnl.prototype.unstable_scheduleHydration=function(a){if(a){var b=Hc();a={blockedOn:null,target:a,priority:b};for(var c=0;c<Qc.length&&0!==b&&b<Qc[c].priority;c++);Qc.splice(c,0,a);0===c&&Vc(a)}};function ol(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType)}function pl(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||\" react-mount-point-unstable \"!==a.nodeValue))}function ql(){}\nfunction rl(a,b,c,d,e){if(e){if(\"function\"===typeof d){var f=d;d=function(){var a=hl(g);f.call(a)}}var g=fl(b,d,a,0,null,!1,!1,\"\",ql);a._reactRootContainer=g;a[uf]=g.current;sf(8===a.nodeType?a.parentNode:a);Sk();return g}for(;e=a.lastChild;)a.removeChild(e);if(\"function\"===typeof d){var h=d;d=function(){var a=hl(k);h.call(a)}}var k=cl(a,0,!1,null,null,!1,!1,\"\",ql);a._reactRootContainer=k;a[uf]=k.current;sf(8===a.nodeType?a.parentNode:a);Sk(function(){gl(b,k,c,d)});return k}\nfunction sl(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f;if(\"function\"===typeof e){var h=e;e=function(){var a=hl(g);h.call(a)}}gl(b,g,a,e)}else g=rl(c,b,a,e,d);return hl(g)}Ec=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=tc(b.pendingLanes);0!==c&&(Cc(b,c|1),Ek(b,B()),0===(K&6)&&(Hj=B()+500,jg()))}break;case 13:Sk(function(){var b=Zg(a,1);if(null!==b){var c=L();mh(b,a,1,c)}}),jl(a,1)}};\nFc=function(a){if(13===a.tag){var b=Zg(a,134217728);if(null!==b){var c=L();mh(b,a,134217728,c)}jl(a,134217728)}};Gc=function(a){if(13===a.tag){var b=lh(a),c=Zg(a,b);if(null!==c){var d=L();mh(c,a,b,d)}jl(a,b)}};Hc=function(){return C};Ic=function(a,b){var c=C;try{return C=a,b()}finally{C=c}};\nyb=function(a,b,c){switch(b){case \"input\":bb(a,c);b=c.name;if(\"radio\"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll(\"input[name=\"+JSON.stringify(\"\"+b)+'][type=\"radio\"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Db(d);if(!e)throw Error(p(90));Wa(d);bb(d,e)}}}break;case \"textarea\":ib(a,c);break;case \"select\":b=c.value,null!=b&&fb(a,!!c.multiple,b,!1)}};Gb=Rk;Hb=Sk;\nvar tl={usingClientEntryPoint:!1,Events:[Cb,ue,Db,Eb,Fb,Rk]},ul={findFiberByHostInstance:Wc,bundleType:0,version:\"18.2.0\",rendererPackageName:\"react-dom\"};\nvar vl={bundleType:ul.bundleType,version:ul.version,rendererPackageName:ul.rendererPackageName,rendererConfig:ul.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:ua.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=Zb(a);return null===a?null:a.stateNode},findFiberByHostInstance:ul.findFiberByHostInstance||\nkl,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:\"18.2.0-next-9e3b772b8-20220608\"};if(\"undefined\"!==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var wl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!wl.isDisabled&&wl.supportsFiber)try{kc=wl.inject(vl),lc=wl}catch(a){}}exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=tl;\nexports.createPortal=function(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ol(b))throw Error(p(200));return dl(a,b,null,c)};exports.createRoot=function(a,b){if(!ol(a))throw Error(p(299));var c=!1,d=\"\",e=ll;null!==b&&void 0!==b&&(!0===b.unstable_strictMode&&(c=!0),void 0!==b.identifierPrefix&&(d=b.identifierPrefix),void 0!==b.onRecoverableError&&(e=b.onRecoverableError));b=cl(a,1,!1,null,null,c,!1,d,e);a[uf]=b.current;sf(8===a.nodeType?a.parentNode:a);return new ml(b)};\nexports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternals;if(void 0===b){if(\"function\"===typeof a.render)throw Error(p(188));a=Object.keys(a).join(\",\");throw Error(p(268,a));}a=Zb(b);a=null===a?null:a.stateNode;return a};exports.flushSync=function(a){return Sk(a)};exports.hydrate=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!0,c)};\nexports.hydrateRoot=function(a,b,c){if(!ol(a))throw Error(p(405));var d=null!=c&&c.hydratedSources||null,e=!1,f=\"\",g=ll;null!==c&&void 0!==c&&(!0===c.unstable_strictMode&&(e=!0),void 0!==c.identifierPrefix&&(f=c.identifierPrefix),void 0!==c.onRecoverableError&&(g=c.onRecoverableError));b=fl(b,null,a,1,null!=c?c:null,e,!1,f,g);a[uf]=b.current;sf(a);if(d)for(a=0;a<d.length;a++)c=d[a],e=c._getVersion,e=e(c._source),null==b.mutableSourceEagerHydrationData?b.mutableSourceEagerHydrationData=[c,e]:b.mutableSourceEagerHydrationData.push(c,\ne);return new nl(b)};exports.render=function(a,b,c){if(!pl(b))throw Error(p(200));return sl(null,a,b,!1,c)};exports.unmountComponentAtNode=function(a){if(!pl(a))throw Error(p(40));return a._reactRootContainer?(Sk(function(){sl(null,null,a,!1,function(){a._reactRootContainer=null;a[uf]=null})}),!0):!1};exports.unstable_batchedUpdates=Rk;\nexports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!pl(c))throw Error(p(200));if(null==a||void 0===a._reactInternals)throw Error(p(38));return sl(a,b,c,!1,d)};exports.version=\"18.2.0-next-9e3b772b8-20220608\";\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","'use strict';\n\nfunction checkDCE() {\n  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */\n  if (\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||\n    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'\n  ) {\n    return;\n  }\n  if (process.env.NODE_ENV !== 'production') {\n    // This branch is unreachable because this function is only called\n    // in production, but the condition is true only in development.\n    // Therefore if the branch is still here, dead code elimination wasn't\n    // properly applied.\n    // Don't change the message. React DevTools relies on it. Also make sure\n    // this message doesn't occur elsewhere in this function, or it will cause\n    // a false positive.\n    throw new Error('^_^');\n  }\n  try {\n    // Verify that the code above has been dead code eliminated (DCE'd).\n    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);\n  } catch (err) {\n    // DevTools shouldn't crash React, no matter what.\n    // We should still report in case we break this code.\n    console.error(err);\n  }\n}\n\nif (process.env.NODE_ENV === 'production') {\n  // DCE check should happen before ReactDOM bundle executes so that\n  // DevTools can report bad minification during injection.\n  checkDCE();\n  module.exports = require('./cjs/react-dom.production.min.js');\n} else {\n  module.exports = require('./cjs/react-dom.development.js');\n}\n","import type { FormEncType, FormMethod } from \"@remix-run/router\";\nimport type { RelativeRoutingType } from \"react-router\";\n\nexport const defaultMethod = \"get\";\nconst defaultEncType = \"application/x-www-form-urlencoded\";\n\nexport function isHtmlElement(object: any): object is HTMLElement {\n  return object != null && typeof object.tagName === \"string\";\n}\n\nexport function isButtonElement(object: any): object is HTMLButtonElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"button\";\n}\n\nexport function isFormElement(object: any): object is HTMLFormElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"form\";\n}\n\nexport function isInputElement(object: any): object is HTMLInputElement {\n  return isHtmlElement(object) && object.tagName.toLowerCase() === \"input\";\n}\n\ntype LimitedMouseEvent = Pick<\n  MouseEvent,\n  \"button\" | \"metaKey\" | \"altKey\" | \"ctrlKey\" | \"shiftKey\"\n>;\n\nfunction isModifiedEvent(event: LimitedMouseEvent) {\n  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);\n}\n\nexport function shouldProcessLinkClick(\n  event: LimitedMouseEvent,\n  target?: string\n) {\n  return (\n    event.button === 0 && // Ignore everything but left clicks\n    (!target || target === \"_self\") && // Let browser handle \"target=_blank\" etc.\n    !isModifiedEvent(event) // Ignore clicks with modifier keys\n  );\n}\n\nexport type ParamKeyValuePair = [string, string];\n\nexport type URLSearchParamsInit =\n  | string\n  | ParamKeyValuePair[]\n  | Record<string, string | string[]>\n  | URLSearchParams;\n\n/**\n * Creates a URLSearchParams object using the given initializer.\n *\n * This is identical to `new URLSearchParams(init)` except it also\n * supports arrays as values in the object form of the initializer\n * instead of just strings. This is convenient when you need multiple\n * values for a given key, but don't want to use an array initializer.\n *\n * For example, instead of:\n *\n *   let searchParams = new URLSearchParams([\n *     ['sort', 'name'],\n *     ['sort', 'price']\n *   ]);\n *\n * you can do:\n *\n *   let searchParams = createSearchParams({\n *     sort: ['name', 'price']\n *   });\n */\nexport function createSearchParams(\n  init: URLSearchParamsInit = \"\"\n): URLSearchParams {\n  return new URLSearchParams(\n    typeof init === \"string\" ||\n    Array.isArray(init) ||\n    init instanceof URLSearchParams\n      ? init\n      : Object.keys(init).reduce((memo, key) => {\n          let value = init[key];\n          return memo.concat(\n            Array.isArray(value) ? value.map((v) => [key, v]) : [[key, value]]\n          );\n        }, [] as ParamKeyValuePair[])\n  );\n}\n\nexport function getSearchParamsForLocation(\n  locationSearch: string,\n  defaultSearchParams: URLSearchParams\n) {\n  let searchParams = createSearchParams(locationSearch);\n\n  for (let key of defaultSearchParams.keys()) {\n    if (!searchParams.has(key)) {\n      defaultSearchParams.getAll(key).forEach((value) => {\n        searchParams.append(key, value);\n      });\n    }\n  }\n\n  return searchParams;\n}\n\nexport interface SubmitOptions {\n  /**\n   * The HTTP method used to submit the form. Overrides `<form method>`.\n   * Defaults to \"GET\".\n   */\n  method?: FormMethod;\n\n  /**\n   * The action URL path used to submit the form. Overrides `<form action>`.\n   * Defaults to the path of the current route.\n   *\n   * Note: It is assumed the path is already resolved. If you need to resolve a\n   * relative path, use `useFormAction`.\n   */\n  action?: string;\n\n  /**\n   * The action URL used to submit the form. Overrides `<form encType>`.\n   * Defaults to \"application/x-www-form-urlencoded\".\n   */\n  encType?: FormEncType;\n\n  /**\n   * Set `true` to replace the current entry in the browser's history stack\n   * instead of creating a new one (i.e. stay on \"the same page\"). Defaults\n   * to `false`.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n}\n\nexport function getFormSubmissionInfo(\n  target:\n    | HTMLFormElement\n    | HTMLButtonElement\n    | HTMLInputElement\n    | FormData\n    | URLSearchParams\n    | { [name: string]: string }\n    | null,\n  defaultAction: string,\n  options: SubmitOptions\n): {\n  url: URL;\n  method: string;\n  encType: string;\n  formData: FormData;\n} {\n  let method: string;\n  let action: string;\n  let encType: string;\n  let formData: FormData;\n\n  if (isFormElement(target)) {\n    let submissionTrigger: HTMLButtonElement | HTMLInputElement = (\n      options as any\n    ).submissionTrigger;\n\n    method = options.method || target.getAttribute(\"method\") || defaultMethod;\n    action = options.action || target.getAttribute(\"action\") || defaultAction;\n    encType =\n      options.encType || target.getAttribute(\"enctype\") || defaultEncType;\n\n    formData = new FormData(target);\n\n    if (submissionTrigger && submissionTrigger.name) {\n      formData.append(submissionTrigger.name, submissionTrigger.value);\n    }\n  } else if (\n    isButtonElement(target) ||\n    (isInputElement(target) &&\n      (target.type === \"submit\" || target.type === \"image\"))\n  ) {\n    let form = target.form;\n\n    if (form == null) {\n      throw new Error(\n        `Cannot submit a <button> or <input type=\"submit\"> without a <form>`\n      );\n    }\n\n    // <button>/<input type=\"submit\"> may override attributes of <form>\n\n    method =\n      options.method ||\n      target.getAttribute(\"formmethod\") ||\n      form.getAttribute(\"method\") ||\n      defaultMethod;\n    action =\n      options.action ||\n      target.getAttribute(\"formaction\") ||\n      form.getAttribute(\"action\") ||\n      defaultAction;\n    encType =\n      options.encType ||\n      target.getAttribute(\"formenctype\") ||\n      form.getAttribute(\"enctype\") ||\n      defaultEncType;\n\n    formData = new FormData(form);\n\n    // Include name + value from a <button>, appending in case the button name\n    // matches an existing input name\n    if (target.name) {\n      formData.append(target.name, target.value);\n    }\n  } else if (isHtmlElement(target)) {\n    throw new Error(\n      `Cannot submit element that is not <form>, <button>, or ` +\n        `<input type=\"submit|image\">`\n    );\n  } else {\n    method = options.method || defaultMethod;\n    action = options.action || defaultAction;\n    encType = options.encType || defaultEncType;\n\n    if (target instanceof FormData) {\n      formData = target;\n    } else {\n      formData = new FormData();\n\n      if (target instanceof URLSearchParams) {\n        for (let [name, value] of target) {\n          formData.append(name, value);\n        }\n      } else if (target != null) {\n        for (let name of Object.keys(target)) {\n          formData.append(name, target[name]);\n        }\n      }\n    }\n  }\n\n  let { protocol, host } = window.location;\n  let url = new URL(action, `${protocol}//${host}`);\n\n  return { url, method: method.toLowerCase(), encType, formData };\n}\n","/**\n * NOTE: If you refactor this to split up the modules into separate files,\n * you'll need to update the rollup config for react-router-dom-v5-compat.\n */\nimport * as React from \"react\";\nimport type {\n  NavigateOptions,\n  RelativeRoutingType,\n  RouteObject,\n  To,\n} from \"react-router\";\nimport {\n  Router,\n  createPath,\n  useHref,\n  useLocation,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useResolvedPath,\n  UNSAFE_DataRouterContext as DataRouterContext,\n  UNSAFE_DataRouterStateContext as DataRouterStateContext,\n  UNSAFE_NavigationContext as NavigationContext,\n  UNSAFE_RouteContext as RouteContext,\n  UNSAFE_enhanceManualRouteObjects as enhanceManualRouteObjects,\n} from \"react-router\";\nimport type {\n  BrowserHistory,\n  Fetcher,\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  HashHistory,\n  History,\n  HydrationState,\n  Router as RemixRouter,\n} from \"@remix-run/router\";\nimport {\n  createRouter,\n  createBrowserHistory,\n  createHashHistory,\n  invariant,\n  joinPaths,\n  ErrorResponse,\n} from \"@remix-run/router\";\n\nimport type {\n  SubmitOptions,\n  ParamKeyValuePair,\n  URLSearchParamsInit,\n} from \"./dom\";\nimport {\n  createSearchParams,\n  defaultMethod,\n  getFormSubmissionInfo,\n  getSearchParamsForLocation,\n  shouldProcessLinkClick,\n} from \"./dom\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Re-exports\n////////////////////////////////////////////////////////////////////////////////\n\nexport type {\n  FormEncType,\n  FormMethod,\n  GetScrollRestorationKeyFunction,\n  ParamKeyValuePair,\n  SubmitOptions,\n  URLSearchParamsInit,\n};\nexport { createSearchParams };\n\n// Note: Keep in sync with react-router exports!\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n} from \"react-router\";\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createMemoryRouter,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n} from \"react-router\";\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  UNSAFE_DataRouterContext,\n  UNSAFE_DataRouterStateContext,\n  UNSAFE_DataStaticRouterContext,\n  UNSAFE_NavigationContext,\n  UNSAFE_LocationContext,\n  UNSAFE_RouteContext,\n  UNSAFE_enhanceManualRouteObjects,\n} from \"react-router\";\n//#endregion\n\ndeclare global {\n  var __staticRouterHydrationData: HydrationState | undefined;\n}\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Routers\n////////////////////////////////////////////////////////////////////////////////\n\nexport function createBrowserRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createBrowserHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nexport function createHashRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    window?: Window;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createHashHistory({ window: opts?.window }),\n    hydrationData: opts?.hydrationData || parseHydrationData(),\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\nfunction parseHydrationData(): HydrationState | undefined {\n  let state = window?.__staticRouterHydrationData;\n  if (state && state.errors) {\n    state = {\n      ...state,\n      errors: deserializeErrors(state.errors),\n    };\n  }\n  return state;\n}\n\nfunction deserializeErrors(\n  errors: RemixRouter[\"state\"][\"errors\"]\n): RemixRouter[\"state\"][\"errors\"] {\n  if (!errors) return null;\n  let entries = Object.entries(errors);\n  let serialized: RemixRouter[\"state\"][\"errors\"] = {};\n  for (let [key, val] of entries) {\n    // Hey you!  If you change this, please change the corresponding logic in\n    // serializeErrors in react-router-dom/server.tsx :)\n    if (val && val.__type === \"RouteErrorResponse\") {\n      serialized[key] = new ErrorResponse(\n        val.status,\n        val.statusText,\n        val.data,\n        val.internal === true\n      );\n    } else if (val && val.__type === \"Error\") {\n      let error = new Error(val.message);\n      // Wipe away the client-side stack trace.  Nothing to fill it in with\n      // because we don't serialize SSR stack traces for security reasons\n      error.stack = \"\";\n      serialized[key] = error;\n    } else {\n      serialized[key] = val;\n    }\n  }\n  return serialized;\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Components\n////////////////////////////////////////////////////////////////////////////////\n\nexport interface BrowserRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Provides the cleanest URLs.\n */\nexport function BrowserRouter({\n  basename,\n  children,\n  window,\n}: BrowserRouterProps) {\n  let historyRef = React.useRef<BrowserHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createBrowserHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HashRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  window?: Window;\n}\n\n/**\n * A `<Router>` for use in web browsers. Stores the location in the hash\n * portion of the URL so it is not sent to the server.\n */\nexport function HashRouter({ basename, children, window }: HashRouterProps) {\n  let historyRef = React.useRef<HashHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createHashHistory({ window, v5Compat: true });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface HistoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  history: History;\n}\n\n/**\n * A `<Router>` that accepts a pre-instantiated history object. It's important\n * to note that using your own history object is highly discouraged and may add\n * two versions of the history library to your bundles unless you use the same\n * version of the history library that React Router uses internally.\n */\nfunction HistoryRouter({ basename, children, history }: HistoryRouterProps) {\n  const [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nif (__DEV__) {\n  HistoryRouter.displayName = \"unstable_HistoryRouter\";\n}\n\nexport { HistoryRouter as unstable_HistoryRouter };\n\nexport interface LinkProps\n  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, \"href\"> {\n  reloadDocument?: boolean;\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n  to: To;\n}\n\n/**\n * The public API for rendering a history-aware <a>.\n */\nexport const Link = React.forwardRef<HTMLAnchorElement, LinkProps>(\n  function LinkWithRef(\n    {\n      onClick,\n      relative,\n      reloadDocument,\n      replace,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      ...rest\n    },\n    ref\n  ) {\n    let href = useHref(to, { relative });\n    let internalOnClick = useLinkClickHandler(to, {\n      replace,\n      state,\n      target,\n      preventScrollReset,\n      relative,\n    });\n    function handleClick(\n      event: React.MouseEvent<HTMLAnchorElement, MouseEvent>\n    ) {\n      if (onClick) onClick(event);\n      if (!event.defaultPrevented) {\n        internalOnClick(event);\n      }\n    }\n\n    return (\n      // eslint-disable-next-line jsx-a11y/anchor-has-content\n      <a\n        {...rest}\n        href={href}\n        onClick={reloadDocument ? onClick : handleClick}\n        ref={ref}\n        target={target}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  Link.displayName = \"Link\";\n}\n\nexport interface NavLinkProps\n  extends Omit<LinkProps, \"className\" | \"style\" | \"children\"> {\n  children?:\n    | React.ReactNode\n    | ((props: { isActive: boolean; isPending: boolean }) => React.ReactNode);\n  caseSensitive?: boolean;\n  className?:\n    | string\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => string | undefined);\n  end?: boolean;\n  style?:\n    | React.CSSProperties\n    | ((props: {\n        isActive: boolean;\n        isPending: boolean;\n      }) => React.CSSProperties | undefined);\n}\n\n/**\n * A <Link> wrapper that knows if it's \"active\" or not.\n */\nexport const NavLink = React.forwardRef<HTMLAnchorElement, NavLinkProps>(\n  function NavLinkWithRef(\n    {\n      \"aria-current\": ariaCurrentProp = \"page\",\n      caseSensitive = false,\n      className: classNameProp = \"\",\n      end = false,\n      style: styleProp,\n      to,\n      children,\n      ...rest\n    },\n    ref\n  ) {\n    let path = useResolvedPath(to, { relative: rest.relative });\n    let location = useLocation();\n    let routerState = React.useContext(DataRouterStateContext);\n    let { navigator } = React.useContext(NavigationContext);\n\n    let toPathname = navigator.encodeLocation\n      ? navigator.encodeLocation(path).pathname\n      : path.pathname;\n    let locationPathname = location.pathname;\n    let nextLocationPathname =\n      routerState && routerState.navigation && routerState.navigation.location\n        ? routerState.navigation.location.pathname\n        : null;\n\n    if (!caseSensitive) {\n      locationPathname = locationPathname.toLowerCase();\n      nextLocationPathname = nextLocationPathname\n        ? nextLocationPathname.toLowerCase()\n        : null;\n      toPathname = toPathname.toLowerCase();\n    }\n\n    let isActive =\n      locationPathname === toPathname ||\n      (!end &&\n        locationPathname.startsWith(toPathname) &&\n        locationPathname.charAt(toPathname.length) === \"/\");\n\n    let isPending =\n      nextLocationPathname != null &&\n      (nextLocationPathname === toPathname ||\n        (!end &&\n          nextLocationPathname.startsWith(toPathname) &&\n          nextLocationPathname.charAt(toPathname.length) === \"/\"));\n\n    let ariaCurrent = isActive ? ariaCurrentProp : undefined;\n\n    let className: string | undefined;\n    if (typeof classNameProp === \"function\") {\n      className = classNameProp({ isActive, isPending });\n    } else {\n      // If the className prop is not a function, we use a default `active`\n      // class for <NavLink />s that are active. In v5 `active` was the default\n      // value for `activeClassName`, but we are removing that API and can still\n      // use the old default behavior for a cleaner upgrade path and keep the\n      // simple styling rules working as they currently do.\n      className = [\n        classNameProp,\n        isActive ? \"active\" : null,\n        isPending ? \"pending\" : null,\n      ]\n        .filter(Boolean)\n        .join(\" \");\n    }\n\n    let style =\n      typeof styleProp === \"function\"\n        ? styleProp({ isActive, isPending })\n        : styleProp;\n\n    return (\n      <Link\n        {...rest}\n        aria-current={ariaCurrent}\n        className={className}\n        ref={ref}\n        style={style}\n        to={to}\n      >\n        {typeof children === \"function\"\n          ? children({ isActive, isPending })\n          : children}\n      </Link>\n    );\n  }\n);\n\nif (__DEV__) {\n  NavLink.displayName = \"NavLink\";\n}\n\nexport interface FormProps extends React.FormHTMLAttributes<HTMLFormElement> {\n  /**\n   * The HTTP verb to use when the form is submit. Supports \"get\", \"post\",\n   * \"put\", \"delete\", \"patch\".\n   */\n  method?: FormMethod;\n\n  /**\n   * Normal `<form action>` but supports React Router's relative paths.\n   */\n  action?: string;\n\n  /**\n   * Forces a full document navigation instead of a fetch.\n   */\n  reloadDocument?: boolean;\n\n  /**\n   * Replaces the current entry in the browser history stack when the form\n   * navigates. Use this if you don't want the user to be able to click \"back\"\n   * to the page with the form on it.\n   */\n  replace?: boolean;\n\n  /**\n   * Determines whether the form action is relative to the route hierarchy or\n   * the pathname.  Use this if you want to opt out of navigating the route\n   * hierarchy and want to instead route based on /-delimited URL segments\n   */\n  relative?: RelativeRoutingType;\n\n  /**\n   * A function to call when the form is submitted. If you call\n   * `event.preventDefault()` then this form will not do anything.\n   */\n  onSubmit?: React.FormEventHandler<HTMLFormElement>;\n}\n\n/**\n * A `@remix-run/router`-aware `<form>`. It behaves like a normal form except\n * that the interaction with the server is with `fetch` instead of new document\n * requests, allowing components to add nicer UX to the page as the form is\n * submitted and returns with data.\n */\nexport const Form = React.forwardRef<HTMLFormElement, FormProps>(\n  (props, ref) => {\n    return <FormImpl {...props} ref={ref} />;\n  }\n);\n\nif (__DEV__) {\n  Form.displayName = \"Form\";\n}\n\ntype HTMLSubmitEvent = React.BaseSyntheticEvent<\n  SubmitEvent,\n  Event,\n  HTMLFormElement\n>;\n\ntype HTMLFormSubmitter = HTMLButtonElement | HTMLInputElement;\n\ninterface FormImplProps extends FormProps {\n  fetcherKey?: string;\n  routeId?: string;\n}\n\nconst FormImpl = React.forwardRef<HTMLFormElement, FormImplProps>(\n  (\n    {\n      reloadDocument,\n      replace,\n      method = defaultMethod,\n      action,\n      onSubmit,\n      fetcherKey,\n      routeId,\n      relative,\n      ...props\n    },\n    forwardedRef\n  ) => {\n    let submit = useSubmitImpl(fetcherKey, routeId);\n    let formMethod: FormMethod =\n      method.toLowerCase() === \"get\" ? \"get\" : \"post\";\n    let formAction = useFormAction(action, { relative });\n    let submitHandler: React.FormEventHandler<HTMLFormElement> = (event) => {\n      onSubmit && onSubmit(event);\n      if (event.defaultPrevented) return;\n      event.preventDefault();\n\n      let submitter = (event as unknown as HTMLSubmitEvent).nativeEvent\n        .submitter as HTMLFormSubmitter | null;\n\n      let submitMethod =\n        (submitter?.getAttribute(\"formmethod\") as FormMethod | undefined) ||\n        method;\n\n      submit(submitter || event.currentTarget, {\n        method: submitMethod,\n        replace,\n        relative,\n      });\n    };\n\n    return (\n      <form\n        ref={forwardedRef}\n        method={formMethod}\n        action={formAction}\n        onSubmit={reloadDocument ? onSubmit : submitHandler}\n        {...props}\n      />\n    );\n  }\n);\n\nif (__DEV__) {\n  FormImpl.displayName = \"FormImpl\";\n}\n\nexport interface ScrollRestorationProps {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n}\n\n/**\n * This component will emulate the browser's scroll restoration on location\n * changes.\n */\nexport function ScrollRestoration({\n  getKey,\n  storageKey,\n}: ScrollRestorationProps) {\n  useScrollRestoration({ getKey, storageKey });\n  return null;\n}\n\nif (__DEV__) {\n  ScrollRestoration.displayName = \"ScrollRestoration\";\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hooks\n////////////////////////////////////////////////////////////////////////////////\n\nenum DataRouterHook {\n  UseScrollRestoration = \"useScrollRestoration\",\n  UseSubmitImpl = \"useSubmitImpl\",\n  UseFetcher = \"useFetcher\",\n}\n\nenum DataRouterStateHook {\n  UseFetchers = \"useFetchers\",\n  UseScrollRestoration = \"useScrollRestoration\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\n/**\n * Handles the click behavior for router `<Link>` components. This is useful if\n * you need to create custom `<Link>` components with the same click behavior we\n * use in our exported `<Link>`.\n */\nexport function useLinkClickHandler<E extends Element = HTMLAnchorElement>(\n  to: To,\n  {\n    target,\n    replace: replaceProp,\n    state,\n    preventScrollReset,\n    relative,\n  }: {\n    target?: React.HTMLAttributeAnchorTarget;\n    replace?: boolean;\n    state?: any;\n    preventScrollReset?: boolean;\n    relative?: RelativeRoutingType;\n  } = {}\n): (event: React.MouseEvent<E, MouseEvent>) => void {\n  let navigate = useNavigate();\n  let location = useLocation();\n  let path = useResolvedPath(to, { relative });\n\n  return React.useCallback(\n    (event: React.MouseEvent<E, MouseEvent>) => {\n      if (shouldProcessLinkClick(event, target)) {\n        event.preventDefault();\n\n        // If the URL hasn't changed, a regular <a> will do a replace instead of\n        // a push, so do the same here unless the replace prop is explicitly set\n        let replace =\n          replaceProp !== undefined\n            ? replaceProp\n            : createPath(location) === createPath(path);\n\n        navigate(to, { replace, state, preventScrollReset, relative });\n      }\n    },\n    [\n      location,\n      navigate,\n      path,\n      replaceProp,\n      state,\n      target,\n      to,\n      preventScrollReset,\n      relative,\n    ]\n  );\n}\n\n/**\n * A convenient wrapper for reading and writing search parameters via the\n * URLSearchParams interface.\n */\nexport function useSearchParams(\n  defaultInit?: URLSearchParamsInit\n): [URLSearchParams, SetURLSearchParams] {\n  warning(\n    typeof URLSearchParams !== \"undefined\",\n    `You cannot use the \\`useSearchParams\\` hook in a browser that does not ` +\n      `support the URLSearchParams API. If you need to support Internet ` +\n      `Explorer 11, we recommend you load a polyfill such as ` +\n      `https://github.com/ungap/url-search-params\\n\\n` +\n      `If you're unsure how to load polyfills, we recommend you check out ` +\n      `https://polyfill.io/v3/ which provides some recommendations about how ` +\n      `to load polyfills only for users that need them, instead of for every ` +\n      `user.`\n  );\n\n  let defaultSearchParamsRef = React.useRef(createSearchParams(defaultInit));\n\n  let location = useLocation();\n  let searchParams = React.useMemo(\n    () =>\n      getSearchParamsForLocation(\n        location.search,\n        defaultSearchParamsRef.current\n      ),\n    [location.search]\n  );\n\n  let navigate = useNavigate();\n  let setSearchParams = React.useCallback<SetURLSearchParams>(\n    (nextInit, navigateOptions) => {\n      const newSearchParams = createSearchParams(\n        typeof nextInit === \"function\" ? nextInit(searchParams) : nextInit\n      );\n      navigate(\"?\" + newSearchParams, navigateOptions);\n    },\n    [navigate, searchParams]\n  );\n\n  return [searchParams, setSearchParams];\n}\n\ntype SetURLSearchParams = (\n  nextInit?:\n    | URLSearchParamsInit\n    | ((prev: URLSearchParams) => URLSearchParamsInit),\n  navigateOpts?: NavigateOptions\n) => void;\n\ntype SubmitTarget =\n  | HTMLFormElement\n  | HTMLButtonElement\n  | HTMLInputElement\n  | FormData\n  | URLSearchParams\n  | { [name: string]: string }\n  | null;\n\n/**\n * Submits a HTML `<form>` to the server without reloading the page.\n */\nexport interface SubmitFunction {\n  (\n    /**\n     * Specifies the `<form>` to be submitted to the server, a specific\n     * `<button>` or `<input type=\"submit\">` to use to submit the form, or some\n     * arbitrary data to submit.\n     *\n     * Note: When using a `<button>` its `name` and `value` will also be\n     * included in the form data that is submitted.\n     */\n    target: SubmitTarget,\n\n    /**\n     * Options that override the `<form>`'s own attributes. Required when\n     * submitting arbitrary data without a backing `<form>`.\n     */\n    options?: SubmitOptions\n  ): void;\n}\n\n/**\n * Returns a function that may be used to programmatically submit a form (or\n * some arbitrary data) to the server.\n */\nexport function useSubmit(): SubmitFunction {\n  return useSubmitImpl();\n}\n\nfunction useSubmitImpl(fetcherKey?: string, routeId?: string): SubmitFunction {\n  let { router } = useDataRouterContext(DataRouterHook.UseSubmitImpl);\n  let defaultAction = useFormAction();\n\n  return React.useCallback(\n    (target, options = {}) => {\n      if (typeof document === \"undefined\") {\n        throw new Error(\n          \"You are calling submit during the server render. \" +\n            \"Try calling submit within a `useEffect` or callback instead.\"\n        );\n      }\n\n      let { method, encType, formData, url } = getFormSubmissionInfo(\n        target,\n        defaultAction,\n        options\n      );\n\n      let href = url.pathname + url.search;\n      let opts = {\n        replace: options.replace,\n        formData,\n        formMethod: method as FormMethod,\n        formEncType: encType as FormEncType,\n      };\n      if (fetcherKey) {\n        invariant(routeId != null, \"No routeId available for useFetcher()\");\n        router.fetch(fetcherKey, routeId, href, opts);\n      } else {\n        router.navigate(href, opts);\n      }\n    },\n    [defaultAction, router, fetcherKey, routeId]\n  );\n}\n\nexport function useFormAction(\n  action?: string,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  let { basename } = React.useContext(NavigationContext);\n  let routeContext = React.useContext(RouteContext);\n  invariant(routeContext, \"useFormAction must be used inside a RouteContext\");\n\n  let [match] = routeContext.matches.slice(-1);\n  // Shallow clone path so we can modify it below, otherwise we modify the\n  // object referenced by useMemo inside useResolvedPath\n  let path = { ...useResolvedPath(action ? action : \".\", { relative }) };\n\n  // Previously we set the default action to \".\". The problem with this is that\n  // `useResolvedPath(\".\")` excludes search params and the hash of the resolved\n  // URL. This is the intended behavior of when \".\" is specifically provided as\n  // the form action, but inconsistent w/ browsers when the action is omitted.\n  // https://github.com/remix-run/remix/issues/927\n  let location = useLocation();\n  if (action == null) {\n    // Safe to write to these directly here since if action was undefined, we\n    // would have called useResolvedPath(\".\") which will never include a search\n    // or hash\n    path.search = location.search;\n    path.hash = location.hash;\n\n    // When grabbing search params from the URL, remove the automatically\n    // inserted ?index param so we match the useResolvedPath search behavior\n    // which would not include ?index\n    if (match.route.index) {\n      let params = new URLSearchParams(path.search);\n      params.delete(\"index\");\n      path.search = params.toString() ? `?${params.toString()}` : \"\";\n    }\n  }\n\n  if ((!action || action === \".\") && match.route.index) {\n    path.search = path.search\n      ? path.search.replace(/^\\?/, \"?index&\")\n      : \"?index\";\n  }\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the form action.  If this is a root navigation, then just use\n  // the raw basename which allows the basename to have full control over the\n  // presence of a trailing slash on root actions\n  if (basename !== \"/\") {\n    path.pathname =\n      path.pathname === \"/\" ? basename : joinPaths([basename, path.pathname]);\n  }\n\n  return createPath(path);\n}\n\nfunction createFetcherForm(fetcherKey: string, routeId: string) {\n  let FetcherForm = React.forwardRef<HTMLFormElement, FormProps>(\n    (props, ref) => {\n      return (\n        <FormImpl\n          {...props}\n          ref={ref}\n          fetcherKey={fetcherKey}\n          routeId={routeId}\n        />\n      );\n    }\n  );\n  if (__DEV__) {\n    FetcherForm.displayName = \"fetcher.Form\";\n  }\n  return FetcherForm;\n}\n\nlet fetcherId = 0;\n\nexport type FetcherWithComponents<TData> = Fetcher<TData> & {\n  Form: ReturnType<typeof createFetcherForm>;\n  submit: (\n    target: SubmitTarget,\n    // Fetchers cannot replace because they are not navigation events\n    options?: Omit<SubmitOptions, \"replace\">\n  ) => void;\n  load: (href: string) => void;\n};\n\n/**\n * Interacts with route loaders and actions without causing a navigation. Great\n * for any interaction that stays on the same page.\n */\nexport function useFetcher<TData = any>(): FetcherWithComponents<TData> {\n  let { router } = useDataRouterContext(DataRouterHook.UseFetcher);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useFetcher must be used inside a RouteContext`);\n\n  let routeId = route.matches[route.matches.length - 1]?.route.id;\n  invariant(\n    routeId != null,\n    `useFetcher can only be used on routes that contain a unique \"id\"`\n  );\n\n  let [fetcherKey] = React.useState(() => String(++fetcherId));\n  let [Form] = React.useState(() => {\n    invariant(routeId, `No routeId available for fetcher.Form()`);\n    return createFetcherForm(fetcherKey, routeId);\n  });\n  let [load] = React.useState(() => (href: string) => {\n    invariant(router, \"No router available for fetcher.load()\");\n    invariant(routeId, \"No routeId available for fetcher.load()\");\n    router.fetch(fetcherKey, routeId, href);\n  });\n  let submit = useSubmitImpl(fetcherKey, routeId);\n\n  let fetcher = router.getFetcher<TData>(fetcherKey);\n\n  let fetcherWithComponents = React.useMemo(\n    () => ({\n      Form,\n      submit,\n      load,\n      ...fetcher,\n    }),\n    [fetcher, Form, submit, load]\n  );\n\n  React.useEffect(() => {\n    // Is this busted when the React team gets real weird and calls effects\n    // twice on mount?  We really just need to garbage collect here when this\n    // fetcher is no longer around.\n    return () => {\n      if (!router) {\n        console.warn(`No fetcher available to clean up from useFetcher()`);\n        return;\n      }\n      router.deleteFetcher(fetcherKey);\n    };\n  }, [router, fetcherKey]);\n\n  return fetcherWithComponents;\n}\n\n/**\n * Provides all fetchers currently on the page. Useful for layouts and parent\n * routes that need to provide pending/optimistic UI regarding the fetch.\n */\nexport function useFetchers(): Fetcher[] {\n  let state = useDataRouterState(DataRouterStateHook.UseFetchers);\n  return [...state.fetchers.values()];\n}\n\nconst SCROLL_RESTORATION_STORAGE_KEY = \"react-router-scroll-positions\";\nlet savedScrollPositions: Record<string, number> = {};\n\n/**\n * When rendered inside a RouterProvider, will restore scroll positions on navigations\n */\nfunction useScrollRestoration({\n  getKey,\n  storageKey,\n}: {\n  getKey?: GetScrollRestorationKeyFunction;\n  storageKey?: string;\n} = {}) {\n  let { router } = useDataRouterContext(DataRouterHook.UseScrollRestoration);\n  let { restoreScrollPosition, preventScrollReset } = useDataRouterState(\n    DataRouterStateHook.UseScrollRestoration\n  );\n  let location = useLocation();\n  let matches = useMatches();\n  let navigation = useNavigation();\n\n  // Trigger manual scroll restoration while we're active\n  React.useEffect(() => {\n    window.history.scrollRestoration = \"manual\";\n    return () => {\n      window.history.scrollRestoration = \"auto\";\n    };\n  }, []);\n\n  // Save positions on unload\n  useBeforeUnload(\n    React.useCallback(() => {\n      if (navigation.state === \"idle\") {\n        let key = (getKey ? getKey(location, matches) : null) || location.key;\n        savedScrollPositions[key] = window.scrollY;\n      }\n      sessionStorage.setItem(\n        storageKey || SCROLL_RESTORATION_STORAGE_KEY,\n        JSON.stringify(savedScrollPositions)\n      );\n      window.history.scrollRestoration = \"auto\";\n    }, [storageKey, getKey, navigation.state, location, matches])\n  );\n\n  // Read in any saved scroll locations\n  if (typeof document !== \"undefined\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      try {\n        let sessionPositions = sessionStorage.getItem(\n          storageKey || SCROLL_RESTORATION_STORAGE_KEY\n        );\n        if (sessionPositions) {\n          savedScrollPositions = JSON.parse(sessionPositions);\n        }\n      } catch (e) {\n        // no-op, use default empty object\n      }\n    }, [storageKey]);\n\n    // Enable scroll restoration in the router\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      let disableScrollRestoration = router?.enableScrollRestoration(\n        savedScrollPositions,\n        () => window.scrollY,\n        getKey\n      );\n      return () => disableScrollRestoration && disableScrollRestoration();\n    }, [router, getKey]);\n\n    // Restore scrolling when state.restoreScrollPosition changes\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      // Explicit false means don't do anything (used for submissions)\n      if (restoreScrollPosition === false) {\n        return;\n      }\n\n      // been here before, scroll to it\n      if (typeof restoreScrollPosition === \"number\") {\n        window.scrollTo(0, restoreScrollPosition);\n        return;\n      }\n\n      // try to scroll to the hash\n      if (location.hash) {\n        let el = document.getElementById(location.hash.slice(1));\n        if (el) {\n          el.scrollIntoView();\n          return;\n        }\n      }\n\n      // Opt out of scroll reset if this link requested it\n      if (preventScrollReset === true) {\n        return;\n      }\n\n      // otherwise go to the top on new locations\n      window.scrollTo(0, 0);\n    }, [location, restoreScrollPosition, preventScrollReset]);\n  }\n}\n\n/**\n * Setup a callback to be fired on the window's `beforeunload` event. This is\n * useful for saving some data to `window.localStorage` just before the page\n * refreshes.\n *\n * Note: The `callback` argument should be a function created with\n * `React.useCallback()`.\n */\nexport function useBeforeUnload(\n  callback: (event: BeforeUnloadEvent) => any\n): void {\n  React.useEffect(() => {\n    window.addEventListener(\"beforeunload\", callback);\n    return () => {\n      window.removeEventListener(\"beforeunload\", callback);\n    };\n  }, [callback]);\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Utils\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: boolean, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n//#endregion\n\nexport { useScrollRestoration as UNSAFE_useScrollRestoration };\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport * as React from \"react\";\n\n/**\n * inlined Object.is polyfill to avoid requiring consumers ship their own\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n */\nfunction isPolyfill(x: any, y: any) {\n  return (\n    (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y) // eslint-disable-line no-self-compare\n  );\n}\n\nconst is: (x: any, y: any) => boolean =\n  typeof Object.is === \"function\" ? Object.is : isPolyfill;\n\n// Intentionally not using named imports because Rollup uses dynamic\n// dispatch for CommonJS interop named imports.\nconst { useState, useEffect, useLayoutEffect, useDebugValue } = React;\n\nlet didWarnOld18Alpha = false;\nlet didWarnUncachedGetSnapshot = false;\n\n// Disclaimer: This shim breaks many of the rules of React, and only works\n// because of a very particular set of implementation details and assumptions\n// -- change any one of them and it will break. The most important assumption\n// is that updates are always synchronous, because concurrent rendering is\n// only available in versions of React that also have a built-in\n// useSyncExternalStore API. And we only use this shim when the built-in API\n// does not exist.\n//\n// Do not assume that the clever hacks used by this hook also work in general.\n// The point of this shim is to replace the need for hacks by other libraries.\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  getServerSnapshot?: () => T\n): T {\n  if (__DEV__) {\n    if (!didWarnOld18Alpha) {\n      if (\"startTransition\" in React) {\n        didWarnOld18Alpha = true;\n        console.error(\n          \"You are using an outdated, pre-release alpha of React 18 that \" +\n            \"does not support useSyncExternalStore. The \" +\n            \"use-sync-external-store shim will not work correctly. Upgrade \" +\n            \"to a newer pre-release.\"\n        );\n      }\n    }\n  }\n\n  // Read the current snapshot from the store on every render. Again, this\n  // breaks the rules of React, and only works here because of specific\n  // implementation details, most importantly that updates are\n  // always synchronous.\n  const value = getSnapshot();\n  if (__DEV__) {\n    if (!didWarnUncachedGetSnapshot) {\n      const cachedValue = getSnapshot();\n      if (!is(value, cachedValue)) {\n        console.error(\n          \"The result of getSnapshot should be cached to avoid an infinite loop\"\n        );\n        didWarnUncachedGetSnapshot = true;\n      }\n    }\n  }\n\n  // Because updates are synchronous, we don't queue them. Instead we force a\n  // re-render whenever the subscribed state changes by updating an some\n  // arbitrary useState hook. Then, during render, we call getSnapshot to read\n  // the current value.\n  //\n  // Because we don't actually use the state returned by the useState hook, we\n  // can save a bit of memory by storing other stuff in that slot.\n  //\n  // To implement the early bailout, we need to track some things on a mutable\n  // object. Usually, we would put that in a useRef hook, but we can stash it in\n  // our useState hook instead.\n  //\n  // To force a re-render, we call forceUpdate({inst}). That works because the\n  // new object always fails an equality check.\n  const [{ inst }, forceUpdate] = useState({ inst: { value, getSnapshot } });\n\n  // Track the latest getSnapshot function with a ref. This needs to be updated\n  // in the layout phase so we can access it during the tearing check that\n  // happens on subscribe.\n  useLayoutEffect(() => {\n    inst.value = value;\n    inst.getSnapshot = getSnapshot;\n\n    // Whenever getSnapshot or subscribe changes, we need to check in the\n    // commit phase if there was an interleaved mutation. In concurrent mode\n    // this can happen all the time, but even in synchronous mode, an earlier\n    // effect may have mutated the store.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe, value, getSnapshot]);\n\n  useEffect(() => {\n    // Check for changes right before subscribing. Subsequent changes will be\n    // detected in the subscription handler.\n    if (checkIfSnapshotChanged(inst)) {\n      // Force a re-render.\n      forceUpdate({ inst });\n    }\n    const handleStoreChange = () => {\n      // TODO: Because there is no cross-renderer API for batching updates, it's\n      // up to the consumer of this library to wrap their subscription event\n      // with unstable_batchedUpdates. Should we try to detect when this isn't\n      // the case and print a warning in development?\n\n      // The store changed. Check if the snapshot changed since the last time we\n      // read from the store.\n      if (checkIfSnapshotChanged(inst)) {\n        // Force a re-render.\n        forceUpdate({ inst });\n      }\n    };\n    // Subscribe to the store and return a clean-up function.\n    return subscribe(handleStoreChange);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [subscribe]);\n\n  useDebugValue(value);\n  return value;\n}\n\nfunction checkIfSnapshotChanged(inst: any) {\n  const latestGetSnapshot = inst.getSnapshot;\n  const prevValue = inst.value;\n  try {\n    const nextValue = latestGetSnapshot();\n    return !is(prevValue, nextValue);\n  } catch (error) {\n    return true;\n  }\n}\n","/**\n * Inlined into the react-router repo since use-sync-external-store does not\n * provide a UMD-compatible package, so we need this to be able to distribute\n * UMD react-router bundles\n */\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nimport * as React from \"react\";\n\nimport { useSyncExternalStore as client } from \"./useSyncExternalStoreShimClient\";\nimport { useSyncExternalStore as server } from \"./useSyncExternalStoreShimServer\";\n\nconst canUseDOM: boolean = !!(\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\"\n);\nconst isServerEnvironment = !canUseDOM;\nconst shim = isServerEnvironment ? server : client;\n\nexport const useSyncExternalStore =\n  \"useSyncExternalStore\" in React\n    ? ((module) => module.useSyncExternalStore)(React)\n    : shim;\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n */\n\nexport function useSyncExternalStore<T>(\n  subscribe: (fn: () => void) => () => void,\n  getSnapshot: () => T,\n  getServerSnapshot?: () => T\n): T {\n  // Note: The shim does not use getServerSnapshot, because pre-18 versions of\n  // React do not expose a way to check if we're hydrating. So users of the shim\n  // will need to track that themselves and return the correct value\n  // from `getSnapshot`.\n  return getSnapshot();\n}\n","import * as React from \"react\";\nimport type {\n  AgnosticRouteMatch,\n  AgnosticIndexRouteObject,\n  AgnosticNonIndexRouteObject,\n  History,\n  Location,\n  Router,\n  StaticHandlerContext,\n  To,\n  TrackedPromise,\n} from \"@remix-run/router\";\nimport type { Action as NavigationType } from \"@remix-run/router\";\n\n// Create react-specific types from the agnostic types in @remix-run/router to\n// export from react-router\nexport interface IndexRouteObject {\n  caseSensitive?: AgnosticIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticIndexRouteObject[\"path\"];\n  id?: AgnosticIndexRouteObject[\"id\"];\n  loader?: AgnosticIndexRouteObject[\"loader\"];\n  action?: AgnosticIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticIndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface NonIndexRouteObject {\n  caseSensitive?: AgnosticNonIndexRouteObject[\"caseSensitive\"];\n  path?: AgnosticNonIndexRouteObject[\"path\"];\n  id?: AgnosticNonIndexRouteObject[\"id\"];\n  loader?: AgnosticNonIndexRouteObject[\"loader\"];\n  action?: AgnosticNonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: AgnosticNonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: AgnosticNonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: AgnosticNonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: RouteObject[];\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteObject = IndexRouteObject | NonIndexRouteObject;\n\nexport type DataRouteObject = RouteObject & {\n  children?: DataRouteObject[];\n  id: string;\n};\n\nexport interface RouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends RouteObject = RouteObject\n> extends AgnosticRouteMatch<ParamKey, RouteObjectType> {}\n\nexport interface DataRouteMatch extends RouteMatch<string, DataRouteObject> {}\n\n// Contexts for data routers\nexport const DataStaticRouterContext =\n  React.createContext<StaticHandlerContext | null>(null);\nif (__DEV__) {\n  DataStaticRouterContext.displayName = \"DataStaticRouterContext\";\n}\n\nexport interface DataRouterContextObject extends NavigationContextObject {\n  router: Router;\n}\n\nexport const DataRouterContext =\n  React.createContext<DataRouterContextObject | null>(null);\nif (__DEV__) {\n  DataRouterContext.displayName = \"DataRouter\";\n}\n\nexport const DataRouterStateContext = React.createContext<\n  Router[\"state\"] | null\n>(null);\nif (__DEV__) {\n  DataRouterStateContext.displayName = \"DataRouterState\";\n}\n\nexport const AwaitContext = React.createContext<TrackedPromise | null>(null);\nif (__DEV__) {\n  AwaitContext.displayName = \"Await\";\n}\n\nexport type RelativeRoutingType = \"route\" | \"path\";\n\nexport interface NavigateOptions {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * A Navigator is a \"location changer\"; it's how you get to different locations.\n *\n * Every history instance conforms to the Navigator interface, but the\n * distinction is useful primarily when it comes to the low-level <Router> API\n * where both the location and a navigator must be provided separately in order\n * to avoid \"tearing\" that may occur in a suspense-enabled app if the action\n * and/or location were to be read directly from the history instance.\n */\nexport interface Navigator {\n  createHref: History[\"createHref\"];\n  // Optional for backwards-compat with Router/HistoryRouter usage (edge case)\n  encodeLocation?: History[\"encodeLocation\"];\n  go: History[\"go\"];\n  push(to: To, state?: any, opts?: NavigateOptions): void;\n  replace(to: To, state?: any, opts?: NavigateOptions): void;\n}\n\ninterface NavigationContextObject {\n  basename: string;\n  navigator: Navigator;\n  static: boolean;\n}\n\nexport const NavigationContext = React.createContext<NavigationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  NavigationContext.displayName = \"Navigation\";\n}\n\ninterface LocationContextObject {\n  location: Location;\n  navigationType: NavigationType;\n}\n\nexport const LocationContext = React.createContext<LocationContextObject>(\n  null!\n);\n\nif (__DEV__) {\n  LocationContext.displayName = \"Location\";\n}\n\nexport interface RouteContextObject {\n  outlet: React.ReactElement | null;\n  matches: RouteMatch[];\n}\n\nexport const RouteContext = React.createContext<RouteContextObject>({\n  outlet: null,\n  matches: [],\n});\n\nif (__DEV__) {\n  RouteContext.displayName = \"Route\";\n}\n\nexport const RouteErrorContext = React.createContext<any>(null);\n\nif (__DEV__) {\n  RouteErrorContext.displayName = \"RouteError\";\n}\n","import * as React from \"react\";\nimport type {\n  Location,\n  ParamParseKey,\n  Params,\n  Path,\n  PathMatch,\n  PathPattern,\n  Router as RemixRouter,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  resolveTo,\n  warning,\n  UNSAFE_getPathContributingMatches as getPathContributingMatches,\n} from \"@remix-run/router\";\n\nimport type {\n  NavigateOptions,\n  RouteContextObject,\n  RouteMatch,\n  RouteObject,\n  DataRouteMatch,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n  RouteErrorContext,\n  AwaitContext,\n  DataStaticRouterContext,\n} from \"./context\";\n\n/**\n * Returns the full href for the given \"to\" value. This is useful for building\n * custom links that are also accessible and preserve right-click behavior.\n *\n * @see https://reactrouter.com/hooks/use-href\n */\nexport function useHref(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): string {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useHref() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { hash, pathname, search } = useResolvedPath(to, { relative });\n\n  let joinedPathname = pathname;\n\n  // If we're operating within a basename, prepend it to the pathname prior\n  // to creating the href.  If this is a root navigation, then just use the raw\n  // basename which allows the basename to have full control over the presence\n  // of a trailing slash on root links\n  if (basename !== \"/\") {\n    joinedPathname =\n      pathname === \"/\" ? basename : joinPaths([basename, pathname]);\n  }\n\n  return navigator.createHref({ pathname: joinedPathname, search, hash });\n}\n\n/**\n * Returns true if this component is a descendant of a <Router>.\n *\n * @see https://reactrouter.com/hooks/use-in-router-context\n */\nexport function useInRouterContext(): boolean {\n  return React.useContext(LocationContext) != null;\n}\n\n/**\n * Returns the current location object, which represents the current URL in web\n * browsers.\n *\n * Note: If you're using this it may mean you're doing some of your own\n * \"routing\" in your app, and we'd like to know what your use case is. We may\n * be able to provide something higher-level to better suit your needs.\n *\n * @see https://reactrouter.com/hooks/use-location\n */\nexport function useLocation(): Location {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useLocation() may be used only in the context of a <Router> component.`\n  );\n\n  return React.useContext(LocationContext).location;\n}\n\n/**\n * Returns the current navigation action which describes how the router came to\n * the current location, either by a pop, push, or replace on the history stack.\n *\n * @see https://reactrouter.com/hooks/use-navigation-type\n */\nexport function useNavigationType(): NavigationType {\n  return React.useContext(LocationContext).navigationType;\n}\n\n/**\n * Returns a PathMatch object if the given pattern matches the current URL.\n * This is useful for components that need to know \"active\" state, e.g.\n * <NavLink>.\n *\n * @see https://reactrouter.com/hooks/use-match\n */\nexport function useMatch<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(pattern: PathPattern<Path> | Path): PathMatch<ParamKey> | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useMatch() may be used only in the context of a <Router> component.`\n  );\n\n  let { pathname } = useLocation();\n  return React.useMemo(\n    () => matchPath<ParamKey, Path>(pattern, pathname),\n    [pathname, pattern]\n  );\n}\n\n/**\n * The interface for the navigate() function returned from useNavigate().\n */\nexport interface NavigateFunction {\n  (to: To, options?: NavigateOptions): void;\n  (delta: number): void;\n}\n\n/**\n * Returns an imperative method for changing the location. Used by <Link>s, but\n * may also be used by other elements to change the location.\n *\n * @see https://reactrouter.com/hooks/use-navigate\n */\nexport function useNavigate(): NavigateFunction {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useNavigate() may be used only in the context of a <Router> component.`\n  );\n\n  let { basename, navigator } = React.useContext(NavigationContext);\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  let activeRef = React.useRef(false);\n  React.useEffect(() => {\n    activeRef.current = true;\n  });\n\n  let navigate: NavigateFunction = React.useCallback(\n    (to: To | number, options: NavigateOptions = {}) => {\n      warning(\n        activeRef.current,\n        `You should call navigate() in a React.useEffect(), not when ` +\n          `your component is first rendered.`\n      );\n\n      if (!activeRef.current) return;\n\n      if (typeof to === \"number\") {\n        navigator.go(to);\n        return;\n      }\n\n      let path = resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        options.relative === \"path\"\n      );\n\n      // If we're operating within a basename, prepend it to the pathname prior\n      // to handing off to history.  If this is a root navigation, then we\n      // navigate to the raw basename which allows the basename to have full\n      // control over the presence of a trailing slash on root links\n      if (basename !== \"/\") {\n        path.pathname =\n          path.pathname === \"/\"\n            ? basename\n            : joinPaths([basename, path.pathname]);\n      }\n\n      (!!options.replace ? navigator.replace : navigator.push)(\n        path,\n        options.state,\n        options\n      );\n    },\n    [basename, navigator, routePathnamesJson, locationPathname]\n  );\n\n  return navigate;\n}\n\nconst OutletContext = React.createContext<unknown>(null);\n\n/**\n * Returns the context (if provided) for the child route at this level of the route\n * hierarchy.\n * @see https://reactrouter.com/hooks/use-outlet-context\n */\nexport function useOutletContext<Context = unknown>(): Context {\n  return React.useContext(OutletContext) as Context;\n}\n\n/**\n * Returns the element for the child route at this level of the route\n * hierarchy. Used internally by <Outlet> to render child routes.\n *\n * @see https://reactrouter.com/hooks/use-outlet\n */\nexport function useOutlet(context?: unknown): React.ReactElement | null {\n  let outlet = React.useContext(RouteContext).outlet;\n  if (outlet) {\n    return (\n      <OutletContext.Provider value={context}>{outlet}</OutletContext.Provider>\n    );\n  }\n  return outlet;\n}\n\n/**\n * Returns an object of key/value pairs of the dynamic params from the current\n * URL that were matched by the route path.\n *\n * @see https://reactrouter.com/hooks/use-params\n */\nexport function useParams<\n  ParamsOrKey extends string | Record<string, string | undefined> = string\n>(): Readonly<\n  [ParamsOrKey] extends [string] ? Params<ParamsOrKey> : Partial<ParamsOrKey>\n> {\n  let { matches } = React.useContext(RouteContext);\n  let routeMatch = matches[matches.length - 1];\n  return routeMatch ? (routeMatch.params as any) : {};\n}\n\n/**\n * Resolves the pathname of the given `to` value against the current location.\n *\n * @see https://reactrouter.com/hooks/use-resolved-path\n */\nexport function useResolvedPath(\n  to: To,\n  { relative }: { relative?: RelativeRoutingType } = {}\n): Path {\n  let { matches } = React.useContext(RouteContext);\n  let { pathname: locationPathname } = useLocation();\n\n  let routePathnamesJson = JSON.stringify(\n    getPathContributingMatches(matches).map((match) => match.pathnameBase)\n  );\n\n  return React.useMemo(\n    () =>\n      resolveTo(\n        to,\n        JSON.parse(routePathnamesJson),\n        locationPathname,\n        relative === \"path\"\n      ),\n    [to, routePathnamesJson, locationPathname, relative]\n  );\n}\n\n/**\n * Returns the element of the route that matched the current location, prepared\n * with the correct context to render the remainder of the route tree. Route\n * elements in the tree must render an <Outlet> to render their child route's\n * element.\n *\n * @see https://reactrouter.com/hooks/use-routes\n */\nexport function useRoutes(\n  routes: RouteObject[],\n  locationArg?: Partial<Location> | string\n): React.ReactElement | null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of the\n    // router loaded. We can help them understand how to avoid that.\n    `useRoutes() may be used only in the context of a <Router> component.`\n  );\n\n  let { navigator } = React.useContext(NavigationContext);\n  let dataRouterStateContext = React.useContext(DataRouterStateContext);\n  let { matches: parentMatches } = React.useContext(RouteContext);\n  let routeMatch = parentMatches[parentMatches.length - 1];\n  let parentParams = routeMatch ? routeMatch.params : {};\n  let parentPathname = routeMatch ? routeMatch.pathname : \"/\";\n  let parentPathnameBase = routeMatch ? routeMatch.pathnameBase : \"/\";\n  let parentRoute = routeMatch && routeMatch.route;\n\n  if (__DEV__) {\n    // You won't get a warning about 2 different <Routes> under a <Route>\n    // without a trailing *, but this is a best-effort warning anyway since we\n    // cannot even give the warning unless they land at the parent route.\n    //\n    // Example:\n    //\n    // <Routes>\n    //   {/* This route path MUST end with /* because otherwise\n    //       it will never match /blog/post/123 */}\n    //   <Route path=\"blog\" element={<Blog />} />\n    //   <Route path=\"blog/feed\" element={<BlogFeed />} />\n    // </Routes>\n    //\n    // function Blog() {\n    //   return (\n    //     <Routes>\n    //       <Route path=\"post/:id\" element={<Post />} />\n    //     </Routes>\n    //   );\n    // }\n    let parentPath = (parentRoute && parentRoute.path) || \"\";\n    warningOnce(\n      parentPathname,\n      !parentRoute || parentPath.endsWith(\"*\"),\n      `You rendered descendant <Routes> (or called \\`useRoutes()\\`) at ` +\n        `\"${parentPathname}\" (under <Route path=\"${parentPath}\">) but the ` +\n        `parent route path has no trailing \"*\". This means if you navigate ` +\n        `deeper, the parent won't match anymore and therefore the child ` +\n        `routes will never render.\\n\\n` +\n        `Please change the parent <Route path=\"${parentPath}\"> to <Route ` +\n        `path=\"${parentPath === \"/\" ? \"*\" : `${parentPath}/*`}\">.`\n    );\n  }\n\n  let locationFromContext = useLocation();\n\n  let location;\n  if (locationArg) {\n    let parsedLocationArg =\n      typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n    invariant(\n      parentPathnameBase === \"/\" ||\n        parsedLocationArg.pathname?.startsWith(parentPathnameBase),\n      `When overriding the location using \\`<Routes location>\\` or \\`useRoutes(routes, location)\\`, ` +\n        `the location pathname must begin with the portion of the URL pathname that was ` +\n        `matched by all parent routes. The current pathname base is \"${parentPathnameBase}\" ` +\n        `but pathname \"${parsedLocationArg.pathname}\" was given in the \\`location\\` prop.`\n    );\n\n    location = parsedLocationArg;\n  } else {\n    location = locationFromContext;\n  }\n\n  let pathname = location.pathname || \"/\";\n  let remainingPathname =\n    parentPathnameBase === \"/\"\n      ? pathname\n      : pathname.slice(parentPathnameBase.length) || \"/\";\n\n  let matches = matchRoutes(routes, { pathname: remainingPathname });\n\n  if (__DEV__) {\n    warning(\n      parentRoute || matches != null,\n      `No routes matched location \"${location.pathname}${location.search}${location.hash}\" `\n    );\n\n    warning(\n      matches == null ||\n        matches[matches.length - 1].route.element !== undefined,\n      `Matched leaf route at location \"${location.pathname}${location.search}${location.hash}\" does not have an element. ` +\n        `This means it will render an <Outlet /> with a null value by default resulting in an \"empty\" page.`\n    );\n  }\n\n  let renderedMatches = _renderMatches(\n    matches &&\n      matches.map((match) =>\n        Object.assign({}, match, {\n          params: Object.assign({}, parentParams, match.params),\n          pathname: joinPaths([\n            parentPathnameBase,\n            // Re-encode pathnames that were decoded inside matchRoutes\n            navigator.encodeLocation\n              ? navigator.encodeLocation(match.pathname).pathname\n              : match.pathname,\n          ]),\n          pathnameBase:\n            match.pathnameBase === \"/\"\n              ? parentPathnameBase\n              : joinPaths([\n                  parentPathnameBase,\n                  // Re-encode pathnames that were decoded inside matchRoutes\n                  navigator.encodeLocation\n                    ? navigator.encodeLocation(match.pathnameBase).pathname\n                    : match.pathnameBase,\n                ]),\n        })\n      ),\n    parentMatches,\n    dataRouterStateContext || undefined\n  );\n\n  // When a user passes in a `locationArg`, the associated routes need to\n  // be wrapped in a new `LocationContext.Provider` in order for `useLocation`\n  // to use the scoped location instead of the global location.\n  if (locationArg && renderedMatches) {\n    return (\n      <LocationContext.Provider\n        value={{\n          location: {\n            pathname: \"/\",\n            search: \"\",\n            hash: \"\",\n            state: null,\n            key: \"default\",\n            ...location,\n          },\n          navigationType: NavigationType.Pop,\n        }}\n      >\n        {renderedMatches}\n      </LocationContext.Provider>\n    );\n  }\n\n  return renderedMatches;\n}\n\nfunction DefaultErrorElement() {\n  let error = useRouteError();\n  let message = isRouteErrorResponse(error)\n    ? `${error.status} ${error.statusText}`\n    : error instanceof Error\n    ? error.message\n    : JSON.stringify(error);\n  let stack = error instanceof Error ? error.stack : null;\n  let lightgrey = \"rgba(200,200,200, 0.5)\";\n  let preStyles = { padding: \"0.5rem\", backgroundColor: lightgrey };\n  let codeStyles = { padding: \"2px 4px\", backgroundColor: lightgrey };\n  return (\n    <>\n      <h2>Unhandled Thrown Error!</h2>\n      <h3 style={{ fontStyle: \"italic\" }}>{message}</h3>\n      {stack ? <pre style={preStyles}>{stack}</pre> : null}\n      <p>💿 Hey developer 👋</p>\n      <p>\n        You can provide a way better UX than this when your app throws errors by\n        providing your own&nbsp;\n        <code style={codeStyles}>errorElement</code> props on&nbsp;\n        <code style={codeStyles}>&lt;Route&gt;</code>\n      </p>\n    </>\n  );\n}\n\ntype RenderErrorBoundaryProps = React.PropsWithChildren<{\n  location: Location;\n  error: any;\n  component: React.ReactNode;\n  routeContext: RouteContextObject;\n}>;\n\ntype RenderErrorBoundaryState = {\n  location: Location;\n  error: any;\n};\n\nexport class RenderErrorBoundary extends React.Component<\n  RenderErrorBoundaryProps,\n  RenderErrorBoundaryState\n> {\n  constructor(props: RenderErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      location: props.location,\n      error: props.error,\n    };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error: error };\n  }\n\n  static getDerivedStateFromProps(\n    props: RenderErrorBoundaryProps,\n    state: RenderErrorBoundaryState\n  ) {\n    // When we get into an error state, the user will likely click \"back\" to the\n    // previous page that didn't have an error. Because this wraps the entire\n    // application, that will have no effect--the error page continues to display.\n    // This gives us a mechanism to recover from the error when the location changes.\n    //\n    // Whether we're in an error state or not, we update the location in state\n    // so that when we are in an error state, it gets reset when a new location\n    // comes in and the user recovers from the error.\n    if (state.location !== props.location) {\n      return {\n        error: props.error,\n        location: props.location,\n      };\n    }\n\n    // If we're not changing locations, preserve the location but still surface\n    // any new errors that may come through. We retain the existing error, we do\n    // this because the error provided from the app state may be cleared without\n    // the location changing.\n    return {\n      error: props.error || state.error,\n      location: state.location,\n    };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"React Router caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    return this.state.error ? (\n      <RouteContext.Provider value={this.props.routeContext}>\n        <RouteErrorContext.Provider\n          value={this.state.error}\n          children={this.props.component}\n        />\n      </RouteContext.Provider>\n    ) : (\n      this.props.children\n    );\n  }\n}\n\ninterface RenderedRouteProps {\n  routeContext: RouteContextObject;\n  match: RouteMatch<string, RouteObject>;\n  children: React.ReactNode | null;\n}\n\nfunction RenderedRoute({ routeContext, match, children }: RenderedRouteProps) {\n  let dataStaticRouterContext = React.useContext(DataStaticRouterContext);\n\n  // Track how deep we got in our render pass to emulate SSR componentDidCatch\n  // in a DataStaticRouter\n  if (dataStaticRouterContext && match.route.errorElement) {\n    dataStaticRouterContext._deepestRenderedBoundaryId = match.route.id;\n  }\n\n  return (\n    <RouteContext.Provider value={routeContext}>\n      {children}\n    </RouteContext.Provider>\n  );\n}\n\nexport function _renderMatches(\n  matches: RouteMatch[] | null,\n  parentMatches: RouteMatch[] = [],\n  dataRouterState?: RemixRouter[\"state\"]\n): React.ReactElement | null {\n  if (matches == null) {\n    if (dataRouterState?.errors) {\n      // Don't bail if we have data router errors so we can render them in the\n      // boundary.  Use the pre-matched (or shimmed) matches\n      matches = dataRouterState.matches as DataRouteMatch[];\n    } else {\n      return null;\n    }\n  }\n\n  let renderedMatches = matches;\n\n  // If we have data errors, trim matches to the highest error boundary\n  let errors = dataRouterState?.errors;\n  if (errors != null) {\n    let errorIndex = renderedMatches.findIndex(\n      (m) => m.route.id && errors?.[m.route.id]\n    );\n    invariant(\n      errorIndex >= 0,\n      `Could not find a matching route for the current errors: ${errors}`\n    );\n    renderedMatches = renderedMatches.slice(\n      0,\n      Math.min(renderedMatches.length, errorIndex + 1)\n    );\n  }\n\n  return renderedMatches.reduceRight((outlet, match, index) => {\n    let error = match.route.id ? errors?.[match.route.id] : null;\n    // Only data routers handle errors\n    let errorElement = dataRouterState\n      ? match.route.errorElement || <DefaultErrorElement />\n      : null;\n    let matches = parentMatches.concat(renderedMatches.slice(0, index + 1));\n    let getChildren = () => (\n      <RenderedRoute match={match} routeContext={{ outlet, matches }}>\n        {error\n          ? errorElement\n          : match.route.element !== undefined\n          ? match.route.element\n          : outlet}\n      </RenderedRoute>\n    );\n    // Only wrap in an error boundary within data router usages when we have an\n    // errorElement on this route.  Otherwise let it bubble up to an ancestor\n    // errorElement\n    return dataRouterState && (match.route.errorElement || index === 0) ? (\n      <RenderErrorBoundary\n        location={dataRouterState.location}\n        component={errorElement}\n        error={error}\n        children={getChildren()}\n        routeContext={{ outlet: null, matches }}\n      />\n    ) : (\n      getChildren()\n    );\n  }, null as React.ReactElement | null);\n}\n\nenum DataRouterHook {\n  UseRevalidator = \"useRevalidator\",\n}\n\nenum DataRouterStateHook {\n  UseLoaderData = \"useLoaderData\",\n  UseActionData = \"useActionData\",\n  UseRouteError = \"useRouteError\",\n  UseNavigation = \"useNavigation\",\n  UseRouteLoaderData = \"useRouteLoaderData\",\n  UseMatches = \"useMatches\",\n  UseRevalidator = \"useRevalidator\",\n}\n\nfunction getDataRouterConsoleError(\n  hookName: DataRouterHook | DataRouterStateHook\n) {\n  return `${hookName} must be used within a data router.  See https://reactrouter.com/routers/picking-a-router.`;\n}\n\nfunction useDataRouterContext(hookName: DataRouterHook) {\n  let ctx = React.useContext(DataRouterContext);\n  invariant(ctx, getDataRouterConsoleError(hookName));\n  return ctx;\n}\n\nfunction useDataRouterState(hookName: DataRouterStateHook) {\n  let state = React.useContext(DataRouterStateContext);\n  invariant(state, getDataRouterConsoleError(hookName));\n  return state;\n}\n\nfunction useRouteContext(hookName: DataRouterStateHook) {\n  let route = React.useContext(RouteContext);\n  invariant(route, getDataRouterConsoleError(hookName));\n  return route;\n}\n\nfunction useCurrentRouteId(hookName: DataRouterStateHook) {\n  let route = useRouteContext(hookName);\n  let thisRoute = route.matches[route.matches.length - 1];\n  invariant(\n    thisRoute.route.id,\n    `${hookName} can only be used on routes that contain a unique \"id\"`\n  );\n  return thisRoute.route.id;\n}\n\n/**\n * Returns the current navigation, defaulting to an \"idle\" navigation when\n * no navigation is in progress\n */\nexport function useNavigation() {\n  let state = useDataRouterState(DataRouterStateHook.UseNavigation);\n  return state.navigation;\n}\n\n/**\n * Returns a revalidate function for manually triggering revalidation, as well\n * as the current state of any manual revalidations\n */\nexport function useRevalidator() {\n  let dataRouterContext = useDataRouterContext(DataRouterHook.UseRevalidator);\n  let state = useDataRouterState(DataRouterStateHook.UseRevalidator);\n  return {\n    revalidate: dataRouterContext.router.revalidate,\n    state: state.revalidation,\n  };\n}\n\n/**\n * Returns the active route matches, useful for accessing loaderData for\n * parent/child routes or the route \"handle\" property\n */\nexport function useMatches() {\n  let { matches, loaderData } = useDataRouterState(\n    DataRouterStateHook.UseMatches\n  );\n  return React.useMemo(\n    () =>\n      matches.map((match) => {\n        let { pathname, params } = match;\n        // Note: This structure matches that created by createUseMatchesMatch\n        // in the @remix-run/router , so if you change this please also change\n        // that :)  Eventually we'll DRY this up\n        return {\n          id: match.route.id,\n          pathname,\n          params,\n          data: loaderData[match.route.id] as unknown,\n          handle: match.route.handle as unknown,\n        };\n      }),\n    [matches, loaderData]\n  );\n}\n\n/**\n * Returns the loader data for the nearest ancestor Route loader\n */\nexport function useLoaderData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseLoaderData);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseLoaderData);\n\n  if (state.errors && state.errors[routeId] != null) {\n    console.error(\n      `You cannot \\`useLoaderData\\` in an errorElement (routeId: ${routeId})`\n    );\n    return undefined;\n  }\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the loaderData for the given routeId\n */\nexport function useRouteLoaderData(routeId: string): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseRouteLoaderData);\n  return state.loaderData[routeId];\n}\n\n/**\n * Returns the action data for the nearest ancestor Route action\n */\nexport function useActionData(): unknown {\n  let state = useDataRouterState(DataRouterStateHook.UseActionData);\n\n  let route = React.useContext(RouteContext);\n  invariant(route, `useActionData must be used inside a RouteContext`);\n\n  return Object.values(state?.actionData || {})[0];\n}\n\n/**\n * Returns the nearest ancestor Route error, which could be a loader/action\n * error or a render error.  This is intended to be called from your\n * errorElement to display a proper error message.\n */\nexport function useRouteError(): unknown {\n  let error = React.useContext(RouteErrorContext);\n  let state = useDataRouterState(DataRouterStateHook.UseRouteError);\n  let routeId = useCurrentRouteId(DataRouterStateHook.UseRouteError);\n\n  // If this was a render error, we put it in a RouteError context inside\n  // of RenderErrorBoundary\n  if (error) {\n    return error;\n  }\n\n  // Otherwise look for errors from our data router state\n  return state.errors?.[routeId];\n}\n\n/**\n * Returns the happy-path data from the nearest ancestor <Await /> value\n */\nexport function useAsyncValue(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._data;\n}\n\n/**\n * Returns the error from the nearest ancestor <Await /> value\n */\nexport function useAsyncError(): unknown {\n  let value = React.useContext(AwaitContext);\n  return value?._error;\n}\n\nconst alreadyWarned: Record<string, boolean> = {};\n\nfunction warningOnce(key: string, cond: boolean, message: string) {\n  if (!cond && !alreadyWarned[key]) {\n    alreadyWarned[key] = true;\n    warning(false, message);\n  }\n}\n","import * as React from \"react\";\nimport type {\n  TrackedPromise,\n  InitialEntry,\n  Location,\n  MemoryHistory,\n  Router as RemixRouter,\n  RouterState,\n  To,\n} from \"@remix-run/router\";\nimport {\n  Action as NavigationType,\n  AbortedDeferredError,\n  createMemoryHistory,\n  invariant,\n  parsePath,\n  stripBasename,\n  warning,\n} from \"@remix-run/router\";\nimport { useSyncExternalStore as useSyncExternalStoreShim } from \"./use-sync-external-store-shim\";\n\nimport type {\n  DataRouteObject,\n  IndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  Navigator,\n  NonIndexRouteObject,\n  RelativeRoutingType,\n} from \"./context\";\nimport {\n  LocationContext,\n  NavigationContext,\n  DataRouterContext,\n  DataRouterStateContext,\n  AwaitContext,\n} from \"./context\";\nimport {\n  useAsyncValue,\n  useInRouterContext,\n  useNavigate,\n  useOutlet,\n  useRoutes,\n  _renderMatches,\n} from \"./hooks\";\n\nexport interface RouterProviderProps {\n  fallbackElement?: React.ReactNode;\n  router: RemixRouter;\n}\n\n/**\n * Given a Remix Router instance, render the appropriate UI\n */\nexport function RouterProvider({\n  fallbackElement,\n  router,\n}: RouterProviderProps): React.ReactElement {\n  // Sync router state to our component state to force re-renders\n  let state: RouterState = useSyncExternalStoreShim(\n    router.subscribe,\n    () => router.state,\n    // We have to provide this so React@18 doesn't complain during hydration,\n    // but we pass our serialized hydration data into the router so state here\n    // is already synced with what the server saw\n    () => router.state\n  );\n\n  let navigator = React.useMemo((): Navigator => {\n    return {\n      createHref: router.createHref,\n      encodeLocation: router.encodeLocation,\n      go: (n) => router.navigate(n),\n      push: (to, state, opts) =>\n        router.navigate(to, {\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n      replace: (to, state, opts) =>\n        router.navigate(to, {\n          replace: true,\n          state,\n          preventScrollReset: opts?.preventScrollReset,\n        }),\n    };\n  }, [router]);\n\n  let basename = router.basename || \"/\";\n\n  return (\n    <DataRouterContext.Provider\n      value={{\n        router,\n        navigator,\n        static: false,\n        // Do we need this?\n        basename,\n      }}\n    >\n      <DataRouterStateContext.Provider value={state}>\n        <Router\n          basename={router.basename}\n          location={router.state.location}\n          navigationType={router.state.historyAction}\n          navigator={navigator}\n        >\n          {router.state.initialized ? <Routes /> : fallbackElement}\n        </Router>\n      </DataRouterStateContext.Provider>\n    </DataRouterContext.Provider>\n  );\n}\n\nexport interface MemoryRouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n}\n\n/**\n * A <Router> that stores all entries in memory.\n *\n * @see https://reactrouter.com/router-components/memory-router\n */\nexport function MemoryRouter({\n  basename,\n  children,\n  initialEntries,\n  initialIndex,\n}: MemoryRouterProps): React.ReactElement {\n  let historyRef = React.useRef<MemoryHistory>();\n  if (historyRef.current == null) {\n    historyRef.current = createMemoryHistory({\n      initialEntries,\n      initialIndex,\n      v5Compat: true,\n    });\n  }\n\n  let history = historyRef.current;\n  let [state, setState] = React.useState({\n    action: history.action,\n    location: history.location,\n  });\n\n  React.useLayoutEffect(() => history.listen(setState), [history]);\n\n  return (\n    <Router\n      basename={basename}\n      children={children}\n      location={state.location}\n      navigationType={state.action}\n      navigator={history}\n    />\n  );\n}\n\nexport interface NavigateProps {\n  to: To;\n  replace?: boolean;\n  state?: any;\n  relative?: RelativeRoutingType;\n}\n\n/**\n * Changes the current location.\n *\n * Note: This API is mostly useful in React.Component subclasses that are not\n * able to use hooks. In functional components, we recommend you use the\n * `useNavigate` hook instead.\n *\n * @see https://reactrouter.com/components/navigate\n */\nexport function Navigate({\n  to,\n  replace,\n  state,\n  relative,\n}: NavigateProps): null {\n  invariant(\n    useInRouterContext(),\n    // TODO: This error is probably because they somehow have 2 versions of\n    // the router loaded. We can help them understand how to avoid that.\n    `<Navigate> may be used only in the context of a <Router> component.`\n  );\n\n  warning(\n    !React.useContext(NavigationContext).static,\n    `<Navigate> must not be used on the initial render in a <StaticRouter>. ` +\n      `This is a no-op, but you should modify your code so the <Navigate> is ` +\n      `only ever rendered in response to some user interaction or state change.`\n  );\n\n  let dataRouterState = React.useContext(DataRouterStateContext);\n  let navigate = useNavigate();\n\n  React.useEffect(() => {\n    // Avoid kicking off multiple navigations if we're in the middle of a\n    // data-router navigation, since components get re-rendered when we enter\n    // a submitting/loading state\n    if (dataRouterState && dataRouterState.navigation.state !== \"idle\") {\n      return;\n    }\n    navigate(to, { replace, state, relative });\n  });\n\n  return null;\n}\n\nexport interface OutletProps {\n  context?: unknown;\n}\n\n/**\n * Renders the child route's element, if there is one.\n *\n * @see https://reactrouter.com/components/outlet\n */\nexport function Outlet(props: OutletProps): React.ReactElement | null {\n  return useOutlet(props.context);\n}\n\nexport interface PathRouteProps {\n  caseSensitive?: NonIndexRouteObject[\"caseSensitive\"];\n  path?: NonIndexRouteObject[\"path\"];\n  id?: NonIndexRouteObject[\"id\"];\n  loader?: NonIndexRouteObject[\"loader\"];\n  action?: NonIndexRouteObject[\"action\"];\n  hasErrorBoundary?: NonIndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: NonIndexRouteObject[\"shouldRevalidate\"];\n  handle?: NonIndexRouteObject[\"handle\"];\n  index?: false;\n  children?: React.ReactNode;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport interface LayoutRouteProps extends PathRouteProps {}\n\nexport interface IndexRouteProps {\n  caseSensitive?: IndexRouteObject[\"caseSensitive\"];\n  path?: IndexRouteObject[\"path\"];\n  id?: IndexRouteObject[\"id\"];\n  loader?: IndexRouteObject[\"loader\"];\n  action?: IndexRouteObject[\"action\"];\n  hasErrorBoundary?: IndexRouteObject[\"hasErrorBoundary\"];\n  shouldRevalidate?: IndexRouteObject[\"shouldRevalidate\"];\n  handle?: IndexRouteObject[\"handle\"];\n  index: true;\n  children?: undefined;\n  element?: React.ReactNode | null;\n  errorElement?: React.ReactNode | null;\n}\n\nexport type RouteProps = PathRouteProps | LayoutRouteProps | IndexRouteProps;\n\n/**\n * Declares an element that should be rendered at a certain URL path.\n *\n * @see https://reactrouter.com/components/route\n */\nexport function Route(_props: RouteProps): React.ReactElement | null {\n  invariant(\n    false,\n    `A <Route> is only ever to be used as the child of <Routes> element, ` +\n      `never rendered directly. Please wrap your <Route> in a <Routes>.`\n  );\n}\n\nexport interface RouterProps {\n  basename?: string;\n  children?: React.ReactNode;\n  location: Partial<Location> | string;\n  navigationType?: NavigationType;\n  navigator: Navigator;\n  static?: boolean;\n}\n\n/**\n * Provides location context for the rest of the app.\n *\n * Note: You usually won't render a <Router> directly. Instead, you'll render a\n * router that is more specific to your environment such as a <BrowserRouter>\n * in web browsers or a <StaticRouter> for server rendering.\n *\n * @see https://reactrouter.com/router-components/router\n */\nexport function Router({\n  basename: basenameProp = \"/\",\n  children = null,\n  location: locationProp,\n  navigationType = NavigationType.Pop,\n  navigator,\n  static: staticProp = false,\n}: RouterProps): React.ReactElement | null {\n  invariant(\n    !useInRouterContext(),\n    `You cannot render a <Router> inside another <Router>.` +\n      ` You should never have more than one in your app.`\n  );\n\n  // Preserve trailing slashes on basename, so we can let the user control\n  // the enforcement of trailing slashes throughout the app\n  let basename = basenameProp.replace(/^\\/*/, \"/\");\n  let navigationContext = React.useMemo(\n    () => ({ basename, navigator, static: staticProp }),\n    [basename, navigator, staticProp]\n  );\n\n  if (typeof locationProp === \"string\") {\n    locationProp = parsePath(locationProp);\n  }\n\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\",\n    state = null,\n    key = \"default\",\n  } = locationProp;\n\n  let location = React.useMemo(() => {\n    let trailingPathname = stripBasename(pathname, basename);\n\n    if (trailingPathname == null) {\n      return null;\n    }\n\n    return {\n      pathname: trailingPathname,\n      search,\n      hash,\n      state,\n      key,\n    };\n  }, [basename, pathname, search, hash, state, key]);\n\n  warning(\n    location != null,\n    `<Router basename=\"${basename}\"> is not able to match the URL ` +\n      `\"${pathname}${search}${hash}\" because it does not start with the ` +\n      `basename, so the <Router> won't render anything.`\n  );\n\n  if (location == null) {\n    return null;\n  }\n\n  return (\n    <NavigationContext.Provider value={navigationContext}>\n      <LocationContext.Provider\n        children={children}\n        value={{ location, navigationType }}\n      />\n    </NavigationContext.Provider>\n  );\n}\n\nexport interface RoutesProps {\n  children?: React.ReactNode;\n  location?: Partial<Location> | string;\n}\n\n/**\n * A container for a nested tree of <Route> elements that renders the branch\n * that best matches the current location.\n *\n * @see https://reactrouter.com/components/routes\n */\nexport function Routes({\n  children,\n  location,\n}: RoutesProps): React.ReactElement | null {\n  let dataRouterContext = React.useContext(DataRouterContext);\n  // When in a DataRouterContext _without_ children, we use the router routes\n  // directly.  If we have children, then we're in a descendant tree and we\n  // need to use child routes.\n  let routes =\n    dataRouterContext && !children\n      ? (dataRouterContext.router.routes as DataRouteObject[])\n      : createRoutesFromChildren(children);\n  return useRoutes(routes, location);\n}\n\nexport interface AwaitResolveRenderFunction {\n  (data: Awaited<any>): React.ReactElement;\n}\n\nexport interface AwaitProps {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}\n\n/**\n * Component to use for rendering lazily loaded data from returning defer()\n * in a loader function\n */\nexport function Await({ children, errorElement, resolve }: AwaitProps) {\n  return (\n    <AwaitErrorBoundary resolve={resolve} errorElement={errorElement}>\n      <ResolveAwait>{children}</ResolveAwait>\n    </AwaitErrorBoundary>\n  );\n}\n\ntype AwaitErrorBoundaryProps = React.PropsWithChildren<{\n  errorElement?: React.ReactNode;\n  resolve: TrackedPromise | any;\n}>;\n\ntype AwaitErrorBoundaryState = {\n  error: any;\n};\n\nenum AwaitRenderStatus {\n  pending,\n  success,\n  error,\n}\n\nconst neverSettledPromise = new Promise(() => {});\n\nclass AwaitErrorBoundary extends React.Component<\n  AwaitErrorBoundaryProps,\n  AwaitErrorBoundaryState\n> {\n  constructor(props: AwaitErrorBoundaryProps) {\n    super(props);\n    this.state = { error: null };\n  }\n\n  static getDerivedStateFromError(error: any) {\n    return { error };\n  }\n\n  componentDidCatch(error: any, errorInfo: any) {\n    console.error(\n      \"<Await> caught the following error during render\",\n      error,\n      errorInfo\n    );\n  }\n\n  render() {\n    let { children, errorElement, resolve } = this.props;\n\n    let promise: TrackedPromise | null = null;\n    let status: AwaitRenderStatus = AwaitRenderStatus.pending;\n\n    if (!(resolve instanceof Promise)) {\n      // Didn't get a promise - provide as a resolved promise\n      status = AwaitRenderStatus.success;\n      promise = Promise.resolve();\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_data\", { get: () => resolve });\n    } else if (this.state.error) {\n      // Caught a render error, provide it as a rejected promise\n      status = AwaitRenderStatus.error;\n      let renderError = this.state.error;\n      promise = Promise.reject().catch(() => {}); // Avoid unhandled rejection warnings\n      Object.defineProperty(promise, \"_tracked\", { get: () => true });\n      Object.defineProperty(promise, \"_error\", { get: () => renderError });\n    } else if ((resolve as TrackedPromise)._tracked) {\n      // Already tracked promise - check contents\n      promise = resolve;\n      status =\n        promise._error !== undefined\n          ? AwaitRenderStatus.error\n          : promise._data !== undefined\n          ? AwaitRenderStatus.success\n          : AwaitRenderStatus.pending;\n    } else {\n      // Raw (untracked) promise - track it\n      status = AwaitRenderStatus.pending;\n      Object.defineProperty(resolve, \"_tracked\", { get: () => true });\n      promise = resolve.then(\n        (data: any) =>\n          Object.defineProperty(resolve, \"_data\", { get: () => data }),\n        (error: any) =>\n          Object.defineProperty(resolve, \"_error\", { get: () => error })\n      );\n    }\n\n    if (\n      status === AwaitRenderStatus.error &&\n      promise._error instanceof AbortedDeferredError\n    ) {\n      // Freeze the UI by throwing a never resolved promise\n      throw neverSettledPromise;\n    }\n\n    if (status === AwaitRenderStatus.error && !errorElement) {\n      // No errorElement, throw to the nearest route-level error boundary\n      throw promise._error;\n    }\n\n    if (status === AwaitRenderStatus.error) {\n      // Render via our errorElement\n      return <AwaitContext.Provider value={promise} children={errorElement} />;\n    }\n\n    if (status === AwaitRenderStatus.success) {\n      // Render children with resolved value\n      return <AwaitContext.Provider value={promise} children={children} />;\n    }\n\n    // Throw to the suspense boundary\n    throw promise;\n  }\n}\n\n/**\n * @private\n * Indirection to leverage useAsyncValue for a render-prop API on <Await>\n */\nfunction ResolveAwait({\n  children,\n}: {\n  children: React.ReactNode | AwaitResolveRenderFunction;\n}) {\n  let data = useAsyncValue();\n  if (typeof children === \"function\") {\n    return children(data);\n  }\n  return <>{children}</>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// UTILS\n///////////////////////////////////////////////////////////////////////////////\n\n/**\n * Creates a route config from a React \"children\" object, which is usually\n * either a `<Route>` element or an array of them. Used internally by\n * `<Routes>` to create a route config from its children.\n *\n * @see https://reactrouter.com/utils/create-routes-from-children\n */\nexport function createRoutesFromChildren(\n  children: React.ReactNode,\n  parentPath: number[] = []\n): RouteObject[] {\n  let routes: RouteObject[] = [];\n\n  React.Children.forEach(children, (element, index) => {\n    if (!React.isValidElement(element)) {\n      // Ignore non-elements. This allows people to more easily inline\n      // conditionals in their route config.\n      return;\n    }\n\n    if (element.type === React.Fragment) {\n      // Transparently support React.Fragment and its children.\n      routes.push.apply(\n        routes,\n        createRoutesFromChildren(element.props.children, parentPath)\n      );\n      return;\n    }\n\n    invariant(\n      element.type === Route,\n      `[${\n        typeof element.type === \"string\" ? element.type : element.type.name\n      }] is not a <Route> component. All component children of <Routes> must be a <Route> or <React.Fragment>`\n    );\n\n    invariant(\n      !element.props.index || !element.props.children,\n      \"An index route cannot have child routes.\"\n    );\n\n    let treePath = [...parentPath, index];\n    let route: RouteObject = {\n      id: element.props.id || treePath.join(\"-\"),\n      caseSensitive: element.props.caseSensitive,\n      element: element.props.element,\n      index: element.props.index,\n      path: element.props.path,\n      loader: element.props.loader,\n      action: element.props.action,\n      errorElement: element.props.errorElement,\n      hasErrorBoundary: element.props.errorElement != null,\n      shouldRevalidate: element.props.shouldRevalidate,\n      handle: element.props.handle,\n    };\n\n    if (element.props.children) {\n      route.children = createRoutesFromChildren(\n        element.props.children,\n        treePath\n      );\n    }\n\n    routes.push(route);\n  });\n\n  return routes;\n}\n\n/**\n * Renders the result of `matchRoutes()` into a React element.\n */\nexport function renderMatches(\n  matches: RouteMatch[] | null\n): React.ReactElement | null {\n  return _renderMatches(matches);\n}\n\n/**\n * @private\n * Walk the route tree and add hasErrorBoundary if it's not provided, so that\n * users providing manual route arrays can just specify errorElement\n */\nexport function enhanceManualRouteObjects(\n  routes: RouteObject[]\n): RouteObject[] {\n  return routes.map((route) => {\n    let routeClone = { ...route };\n    if (routeClone.hasErrorBoundary == null) {\n      routeClone.hasErrorBoundary = routeClone.errorElement != null;\n    }\n    if (routeClone.children) {\n      routeClone.children = enhanceManualRouteObjects(routeClone.children);\n    }\n    return routeClone;\n  });\n}\n","import type {\n  ActionFunction,\n  ActionFunctionArgs,\n  Fetcher,\n  HydrationState,\n  JsonFunction,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  Navigation,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  PathPattern,\n  RedirectFunction,\n  Router as RemixRouter,\n  ShouldRevalidateFunction,\n  To,\n  InitialEntry,\n} from \"@remix-run/router\";\nimport {\n  AbortedDeferredError,\n  Action as NavigationType,\n  createMemoryHistory,\n  createPath,\n  createRouter,\n  defer,\n  generatePath,\n  isRouteErrorResponse,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  resolvePath,\n} from \"@remix-run/router\";\n\nimport type {\n  AwaitProps,\n  MemoryRouterProps,\n  NavigateProps,\n  OutletProps,\n  RouteProps,\n  PathRouteProps,\n  LayoutRouteProps,\n  IndexRouteProps,\n  RouterProps,\n  RoutesProps,\n  RouterProviderProps,\n} from \"./lib/components\";\nimport {\n  enhanceManualRouteObjects,\n  createRoutesFromChildren,\n  renderMatches,\n  Await,\n  MemoryRouter,\n  Navigate,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n} from \"./lib/components\";\nimport type {\n  DataRouteMatch,\n  DataRouteObject,\n  IndexRouteObject,\n  Navigator,\n  NavigateOptions,\n  NonIndexRouteObject,\n  RouteMatch,\n  RouteObject,\n  RelativeRoutingType,\n} from \"./lib/context\";\nimport {\n  DataRouterContext,\n  DataRouterStateContext,\n  DataStaticRouterContext,\n  LocationContext,\n  NavigationContext,\n  RouteContext,\n} from \"./lib/context\";\nimport type { NavigateFunction } from \"./lib/hooks\";\nimport {\n  useHref,\n  useInRouterContext,\n  useLocation,\n  useMatch,\n  useNavigationType,\n  useNavigate,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRoutes,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useLoaderData,\n  useMatches,\n  useNavigation,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n} from \"./lib/hooks\";\n\n// Exported for backwards compatibility, but not being used internally anymore\ntype Hash = string;\ntype Pathname = string;\ntype Search = string;\n\n// Expose react-router public API\nexport type {\n  ActionFunction,\n  ActionFunctionArgs,\n  AwaitProps,\n  DataRouteMatch,\n  DataRouteObject,\n  Fetcher,\n  Hash,\n  IndexRouteObject,\n  IndexRouteProps,\n  JsonFunction,\n  LayoutRouteProps,\n  LoaderFunction,\n  LoaderFunctionArgs,\n  Location,\n  MemoryRouterProps,\n  NavigateFunction,\n  NavigateOptions,\n  NavigateProps,\n  Navigation,\n  Navigator,\n  NonIndexRouteObject,\n  OutletProps,\n  Params,\n  ParamParseKey,\n  Path,\n  PathMatch,\n  Pathname,\n  PathPattern,\n  PathRouteProps,\n  RedirectFunction,\n  RelativeRoutingType,\n  RouteMatch,\n  RouteObject,\n  RouteProps,\n  RouterProps,\n  RouterProviderProps,\n  RoutesProps,\n  Search,\n  ShouldRevalidateFunction,\n  To,\n};\nexport {\n  AbortedDeferredError,\n  Await,\n  MemoryRouter,\n  Navigate,\n  NavigationType,\n  Outlet,\n  Route,\n  Router,\n  RouterProvider,\n  Routes,\n  createPath,\n  createRoutesFromChildren,\n  createRoutesFromChildren as createRoutesFromElements,\n  defer,\n  isRouteErrorResponse,\n  generatePath,\n  json,\n  matchPath,\n  matchRoutes,\n  parsePath,\n  redirect,\n  renderMatches,\n  resolvePath,\n  useActionData,\n  useAsyncError,\n  useAsyncValue,\n  useHref,\n  useInRouterContext,\n  useLoaderData,\n  useLocation,\n  useMatch,\n  useMatches,\n  useNavigate,\n  useNavigation,\n  useNavigationType,\n  useOutlet,\n  useOutletContext,\n  useParams,\n  useResolvedPath,\n  useRevalidator,\n  useRouteError,\n  useRouteLoaderData,\n  useRoutes,\n};\n\nexport function createMemoryRouter(\n  routes: RouteObject[],\n  opts?: {\n    basename?: string;\n    hydrationData?: HydrationState;\n    initialEntries?: InitialEntry[];\n    initialIndex?: number;\n  }\n): RemixRouter {\n  return createRouter({\n    basename: opts?.basename,\n    history: createMemoryHistory({\n      initialEntries: opts?.initialEntries,\n      initialIndex: opts?.initialIndex,\n    }),\n    hydrationData: opts?.hydrationData,\n    routes: enhanceManualRouteObjects(routes),\n  }).initialize();\n}\n\n///////////////////////////////////////////////////////////////////////////////\n// DANGER! PLEASE READ ME!\n// We provide these exports as an escape hatch in the event that you need any\n// routing data that we don't provide an explicit API for. With that said, we\n// want to cover your use case if we can, so if you feel the need to use these\n// we want to hear from you. Let us know what you're building and we'll do our\n// best to make sure we can support you!\n//\n// We consider these exports an implementation detail and do not guarantee\n// against any breaking changes, regardless of the semver release. Use with\n// extreme caution and only if you understand the consequences. Godspeed.\n///////////////////////////////////////////////////////////////////////////////\n\n/** @internal */\nexport {\n  NavigationContext as UNSAFE_NavigationContext,\n  LocationContext as UNSAFE_LocationContext,\n  RouteContext as UNSAFE_RouteContext,\n  DataRouterContext as UNSAFE_DataRouterContext,\n  DataRouterStateContext as UNSAFE_DataRouterStateContext,\n  DataStaticRouterContext as UNSAFE_DataStaticRouterContext,\n  enhanceManualRouteObjects as UNSAFE_enhanceManualRouteObjects,\n};\n","/**\n * @license React\n * react.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var l=Symbol.for(\"react.element\"),n=Symbol.for(\"react.portal\"),p=Symbol.for(\"react.fragment\"),q=Symbol.for(\"react.strict_mode\"),r=Symbol.for(\"react.profiler\"),t=Symbol.for(\"react.provider\"),u=Symbol.for(\"react.context\"),v=Symbol.for(\"react.forward_ref\"),w=Symbol.for(\"react.suspense\"),x=Symbol.for(\"react.memo\"),y=Symbol.for(\"react.lazy\"),z=Symbol.iterator;function A(a){if(null===a||\"object\"!==typeof a)return null;a=z&&a[z]||a[\"@@iterator\"];return\"function\"===typeof a?a:null}\nvar B={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},C=Object.assign,D={};function E(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}E.prototype.isReactComponent={};\nE.prototype.setState=function(a,b){if(\"object\"!==typeof a&&\"function\"!==typeof a&&null!=a)throw Error(\"setState(...): takes an object of state variables to update or a function which returns an object of state variables.\");this.updater.enqueueSetState(this,a,b,\"setState\")};E.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,\"forceUpdate\")};function F(){}F.prototype=E.prototype;function G(a,b,e){this.props=a;this.context=b;this.refs=D;this.updater=e||B}var H=G.prototype=new F;\nH.constructor=G;C(H,E.prototype);H.isPureReactComponent=!0;var I=Array.isArray,J=Object.prototype.hasOwnProperty,K={current:null},L={key:!0,ref:!0,__self:!0,__source:!0};\nfunction M(a,b,e){var d,c={},k=null,h=null;if(null!=b)for(d in void 0!==b.ref&&(h=b.ref),void 0!==b.key&&(k=\"\"+b.key),b)J.call(b,d)&&!L.hasOwnProperty(d)&&(c[d]=b[d]);var g=arguments.length-2;if(1===g)c.children=e;else if(1<g){for(var f=Array(g),m=0;m<g;m++)f[m]=arguments[m+2];c.children=f}if(a&&a.defaultProps)for(d in g=a.defaultProps,g)void 0===c[d]&&(c[d]=g[d]);return{$$typeof:l,type:a,key:k,ref:h,props:c,_owner:K.current}}\nfunction N(a,b){return{$$typeof:l,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===l}function escape(a){var b={\"=\":\"=0\",\":\":\"=2\"};return\"$\"+a.replace(/[=:]/g,function(a){return b[a]})}var P=/\\/+/g;function Q(a,b){return\"object\"===typeof a&&null!==a&&null!=a.key?escape(\"\"+a.key):b.toString(36)}\nfunction R(a,b,e,d,c){var k=typeof a;if(\"undefined\"===k||\"boolean\"===k)a=null;var h=!1;if(null===a)h=!0;else switch(k){case \"string\":case \"number\":h=!0;break;case \"object\":switch(a.$$typeof){case l:case n:h=!0}}if(h)return h=a,c=c(h),a=\"\"===d?\".\"+Q(h,0):d,I(c)?(e=\"\",null!=a&&(e=a.replace(P,\"$&/\")+\"/\"),R(c,b,e,\"\",function(a){return a})):null!=c&&(O(c)&&(c=N(c,e+(!c.key||h&&h.key===c.key?\"\":(\"\"+c.key).replace(P,\"$&/\")+\"/\")+a)),b.push(c)),1;h=0;d=\"\"===d?\".\":d+\":\";if(I(a))for(var g=0;g<a.length;g++){k=\na[g];var f=d+Q(k,g);h+=R(k,b,e,f,c)}else if(f=A(a),\"function\"===typeof f)for(a=f.call(a),g=0;!(k=a.next()).done;)k=k.value,f=d+Q(k,g++),h+=R(k,b,e,f,c);else if(\"object\"===k)throw b=String(a),Error(\"Objects are not valid as a React child (found: \"+(\"[object Object]\"===b?\"object with keys {\"+Object.keys(a).join(\", \")+\"}\":b)+\"). If you meant to render a collection of children, use an array instead.\");return h}\nfunction S(a,b,e){if(null==a)return a;var d=[],c=0;R(a,d,\"\",\"\",function(a){return b.call(e,a,c++)});return d}function T(a){if(-1===a._status){var b=a._result;b=b();b.then(function(b){if(0===a._status||-1===a._status)a._status=1,a._result=b},function(b){if(0===a._status||-1===a._status)a._status=2,a._result=b});-1===a._status&&(a._status=0,a._result=b)}if(1===a._status)return a._result.default;throw a._result;}\nvar U={current:null},V={transition:null},W={ReactCurrentDispatcher:U,ReactCurrentBatchConfig:V,ReactCurrentOwner:K};exports.Children={map:S,forEach:function(a,b,e){S(a,function(){b.apply(this,arguments)},e)},count:function(a){var b=0;S(a,function(){b++});return b},toArray:function(a){return S(a,function(a){return a})||[]},only:function(a){if(!O(a))throw Error(\"React.Children.only expected to receive a single React element child.\");return a}};exports.Component=E;exports.Fragment=p;\nexports.Profiler=r;exports.PureComponent=G;exports.StrictMode=q;exports.Suspense=w;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=W;\nexports.cloneElement=function(a,b,e){if(null===a||void 0===a)throw Error(\"React.cloneElement(...): The argument must be a React element, but you passed \"+a+\".\");var d=C({},a.props),c=a.key,k=a.ref,h=a._owner;if(null!=b){void 0!==b.ref&&(k=b.ref,h=K.current);void 0!==b.key&&(c=\"\"+b.key);if(a.type&&a.type.defaultProps)var g=a.type.defaultProps;for(f in b)J.call(b,f)&&!L.hasOwnProperty(f)&&(d[f]=void 0===b[f]&&void 0!==g?g[f]:b[f])}var f=arguments.length-2;if(1===f)d.children=e;else if(1<f){g=Array(f);\nfor(var m=0;m<f;m++)g[m]=arguments[m+2];d.children=g}return{$$typeof:l,type:a.type,key:c,ref:k,props:d,_owner:h}};exports.createContext=function(a){a={$$typeof:u,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null};a.Provider={$$typeof:t,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};\nexports.forwardRef=function(a){return{$$typeof:v,render:a}};exports.isValidElement=O;exports.lazy=function(a){return{$$typeof:y,_payload:{_status:-1,_result:a},_init:T}};exports.memo=function(a,b){return{$$typeof:x,type:a,compare:void 0===b?null:b}};exports.startTransition=function(a){var b=V.transition;V.transition={};try{a()}finally{V.transition=b}};exports.unstable_act=function(){throw Error(\"act(...) is not supported in production builds of React.\");};\nexports.useCallback=function(a,b){return U.current.useCallback(a,b)};exports.useContext=function(a){return U.current.useContext(a)};exports.useDebugValue=function(){};exports.useDeferredValue=function(a){return U.current.useDeferredValue(a)};exports.useEffect=function(a,b){return U.current.useEffect(a,b)};exports.useId=function(){return U.current.useId()};exports.useImperativeHandle=function(a,b,e){return U.current.useImperativeHandle(a,b,e)};\nexports.useInsertionEffect=function(a,b){return U.current.useInsertionEffect(a,b)};exports.useLayoutEffect=function(a,b){return U.current.useLayoutEffect(a,b)};exports.useMemo=function(a,b){return U.current.useMemo(a,b)};exports.useReducer=function(a,b,e){return U.current.useReducer(a,b,e)};exports.useRef=function(a){return U.current.useRef(a)};exports.useState=function(a){return U.current.useState(a)};exports.useSyncExternalStore=function(a,b,e){return U.current.useSyncExternalStore(a,b,e)};\nexports.useTransition=function(){return U.current.useTransition()};exports.version=\"18.2.0\";\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react.production.min.js');\n} else {\n  module.exports = require('./cjs/react.development.js');\n}\n","/**\n * @license React\n * scheduler.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}\nfunction g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if(\"object\"===typeof performance&&\"function\"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()}}else{var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q}}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D=\"function\"===typeof setTimeout?setTimeout:null,E=\"function\"===typeof clearTimeout?clearTimeout:null,F=\"undefined\"!==typeof setImmediate?setImmediate:null;\n\"undefined\"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t)}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else{var b=h(t);null!==b&&K(H,b.startTime-a)}}\nfunction J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if(\"function\"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();\"function\"===typeof e?v.callback=e:v===h(r)&&k(r);G(b)}else k(r);v=h(r)}if(null!==v)var w=!0;else{var m=h(t);null!==m&&K(H,m.startTime-b);w=!1}return w}finally{v=null,y=c,z=!1}}var N=!1,O=null,L=-1,P=5,Q=-1;\nfunction M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a)}finally{b?S():(N=!1,O=null)}}else N=!1}var S;if(\"function\"===typeof F)S=function(){F(R)};else if(\"undefined\"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null)}}else S=function(){D(R,0)};function I(a){O=a;N||(N=!0,S())}function K(a,b){L=D(function(){a(exports.unstable_now())},b)}\nexports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J))};\nexports.unstable_forceFrameRate=function(a){0>a||125<a?console.error(\"forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported\"):P=0<a?Math.floor(1E3/a):5};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y}var c=y;y=b;try{return a()}finally{y=c}};exports.unstable_pauseExecution=function(){};\nexports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=y;y=a;try{return b()}finally{y=c}};\nexports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();\"object\"===typeof c&&null!==c?(c=c.delay,c=\"number\"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};\nexports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c}}};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/scheduler.production.min.js');\n} else {\n  module.exports = require('./cjs/scheduler.development.js');\n}\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin', 'kotlin-js'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'), require('kotlin-js'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-csstype'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-csstype'.\");\n    }\n    if (typeof this['kotlin-js'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-csstype'. Its dependency 'kotlin-js' was not found. Please, check whether 'kotlin-js' is loaded prior to 'kotlin-csstype'.\");\n    }\n    root['kotlin-csstype'] = factory(typeof this['kotlin-csstype'] === 'undefined' ? {} : this['kotlin-csstype'], kotlin, this['kotlin-js']);\n  }\n}(this, function (_, Kotlin, $module$kotlin_js) {\n  'use strict';\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;\n  var wrapFunction = Kotlin.wrapFunction;\n  var Kind_CLASS = Kotlin.Kind.CLASS;\n  function Content_0(value) {\n    return \"'\" + CSS.escape(value) + \"'\";\n  }\n  var package$csstype = _.csstype || (_.csstype = {});\n  package$csstype.Content_61zpoe$ = Content_0;\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-csstype.js.map\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin', 'kotlin-js', '@emotion/css', 'kotlin-csstype', '@emotion/styled'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'), require('kotlin-js'), require('@emotion/css'), require('kotlin-csstype'), require('@emotion/styled'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-emotion'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-emotion'.\");\n    }\n    if (typeof this['kotlin-js'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-emotion'. Its dependency 'kotlin-js' was not found. Please, check whether 'kotlin-js' is loaded prior to 'kotlin-emotion'.\");\n    }\n    if (typeof this['@emotion/css'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-emotion'. Its dependency '@emotion/css' was not found. Please, check whether '@emotion/css' is loaded prior to 'kotlin-emotion'.\");\n    }\n    if (typeof this['kotlin-csstype'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-emotion'. Its dependency 'kotlin-csstype' was not found. Please, check whether 'kotlin-csstype' is loaded prior to 'kotlin-emotion'.\");\n    }\n    if (typeof this['@emotion/styled'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-emotion'. Its dependency '@emotion/styled' was not found. Please, check whether '@emotion/styled' is loaded prior to 'kotlin-emotion'.\");\n    }\n    root['kotlin-emotion'] = factory(typeof this['kotlin-emotion'] === 'undefined' ? {} : this['kotlin-emotion'], kotlin, this['kotlin-js'], this['@emotion/css'], this['kotlin-csstype'], this['@emotion/styled']);\n  }\n}(this, function (_, Kotlin, $module$kotlin_js, $module$_emotion_css, $module$kotlin_csstype, $module$_emotion_styled) {\n  'use strict';\n  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var wrapFunction = Kotlin.wrapFunction;\n  var Kind_CLASS = Kotlin.Kind.CLASS;\n  var FROM_PERCENTAGE;\n  var TO_PERCENTAGE;\n  var index;\n  $$importsForInline$$['@emotion/css'] = $module$_emotion_css;\n  $$importsForInline$$['kotlin-csstype'] = $module$kotlin_csstype;\n  FROM_PERCENTAGE = (0).toString() + '%';\n  TO_PERCENTAGE = (100).toString() + '%';\n  index = 0;\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-emotion.js.map\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-js'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-js'.\");\n    }\n    root['kotlin-js'] = factory(typeof this['kotlin-js'] === 'undefined' ? {} : this['kotlin-js'], kotlin);\n  }\n}(this, function (_, Kotlin) {\n  'use strict';\n  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var get_lastIndex = Kotlin.kotlin.collections.get_lastIndex_55thoc$;\n  var IndexOutOfBoundsException = Kotlin.kotlin.IndexOutOfBoundsException;\n  var AbstractList = Kotlin.kotlin.collections.AbstractList;\n  var Kind_CLASS = Kotlin.Kind.CLASS;\n  var wrapFunction = Kotlin.wrapFunction;\n  var toSet = Kotlin.kotlin.collections.toSet_us0mfu$;\n  var Unit = Kotlin.kotlin.Unit;\n  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;\n  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;\n  var iterator = Kotlin.kotlin.sequences.iterator_o0x0bg$;\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-js.js.map\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin', 'react'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'), require('react'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react-core'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-react-core'.\");\n    }\n    if (typeof react === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react-core'. Its dependency 'react' was not found. Please, check whether 'react' is loaded prior to 'kotlin-react-core'.\");\n    }\n    root['kotlin-react-core'] = factory(typeof this['kotlin-react-core'] === 'undefined' ? {} : this['kotlin-react-core'], kotlin, react);\n  }\n}(this, function (_, Kotlin, $module$react) {\n  'use strict';\n  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});\n  var get_js = Kotlin.kotlin.js.get_js_1yb8b7$;\n  var Kind_CLASS = Kotlin.Kind.CLASS;\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var Unit = Kotlin.kotlin.Unit;\n  var wrapFunction = Kotlin.wrapFunction;\n  var isValidElement = $module$react.isValidElement;\n  var IllegalArgumentException_init = Kotlin.kotlin.IllegalArgumentException_init_pdl1vj$;\n  function get_react($receiver) {\n    return get_js($receiver);\n  }\n  var package$react = _.react || (_.react = {});\n  package$react.get_react_2wnr96$ = get_react;\n  $$importsForInline$$.react = $module$react;\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-react-core.js.map\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin', 'kotlin-react-core'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'), require('kotlin-react-core'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react-dom'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-react-dom'.\");\n    }\n    if (typeof this['kotlin-react-core'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react-dom'. Its dependency 'kotlin-react-core' was not found. Please, check whether 'kotlin-react-core' is loaded prior to 'kotlin-react-dom'.\");\n    }\n    root['kotlin-react-dom'] = factory(typeof this['kotlin-react-dom'] === 'undefined' ? {} : this['kotlin-react-dom'], kotlin, this['kotlin-react-core']);\n  }\n}(this, function (_, Kotlin, $module$kotlin_react_core) {\n  'use strict';\n  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var Kind_OBJECT = Kotlin.Kind.OBJECT;\n  function ReactHTML() {\n    ReactHTML_instance = this;\n  }\n  Object.defineProperty(ReactHTML.prototype, 'a', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_a', function () {\n    return 'a';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'abbr', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_abbr', function () {\n    return 'abbr';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'address', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_address', function () {\n    return 'address';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'area', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_area', function () {\n    return 'area';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'article', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_article', function () {\n    return 'article';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'aside', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_aside', function () {\n    return 'aside';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'audio', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_audio', function () {\n    return 'audio';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'b', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_b', function () {\n    return 'b';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'base', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_base', function () {\n    return 'base';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'bdi', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_bdi', function () {\n    return 'bdi';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'bdo', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_bdo', function () {\n    return 'bdo';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'big', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_big', function () {\n    return 'big';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'blockquote', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_blockquote', function () {\n    return 'blockquote';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'body', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_body', function () {\n    return 'body';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'br', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_br', function () {\n    return 'br';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'button', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_button', function () {\n    return 'button';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'canvas', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_canvas', function () {\n    return 'canvas';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'caption', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_caption', function () {\n    return 'caption';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'cite', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_cite', function () {\n    return 'cite';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'code', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_code', function () {\n    return 'code';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'col', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_col', function () {\n    return 'col';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'colgroup', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_colgroup', function () {\n    return 'colgroup';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'data', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_data', function () {\n    return 'data';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'datalist', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_datalist', function () {\n    return 'datalist';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'dd', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_dd', function () {\n    return 'dd';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'del', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_del', function () {\n    return 'del';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'details', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_details', function () {\n    return 'details';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'dfn', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_dfn', function () {\n    return 'dfn';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'dialog', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_dialog', function () {\n    return 'dialog';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'div', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_div', function () {\n    return 'div';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'dl', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_dl', function () {\n    return 'dl';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'dt', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_dt', function () {\n    return 'dt';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'em', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_em', function () {\n    return 'em';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'embed', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_embed', function () {\n    return 'embed';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'fieldset', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_fieldset', function () {\n    return 'fieldset';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'figcaption', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_figcaption', function () {\n    return 'figcaption';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'figure', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_figure', function () {\n    return 'figure';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'footer', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_footer', function () {\n    return 'footer';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'form', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_form', function () {\n    return 'form';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h1', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h1', function () {\n    return 'h1';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h2', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h2', function () {\n    return 'h2';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h3', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h3', function () {\n    return 'h3';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h4', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h4', function () {\n    return 'h4';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h5', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h5', function () {\n    return 'h5';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'h6', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_h6', function () {\n    return 'h6';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'head', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_head', function () {\n    return 'head';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'header', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_header', function () {\n    return 'header';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'hgroup', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_hgroup', function () {\n    return 'hgroup';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'hr', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_hr', function () {\n    return 'hr';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'html', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_html', function () {\n    return 'html';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'i', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_i', function () {\n    return 'i';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'iframe', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_iframe', function () {\n    return 'iframe';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'img', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_img', function () {\n    return 'img';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'input', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_input', function () {\n    return 'input';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'ins', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_ins', function () {\n    return 'ins';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'kbd', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_kbd', function () {\n    return 'kbd';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'keygen', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_keygen', function () {\n    return 'keygen';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'label', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_label', function () {\n    return 'label';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'legend', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_legend', function () {\n    return 'legend';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'li', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_li', function () {\n    return 'li';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'link', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_link', function () {\n    return 'link';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'main', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_main', function () {\n    return 'main';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'map', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_map', function () {\n    return 'map';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'mark', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_mark', function () {\n    return 'mark';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'menu', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_menu', function () {\n    return 'menu';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'menuitem', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_menuitem', function () {\n    return 'menuitem';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'meta', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_meta', function () {\n    return 'meta';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'meter', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_meter', function () {\n    return 'meter';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'nav', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_nav', function () {\n    return 'nav';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'noscript', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_noscript', function () {\n    return 'noscript';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'object', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_object', function () {\n    return 'object';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'ol', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_ol', function () {\n    return 'ol';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'optgroup', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_optgroup', function () {\n    return 'optgroup';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'option', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_option', function () {\n    return 'option';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'output', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_output', function () {\n    return 'output';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'p', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_p', function () {\n    return 'p';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'param', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_param', function () {\n    return 'param';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'picture', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_picture', function () {\n    return 'picture';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'pre', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_pre', function () {\n    return 'pre';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'progress', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_progress', function () {\n    return 'progress';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'q', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_q', function () {\n    return 'q';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'rp', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_rp', function () {\n    return 'rp';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'rt', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_rt', function () {\n    return 'rt';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'ruby', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_ruby', function () {\n    return 'ruby';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 's', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_s', function () {\n    return 's';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'samp', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_samp', function () {\n    return 'samp';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'slot', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_slot', function () {\n    return 'slot';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'script', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_script', function () {\n    return 'script';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'section', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_section', function () {\n    return 'section';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'select', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_select', function () {\n    return 'select';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'small', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_small', function () {\n    return 'small';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'source', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_source', function () {\n    return 'source';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'span', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_span', function () {\n    return 'span';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'strong', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_strong', function () {\n    return 'strong';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'style', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_style', function () {\n    return 'style';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'sub', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_sub', function () {\n    return 'sub';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'summary', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_summary', function () {\n    return 'summary';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'sup', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_sup', function () {\n    return 'sup';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'table', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_table', function () {\n    return 'table';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'template', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_template', function () {\n    return 'template';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'tbody', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_tbody', function () {\n    return 'tbody';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'td', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_td', function () {\n    return 'td';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'textarea', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_textarea', function () {\n    return 'textarea';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'tfoot', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_tfoot', function () {\n    return 'tfoot';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'th', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_th', function () {\n    return 'th';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'thead', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_thead', function () {\n    return 'thead';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'time', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_time', function () {\n    return 'time';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'title', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_title', function () {\n    return 'title';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'tr', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_tr', function () {\n    return 'tr';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'track', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_track', function () {\n    return 'track';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'u', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_u', function () {\n    return 'u';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'ul', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_ul', function () {\n    return 'ul';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'var', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_var', function () {\n    return 'var';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'video', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_video', function () {\n    return 'video';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'wbr', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_wbr', function () {\n    return 'wbr';\n  })});\n  Object.defineProperty(ReactHTML.prototype, 'webview', {configurable: true, get: defineInlineFunction('kotlin-react-dom.react.dom.html.ReactHTML.get_webview', function () {\n    return 'webview';\n  })});\n  ReactHTML.$metadata$ = {kind: Kind_OBJECT, simpleName: 'ReactHTML', interfaces: []};\n  var ReactHTML_instance = null;\n  function ReactHTML_getInstance() {\n    if (ReactHTML_instance === null) {\n      new ReactHTML();\n    }\n    return ReactHTML_instance;\n  }\n  var ReactSVG_instance = null;\n  var FormEncType_instance = null;\n  var FormMethod_instance = null;\n  var package$react = _.react || (_.react = {});\n  var package$dom = package$react.dom || (package$react.dom = {});\n  $$importsForInline$$['kotlin-react-core'] = $module$kotlin_react_core;\n  var package$html = package$dom.html || (package$dom.html = {});\n  Object.defineProperty(package$html, 'ReactHTML', {get: ReactHTML_getInstance});\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-react-dom.js.map\n","(function (root, factory) {\n  if (typeof define === 'function' && define.amd)\n    define(['exports', 'kotlin', 'kotlin-react-core', 'react'], factory);\n  else if (typeof exports === 'object')\n    factory(module.exports, require('kotlin'), require('kotlin-react-core'), require('react'));\n  else {\n    if (typeof kotlin === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react'. Its dependency 'kotlin' was not found. Please, check whether 'kotlin' is loaded prior to 'kotlin-react'.\");\n    }\n    if (typeof this['kotlin-react-core'] === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react'. Its dependency 'kotlin-react-core' was not found. Please, check whether 'kotlin-react-core' is loaded prior to 'kotlin-react'.\");\n    }\n    if (typeof react === 'undefined') {\n      throw new Error(\"Error loading module 'kotlin-react'. Its dependency 'react' was not found. Please, check whether 'react' is loaded prior to 'kotlin-react'.\");\n    }\n    root['kotlin-react'] = factory(typeof this['kotlin-react'] === 'undefined' ? {} : this['kotlin-react'], kotlin, this['kotlin-react-core'], react);\n  }\n}(this, function (_, Kotlin, $module$kotlin_react_core, $module$react) {\n  'use strict';\n  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});\n  var defineInlineFunction = Kotlin.defineInlineFunction;\n  var createElement = $module$react.createElement;\n  var Unit = Kotlin.kotlin.Unit;\n  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;\n  var Kind_CLASS = Kotlin.Kind.CLASS;\n  var single = Kotlin.kotlin.collections.single_us0mfu$;\n  var isValidElement = $module$react.isValidElement;\n  var CHILDREN;\n  function ChildrenBuilder() {\n  }\n  ChildrenBuilder.prototype.unaryPlus_lapc4x$ = function ($receiver) {\n    Object.assign(this, $receiver);\n  };\n  ChildrenBuilder.prototype.child_m8hz59$ = function (element) {\n    if (this[CHILDREN] != null) {\n      this[CHILDREN].push(element);\n    } else {\n      this[CHILDREN] = [element];\n    }\n  };\n  ChildrenBuilder.prototype.unaryPlus_kzna72$ = function ($receiver) {\n    this.child_m8hz59$($receiver);\n  };\n  ChildrenBuilder.prototype.unaryPlus_pdl1vz$ = function ($receiver) {\n    this.unaryPlus_kzna72$($receiver);\n  };\n  ChildrenBuilder.prototype.child_sv8fgx$ = function (type, props) {\n    this.unaryPlus_kzna72$(createElement(type, props));\n  };\n  ChildrenBuilder.prototype.invoke_r7bapy$ = function ($receiver) {\n    this.unaryPlus_kzna72$(createElement($receiver));\n  };\n  ChildrenBuilder.prototype.invoke_gax9jq$ = function ($receiver, block) {\n    this.unaryPlus_kzna72$(create_0($receiver, block));\n  };\n  function ChildrenBuilder$invoke$lambda(closure$value, closure$block) {\n    return function ($receiver) {\n      $receiver.value = closure$value;\n      closure$block($receiver);\n      return Unit;\n    };\n  }\n  ChildrenBuilder.prototype.invoke_1uzlnf$ = function ($receiver, value, block) {\n    this.invoke_gax9jq$($receiver.Provider, ChildrenBuilder$invoke$lambda(value, block));\n  };\n  function ChildrenBuilder$invoke$lambda_0(closure$value, closure$block) {\n    return function ($receiver) {\n      $receiver.value = closure$value;\n      closure$block($receiver);\n      return Unit;\n    };\n  }\n  ChildrenBuilder.prototype.invoke_snd3xh$ = function ($receiver, value, block) {\n    this.invoke_gax9jq$($receiver, ChildrenBuilder$invoke$lambda_0(value, block));\n  };\n  ChildrenBuilder.$metadata$ = {kind: Kind_INTERFACE, simpleName: 'ChildrenBuilder', interfaces: []};\n  function ChildrenBuilder_0() {\n    return new ChildrenBuilderImpl();\n  }\n  function ChildrenBuilderImpl() {\n  }\n  ChildrenBuilderImpl.$metadata$ = {kind: Kind_CLASS, simpleName: 'ChildrenBuilderImpl', interfaces: [ChildrenBuilder]};\n  function FC$lambda$lambda(closure$block, closure$props) {\n    return function ($receiver) {\n      closure$block($receiver, closure$props);\n      return Unit;\n    };\n  }\n  function FC$lambda(closure$block) {\n    return function (props) {\n      return createElementOrNull(FC$lambda$lambda(closure$block, props));\n    };\n  }\n  function FC(block) {\n    var component = FC$lambda(block);\n    return component;\n  }\n  function create($receiver) {\n    return createElement($receiver);\n  }\n  function create_0($receiver, block) {\n    var tmp$;\n    var builder = ChildrenBuilder_0();\n    block(builder);\n    var props = builder;\n    var children = (tmp$ = builder[CHILDREN]) != null ? tmp$ : [];\n    return createElement.apply(null, [$receiver, props].concat(children));\n  }\n  function createElementOrNull(block) {\n    var tmp$, tmp$_0;\n    var $receiver = ChildrenBuilder_0();\n    block($receiver);\n    tmp$ = $receiver[CHILDREN];\n    if (tmp$ == null) {\n      return null;\n    }\n    var children = tmp$;\n    if (children.length === 0)\n      return null;\n    if (children.length === 1) {\n      tmp$_0 = single(children);\n      if (tmp$_0 == null) {\n        return null;\n      }\n      var child = tmp$_0;\n      if (isValidElement(child)) {\n        return child;\n      }\n    }\n    return createElement.apply(null, [$module$react.Fragment, void 0].concat(children));\n  }\n  var package$react = _.react || (_.react = {});\n  $$importsForInline$$['kotlin-react-core'] = $module$kotlin_react_core;\n  package$react.ChildrenBuilder = ChildrenBuilder;\n  package$react.createChildrenBuilder = ChildrenBuilder_0;\n  package$react.FC_4y0n3r$ = FC;\n  package$react.create_r7bapy$ = create;\n  package$react.create_gax9jq$ = create_0;\n  package$react.createElementOrNull_khlwf$ = createElementOrNull;\n  ChildrenBuilderImpl.prototype.unaryPlus_lapc4x$ = ChildrenBuilder.prototype.unaryPlus_lapc4x$;\n  ChildrenBuilderImpl.prototype.unaryPlus_kzna72$ = ChildrenBuilder.prototype.unaryPlus_kzna72$;\n  ChildrenBuilderImpl.prototype.unaryPlus_pdl1vz$ = ChildrenBuilder.prototype.unaryPlus_pdl1vz$;\n  ChildrenBuilderImpl.prototype.child_m8hz59$ = ChildrenBuilder.prototype.child_m8hz59$;\n  ChildrenBuilderImpl.prototype.child_sv8fgx$ = ChildrenBuilder.prototype.child_sv8fgx$;\n  ChildrenBuilderImpl.prototype.invoke_r7bapy$ = ChildrenBuilder.prototype.invoke_r7bapy$;\n  ChildrenBuilderImpl.prototype.invoke_gax9jq$ = ChildrenBuilder.prototype.invoke_gax9jq$;\n  ChildrenBuilderImpl.prototype.invoke_1uzlnf$ = ChildrenBuilder.prototype.invoke_1uzlnf$;\n  ChildrenBuilderImpl.prototype.invoke_snd3xh$ = ChildrenBuilder.prototype.invoke_snd3xh$;\n  CHILDREN = Symbol('@@children');\n  return _;\n}));\n\n//# sourceMappingURL=kotlin-react.js.map\n","(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        define('kotlin', ['exports'], factory);\n    }\n    else if (typeof exports === 'object') {\n        factory(module.exports);\n    }\n    else {\n        root.kotlin = {};\n        factory(root.kotlin);\n    }\n}(this, function (Kotlin) {\n    var _ = Kotlin;\n\n    insertContent();\n}));\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.isBooleanArray = function (a) {\n    return (Array.isArray(a) || a instanceof Int8Array) && a.$type$ === \"BooleanArray\"\n};\n\nKotlin.isByteArray = function (a) {\n    return a instanceof Int8Array && a.$type$ !== \"BooleanArray\"\n};\n\nKotlin.isShortArray = function (a) {\n    return a instanceof Int16Array\n};\n\nKotlin.isCharArray = function (a) {\n    return a instanceof Uint16Array && a.$type$ === \"CharArray\"\n};\n\nKotlin.isIntArray = function (a) {\n    return a instanceof Int32Array\n};\n\nKotlin.isFloatArray = function (a) {\n    return a instanceof Float32Array\n};\n\nKotlin.isDoubleArray = function (a) {\n    return a instanceof Float64Array\n};\n\nKotlin.isLongArray = function (a) {\n    return Array.isArray(a) && a.$type$ === \"LongArray\"\n};\n\nKotlin.isArray = function (a) {\n    return Array.isArray(a) && !a.$type$;\n};\n\nKotlin.isArrayish = function (a) {\n    return Array.isArray(a) || ArrayBuffer.isView(a)\n};\n\nKotlin.arrayToString = function (a) {\n    if (a === null) return \"null\"\n    var toString = Kotlin.isCharArray(a) ? String.fromCharCode : Kotlin.toString;\n    return \"[\" + Array.prototype.map.call(a, function(e) { return toString(e); }).join(\", \") + \"]\";\n};\n\nKotlin.arrayDeepToString = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepToStringImpl(arr);\n};\n\nKotlin.arrayEquals = function (a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a === null || b === null || !Kotlin.isArrayish(b) || a.length !== b.length) {\n        return false;\n    }\n\n    for (var i = 0, n = a.length; i < n; i++) {\n        if (!Kotlin.equals(a[i], b[i])) {\n            return false;\n        }\n    }\n    return true;\n};\n\nKotlin.arrayDeepEquals = function (a, b) {\n    return Kotlin.kotlin.collections.contentDeepEqualsImpl(a, b);\n};\n\nKotlin.arrayHashCode = function (arr) {\n    if (arr === null) return 0\n    var result = 1;\n    for (var i = 0, n = arr.length; i < n; i++) {\n        result = ((31 * result | 0) + Kotlin.hashCode(arr[i])) | 0;\n    }\n    return result;\n};\n\nKotlin.arrayDeepHashCode = function (arr) {\n    return Kotlin.kotlin.collections.contentDeepHashCodeImpl(arr);\n};\n\nKotlin.primitiveArraySort = function (array) {\n    array.sort(Kotlin.doubleCompareTo)\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.toShort = function (a) {\n    return (a & 0xFFFF) << 16 >> 16;\n};\n\nKotlin.toByte = function (a) {\n    return (a & 0xFF) << 24 >> 24;\n};\n\nKotlin.toChar = function (a) {\n    return a & 0xFFFF;\n};\n\nKotlin.numberToLong = function (a) {\n    return a instanceof Kotlin.Long ? a : Kotlin.Long.fromNumber(a);\n};\n\nKotlin.numberToInt = function (a) {\n    return a instanceof Kotlin.Long ? a.toInt() : Kotlin.doubleToInt(a);\n};\n\nKotlin.numberToShort = function (a) {\n    return Kotlin.toShort(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToByte = function (a) {\n    return Kotlin.toByte(Kotlin.numberToInt(a));\n};\n\nKotlin.numberToDouble = function (a) {\n    return +a;\n};\n\nKotlin.numberToChar = function (a) {\n    return Kotlin.toChar(Kotlin.numberToInt(a));\n};\n\nKotlin.doubleToInt = function(a) {\n    if (a > 2147483647) return 2147483647;\n    if (a < -2147483648) return -2147483648;\n    return a | 0;\n};\n\nKotlin.toBoxedChar = function (a) {\n    if (a == null) return a;\n    if (a instanceof Kotlin.BoxedChar) return a;\n    return new Kotlin.BoxedChar(a);\n};\n\nKotlin.unboxChar = function(a) {\n    if (a == null) return a;\n    return Kotlin.toChar(a);\n};\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.equals = function (obj1, obj2) {\n    if (obj1 == null) {\n        return obj2 == null;\n    }\n\n    if (obj2 == null) {\n        return false;\n    }\n\n    if (obj1 !== obj1) {\n        return obj2 !== obj2;\n    }\n\n    if (typeof obj1 === \"object\" && typeof obj1.equals === \"function\") {\n        return obj1.equals(obj2);\n    }\n\n    if (typeof obj1 === \"number\" && typeof obj2 === \"number\") {\n        return obj1 === obj2 && (obj1 !== 0 || 1 / obj1 === 1 / obj2)\n    }\n\n    return obj1 === obj2;\n};\n\nKotlin.hashCode = function (obj) {\n    if (obj == null) {\n        return 0;\n    }\n    var objType = typeof obj;\n    if (\"object\" === objType) {\n        return \"function\" === typeof obj.hashCode ? obj.hashCode() : getObjectHashCode(obj);\n    }\n    if (\"function\" === objType) {\n        return getObjectHashCode(obj);\n    }\n    if (\"number\" === objType) {\n        return Kotlin.numberHashCode(obj);\n    }\n    if (\"boolean\" === objType) {\n        return Number(obj)\n    }\n\n    var str = String(obj);\n    return getStringHashCode(str);\n};\n\n\nKotlin.toString = function (o) {\n    if (o == null) {\n        return \"null\";\n    }\n    else if (Kotlin.isArrayish(o)) {\n        return \"[...]\";\n    }\n    else {\n        return o.toString();\n    }\n};\n\n/** @const */\nvar POW_2_32 = 4294967296;\n// TODO: consider switching to Symbol type once we are on ES6.\n/** @const */\nvar OBJECT_HASH_CODE_PROPERTY_NAME = \"kotlinHashCodeValue$\";\n\nfunction getObjectHashCode(obj) {\n    if (!(OBJECT_HASH_CODE_PROPERTY_NAME in obj)) {\n        var hash = (Math.random() * POW_2_32) | 0; // Make 32-bit singed integer.\n        Object.defineProperty(obj, OBJECT_HASH_CODE_PROPERTY_NAME, { value:  hash, enumerable: false });\n    }\n    return obj[OBJECT_HASH_CODE_PROPERTY_NAME];\n}\n\nfunction getStringHashCode(str) {\n    var hash = 0;\n    for (var i = 0; i < str.length; i++) {\n        var code  = str.charCodeAt(i);\n        hash  = (hash * 31 + code) | 0; // Keep it 32-bit.\n    }\n    return hash;\n}\n\nKotlin.identityHashCode = getObjectHashCode;\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.compareTo = function (a, b) {\n    var typeA = typeof a;\n    if (typeA === \"number\") {\n        if (typeof b === \"number\") {\n            return Kotlin.doubleCompareTo(a, b);\n        }\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    if (typeA === \"string\" || typeA === \"boolean\") {\n        return Kotlin.primitiveCompareTo(a, b);\n    }\n    return a.compareTo_11rb$(b);\n};\n\nKotlin.primitiveCompareTo = function (a, b) {\n    return a < b ? -1 : a > b ? 1 : 0;\n};\n\nKotlin.doubleCompareTo = function (a, b) {\n    if (a < b) return -1;\n    if (a > b) return 1;\n\n    if (a === b) {\n        if (a !== 0) return 0;\n\n        var ia = 1 / a;\n        return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n    }\n\n    return a !== a ? (b !== b ? 0 : 1) : -1\n};\n\nKotlin.charInc = function (value) {\n    return Kotlin.toChar(value+1);\n};\n\nKotlin.charDec = function (value) {\n    return Kotlin.toChar(value-1);\n};\n\nKotlin.imul = Math.imul || imul;\n\nKotlin.imulEmulated = imul;\n\nfunction imul(a, b) {\n    return ((a & 0xffff0000) * (b & 0xffff) + (a & 0xffff) * (b | 0)) | 0;\n}\n\n(function() {\n    var buf = new ArrayBuffer(8);\n    var bufFloat64 = new Float64Array(buf);\n    var bufFloat32 = new Float32Array(buf);\n    var bufInt32 = new Int32Array(buf);\n    var lowIndex = 0;\n    var highIndex = 1;\n\n    bufFloat64[0] = -1; // bff00000_00000000\n    if (bufInt32[lowIndex] !== 0) {\n        lowIndex = 1;\n        highIndex = 0;\n    }\n\n    Kotlin.doubleToBits = function(value) {\n        return Kotlin.doubleToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.doubleToRawBits = function(value) {\n        bufFloat64[0] = value;\n        return Kotlin.Long.fromBits(bufInt32[lowIndex], bufInt32[highIndex]);\n    };\n\n    Kotlin.doubleFromBits = function(value) {\n        bufInt32[lowIndex] = value.low_;\n        bufInt32[highIndex] = value.high_;\n        return bufFloat64[0];\n    };\n\n    Kotlin.floatToBits = function(value) {\n        return Kotlin.floatToRawBits(isNaN(value) ? NaN : value);\n    };\n\n    Kotlin.floatToRawBits = function(value) {\n        bufFloat32[0] = value;\n        return bufInt32[0];\n    };\n\n    Kotlin.floatFromBits = function(value) {\n        bufInt32[0] = value;\n        return bufFloat32[0];\n    };\n\n    // returns zero value for number with positive sign bit and non-zero value for number with negative sign bit.\n    Kotlin.doubleSignBit = function(value) {\n        bufFloat64[0] = value;\n        return bufInt32[highIndex] & 0x80000000;\n    };\n\n    Kotlin.numberHashCode = function(obj) {\n        if ((obj | 0) === obj) {\n            return obj | 0;\n        }\n        else {\n            bufFloat64[0] = obj;\n            return (bufInt32[highIndex] * 31 | 0) + bufInt32[lowIndex] | 0;\n        }\n    }\n})();\n\nKotlin.ensureNotNull = function(x) {\n    return x != null ? x : Kotlin.throwNPE();\n};\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n// ES6 Math polyfills\nif (typeof Math.sign === \"undefined\") {\n    Math.sign = function(x) {\n        x = +x; // convert to a number\n        if (x === 0 || isNaN(x)) {\n            return Number(x);\n        }\n        return x > 0 ? 1 : -1;\n    };\n}\nif (typeof Math.trunc === \"undefined\") {\n    Math.trunc = function(x) {\n        if (isNaN(x)) {\n            return NaN;\n        }\n        if (x > 0) {\n            return Math.floor(x);\n        }\n        return Math.ceil(x);\n    };\n}\n\n(function() {\n    var epsilon = 2.220446049250313E-16;\n    var taylor_2_bound = Math.sqrt(epsilon);\n    var taylor_n_bound = Math.sqrt(taylor_2_bound);\n    var upper_taylor_2_bound = 1/taylor_2_bound;\n    var upper_taylor_n_bound = 1/taylor_n_bound;\n\n    if (typeof Math.sinh === \"undefined\") {\n        Math.sinh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 6;\n                }\n                return result;\n            } else {\n                var y = Math.exp(x);\n                var y1 = 1 / y;\n                if (!isFinite(y)) return Math.exp(x - Math.LN2);\n                if (!isFinite(y1)) return -Math.exp(-x - Math.LN2);\n                return (y - y1) / 2;\n            }\n        };\n    }\n    if (typeof Math.cosh === \"undefined\") {\n        Math.cosh = function(x) {\n            var y = Math.exp(x);\n            var y1 = 1 / y;\n            if (!isFinite(y) || !isFinite(y1)) return Math.exp(Math.abs(x) - Math.LN2);\n            return (y + y1) / 2;\n        };\n    }\n\n    if (typeof Math.tanh === \"undefined\") {\n        Math.tanh = function(x){\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result -= (x * x * x) / 3;\n                }\n                return result;\n            }\n            else {\n                var a = Math.exp(+x), b = Math.exp(-x);\n                return a === Infinity ? 1 : b === Infinity ? -1 : (a - b) / (a + b);\n            }\n        };\n    }\n\n    // Inverse hyperbolic function implementations derived from boost special math functions,\n    // Copyright Eric Ford & Hubert Holin 2001.\n\n    if (typeof Math.asinh === \"undefined\") {\n        var asinh = function(x) {\n            if (x >= +taylor_n_bound)\n            {\n                if (x > upper_taylor_n_bound)\n                {\n                    if (x > upper_taylor_2_bound)\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                        return Math.log(x) + Math.LN2;\n                    }\n                    else\n                    {\n                        // approximation by laurent series in 1/x at 0+ order from -1 to 1\n                        return Math.log(x * 2 + (1 / (x * 2)));\n                    }\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x + 1));\n                }\n            }\n            else if (x <= -taylor_n_bound)\n            {\n                return -asinh(-x);\n            }\n            else\n            {\n                // approximation by taylor series in x at 0 up to order 2\n                var result = x;\n                if (Math.abs(x) >= taylor_2_bound)\n                {\n                    var x3 = x * x * x;\n                    // approximation by taylor series in x at 0 up to order 4\n                    result -= x3 / 6;\n                }\n                return result;\n            }\n        };\n        Math.asinh = asinh;\n    }\n    if (typeof Math.acosh === \"undefined\") {\n        Math.acosh = function(x) {\n            if (x < 1)\n            {\n                return NaN;\n            }\n            else if (x - 1 >= taylor_n_bound)\n            {\n                if (x > upper_taylor_2_bound)\n                {\n                    // approximation by laurent series in 1/x at 0+ order from -1 to 0\n                    return Math.log(x) + Math.LN2;\n                }\n                else\n                {\n                    return Math.log(x + Math.sqrt(x * x - 1));\n                }\n            }\n            else\n            {\n                var y = Math.sqrt(x - 1);\n                // approximation by taylor series in y at 0 up to order 2\n                var result = y;\n                if (y >= taylor_2_bound)\n                {\n                    var y3 = y * y * y;\n                    // approximation by taylor series in y at 0 up to order 4\n                    result -= y3 / 12;\n                }\n\n                return Math.sqrt(2) * result;\n            }\n        };\n    }\n    if (typeof Math.atanh === \"undefined\") {\n        Math.atanh = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var result = x;\n                if (Math.abs(x) > taylor_2_bound) {\n                    result += (x * x * x) / 3;\n                }\n                return result;\n            }\n            return Math.log((1 + x) / (1 - x)) / 2;\n        };\n    }\n    if (typeof Math.log1p === \"undefined\") {\n        Math.log1p = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (-x4 / 4 + x3 / 3 - x2 / 2 + x);\n            }\n            return Math.log(x + 1);\n        };\n    }\n    if (typeof Math.expm1 === \"undefined\") {\n        Math.expm1 = function(x) {\n            if (Math.abs(x) < taylor_n_bound) {\n                var x2 = x * x;\n                var x3 = x2 * x;\n                var x4 = x3 * x;\n                // approximation by taylor series in x at 0 up to order 4\n                return (x4 / 24 + x3 / 6 + x2 / 2 + x);\n            }\n            return Math.exp(x) - 1;\n        };\n    }\n})();\nif (typeof Math.hypot === \"undefined\") {\n    Math.hypot = function() {\n        var y = 0;\n        var length = arguments.length;\n\n        for (var i = 0; i < length; i++) {\n            if (arguments[i] === Infinity || arguments[i] === -Infinity) {\n                return Infinity;\n            }\n            y += arguments[i] * arguments[i];\n        }\n        return Math.sqrt(y);\n    };\n}\nif (typeof Math.log10 === \"undefined\") {\n    Math.log10 = function(x) {\n        return Math.log(x) * Math.LOG10E;\n    };\n}\nif (typeof Math.log2 === \"undefined\") {\n    Math.log2 = function(x) {\n        return Math.log(x) * Math.LOG2E;\n    };\n}\nif (typeof Math.clz32 === \"undefined\") {\n    Math.clz32 = (function(log, LN2) {\n        return function(x) {\n            var asUint = x >>> 0;\n            if (asUint === 0) {\n                return 32;\n            }\n            return 31 - (log(asUint) / LN2 | 0) | 0; // the \"| 0\" acts like math.floor\n        };\n    })(Math.log, Math.LN2);\n}\n\n// For HtmlUnit and PhantomJs\nif (typeof ArrayBuffer.isView === \"undefined\") {\n    ArrayBuffer.isView = function(a) {\n        return a != null && a.__proto__ != null && a.__proto__.__proto__ === Int8Array.prototype.__proto__;\n    };\n}\n\nif (typeof Array.prototype.fill === \"undefined\") {\n    // Polyfill from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/fill#Polyfill\n    Object.defineProperty(Array.prototype, 'fill', {\n        value: function (value) {\n\n            // Steps 1-2.\n            if (this == null) {\n                throw new TypeError('this is null or not defined');\n            }\n\n            var O = Object(this);\n\n            // Steps 3-5.\n            var len = O.length >>> 0;\n\n            // Steps 6-7.\n            var start = arguments[1];\n            var relativeStart = start >> 0;\n\n            // Step 8.\n            var k = relativeStart < 0 ?\n                    Math.max(len + relativeStart, 0) :\n                    Math.min(relativeStart, len);\n\n            // Steps 9-10.\n            var end = arguments[2];\n            var relativeEnd = end === undefined ?\n                              len : end >> 0;\n\n            // Step 11.\n            var finalValue = relativeEnd < 0 ?\n                             Math.max(len + relativeEnd, 0) :\n                             Math.min(relativeEnd, len);\n\n            // Step 12.\n            while (k < finalValue) {\n                O[k] = value;\n                k++;\n            }\n\n            // Step 13.\n            return O;\n        }\n    });\n}\n\n(function() {\n    function normalizeOffset(offset, length) {\n        if (offset < 0) return Math.max(0, offset + length);\n        return Math.min(offset, length);\n    }\n    function typedArraySlice(begin, end) {\n        if (typeof end === \"undefined\") {\n            end = this.length;\n        }\n        begin = normalizeOffset(begin || 0, this.length);\n        end = Math.max(begin, normalizeOffset(end, this.length));\n        return new this.constructor(this.subarray(begin, end));\n    }\n\n    var arrays = [Int8Array, Int16Array, Uint16Array, Int32Array, Float32Array, Float64Array];\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.fill === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'fill', {\n                value: Array.prototype.fill\n            });\n        }\n        if (typeof TypedArray.prototype.slice === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'slice', {\n                value: typedArraySlice\n            });\n        }\n    }\n\n    // Patch apply to work with TypedArrays if needed.\n    try {\n        (function() {}).apply(null, new Int32Array(0))\n    } catch (e) {\n        var apply = Function.prototype.apply;\n        Object.defineProperty(Function.prototype, 'apply', {\n            value: function(self, array) {\n                return apply.call(this, self, [].slice.call(array));\n            }\n        });\n    }\n\n\n    // Patch map to work with TypedArrays if needed.\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.map === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'map', {\n                value: function(callback, self) {\n                    return [].slice.call(this).map(callback, self);\n                }\n            });\n        }\n    }\n\n    // Patch sort to work with TypedArrays if needed.\n    // TODO: consider to remove following function and replace it with `Kotlin.doubleCompareTo` (see misc.js)\n    var totalOrderComparator = function (a, b) {\n        if (a < b) return -1;\n        if (a > b) return 1;\n\n        if (a === b) {\n            if (a !== 0) return 0;\n\n            var ia = 1 / a;\n            return ia === 1 / b ? 0 : (ia < 0 ? -1 : 1);\n        }\n\n        return a !== a ? (b !== b ? 0 : 1) : -1\n    };\n\n    for (var i = 0; i < arrays.length; ++i) {\n        var TypedArray = arrays[i];\n        if (typeof TypedArray.prototype.sort === \"undefined\") {\n            Object.defineProperty(TypedArray.prototype, 'sort', {\n                value: function(compareFunction) {\n                    return Array.prototype.sort.call(this, compareFunction || totalOrderComparator);\n                }\n            });\n        }\n    }\n})();\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/**\n * @param {string} id\n * @param {Object} declaration\n */\nKotlin.defineModule = function (id, declaration) {\n};\n\nKotlin.defineInlineFunction = function(tag, fun) {\n    return fun;\n};\n\nKotlin.wrapFunction = function(fun) {\n    var f = function() {\n        f = fun();\n        return f.apply(this, arguments);\n    };\n    return function() {\n        return f.apply(this, arguments);\n    };\n};\n\nKotlin.isTypeOf = function(type) {\n    return function (object) {\n        return typeof object === type;\n    }\n};\n\nKotlin.isInstanceOf = function (klass) {\n    return function (object) {\n        return Kotlin.isType(object, klass);\n    }\n};\n\nKotlin.orNull = function (fn) {\n    return function (object) {\n        return object == null || fn(object);\n    }\n};\n\nKotlin.andPredicate = function (a, b) {\n    return function (object) {\n        return a(object) && b(object);\n    }\n};\n\nKotlin.kotlinModuleMetadata = function (abiVersion, moduleName, data) {\n};\n\nKotlin.suspendCall = function(value) {\n    return value;\n};\n\nKotlin.coroutineResult = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineController = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.coroutineReceiver = function(qualifier) {\n    throwMarkerError();\n};\n\nKotlin.setCoroutineResult = function(value, qualifier) {\n    throwMarkerError();\n};\n\nKotlin.getReifiedTypeParameterKType = function(typeParameter) {\n    throwMarkerError();\n};\n\nfunction throwMarkerError() {\n    throw new Error(\n        \"This marker function should never been called. \" +\n        \"Looks like compiler did not eliminate it properly. \" +\n        \"Please, report an issue if you caught this exception.\");\n}\n\nKotlin.getFunctionById = function(id, defaultValue) {\n    return function() {\n        return defaultValue;\n    }\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\nKotlin.Kind = {\n    CLASS: \"class\",\n    INTERFACE: \"interface\",\n    OBJECT: \"object\"\n};\n\nKotlin.callGetter = function (thisObject, klass, propertyName) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.get != null) {\n        return propertyDescriptor.get.call(thisObject);\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        return thisObject[propertyName];\n    }\n\n    return Kotlin.callGetter(thisObject, Object.getPrototypeOf(klass), propertyName);\n};\n\nKotlin.callSetter = function (thisObject, klass, propertyName, value) {\n    var propertyDescriptor = Object.getOwnPropertyDescriptor(klass, propertyName);\n    if (propertyDescriptor != null && propertyDescriptor.set != null) {\n        propertyDescriptor.set.call(thisObject, value);\n        return;\n    }\n\n    propertyDescriptor = Object.getOwnPropertyDescriptor(thisObject, propertyName);\n    if (propertyDescriptor != null && \"value\" in propertyDescriptor) {\n        thisObject[propertyName] = value;\n        return\n    }\n\n    Kotlin.callSetter(thisObject, Object.getPrototypeOf(klass), propertyName, value);\n};\n\nfunction isInheritanceFromInterface(ctor, iface) {\n    if (ctor === iface) return true;\n\n    var metadata = ctor.$metadata$;\n    if (metadata != null) {\n        var interfaces = metadata.interfaces;\n        for (var i = 0; i < interfaces.length; i++) {\n            if (isInheritanceFromInterface(interfaces[i], iface)) {\n                return true;\n            }\n        }\n    }\n\n    var superPrototype = ctor.prototype != null ? Object.getPrototypeOf(ctor.prototype) : null;\n    var superConstructor = superPrototype != null ? superPrototype.constructor : null;\n    return superConstructor != null && isInheritanceFromInterface(superConstructor, iface);\n}\n\n/**\n *\n * @param {*} object\n * @param {Function|Object} klass\n * @returns {Boolean}\n */\nKotlin.isType = function (object, klass) {\n    if (klass === Object) {\n        switch (typeof object) {\n            case \"string\":\n            case \"number\":\n            case \"boolean\":\n            case \"function\":\n                return true;\n            default:\n                return object instanceof Object;\n        }\n    }\n\n    if (object == null || klass == null || (typeof object !== 'object' && typeof object !== 'function')) {\n        return false;\n    }\n\n    if (typeof klass === \"function\" && object instanceof klass) {\n        return true;\n    }\n\n    var proto = Object.getPrototypeOf(klass);\n    var constructor = proto != null ? proto.constructor : null;\n    if (constructor != null && \"$metadata$\" in constructor) {\n        var metadata = constructor.$metadata$;\n        if (metadata.kind === Kotlin.Kind.OBJECT) {\n            return object === klass;\n        }\n    }\n\n    var klassMetadata = klass.$metadata$;\n\n    // In WebKit (JavaScriptCore) for some interfaces from DOM typeof returns \"object\", nevertheless they can be used in RHS of instanceof\n    if (klassMetadata == null) {\n        return object instanceof klass;\n    }\n\n    if (klassMetadata.kind === Kotlin.Kind.INTERFACE && object.constructor != null) {\n        return isInheritanceFromInterface(object.constructor, klass);\n    }\n\n    return false;\n};\n\nKotlin.isNumber = function (a) {\n    return typeof a == \"number\" || a instanceof Kotlin.Long;\n};\n\nKotlin.isChar = function (value) {\n    return value instanceof Kotlin.BoxedChar\n};\n\nKotlin.isComparable = function (value) {\n    var type = typeof value;\n\n    return type === \"string\" ||\n           type === \"boolean\" ||\n           Kotlin.isNumber(value) ||\n           Kotlin.isType(value, Kotlin.kotlin.Comparable);\n};\n\nKotlin.isCharSequence = function (value) {\n    return typeof value === \"string\" || Kotlin.isType(value, Kotlin.kotlin.CharSequence);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors. \n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Copyright 2009 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n/**\n * Constructs a 64-bit two's-complement integer, given its low and high 32-bit\n * values as *signed* integers.  See the from* functions below for more\n * convenient ways of constructing Longs.\n *\n * The internal representation of a long is the two given signed, 32-bit values.\n * We use 32-bit pieces because these are the size of integers on which\n * Javascript performs bit-operations.  For operations like addition and\n * multiplication, we split each number into 16-bit pieces, which can easily be\n * multiplied within Javascript's floating-point representation without overflow\n * or change in sign.\n *\n * In the algorithms below, we frequently reduce the negative case to the\n * positive case by negating the input(s) and then post-processing the result.\n * Note that we must ALWAYS check specially whether those values are MIN_VALUE\n * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n * a positive number, it overflows back into a negative).  Not handling this\n * case would often result in infinite recursion.\n *\n * @param {number} low  The low (signed) 32 bits of the long.\n * @param {number} high  The high (signed) 32 bits of the long.\n * @constructor\n * @final\n */\nKotlin.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @private\n   */\n  this.low_ = low | 0;  // force into 32 signed bits.\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.high_ = high | 0;  // force into 32 signed bits.\n};\n\nKotlin.Long.$metadata$ = {\n    kind: \"class\",\n    simpleName: \"Long\",\n    interfaces:[]\n};\n\n\n// NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the\n// from* methods on which they depend.\n\n\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @private\n */\nKotlin.Long.IntCache_ = {};\n\n\n/**\n * Returns a Long representing the given (32-bit) integer value.\n * @param {number} value The 32-bit integer in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromInt = function(value) {\n  if (-128 <= value && value < 128) {\n    var cachedObj = Kotlin.Long.IntCache_[value];\n    if (cachedObj) {\n      return cachedObj;\n    }\n  }\n\n  var obj = new Kotlin.Long(value | 0, value < 0 ? -1 : 0);\n  if (-128 <= value && value < 128) {\n    Kotlin.Long.IntCache_[value] = obj;\n  }\n  return obj;\n};\n\n\n/**\n * Converts this number value to `Long`.\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is `NaN`, `Long.MIN_VALUE` if it's less than `Long.MIN_VALUE`,\n * `Long.MAX_VALUE` if it's bigger than `Long.MAX_VALUE`.\n * @param {number} value The number in question.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromNumber = function(value) {\n  if (isNaN(value)) {\n    return Kotlin.Long.ZERO;\n  } else if (value <= -Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MIN_VALUE;\n  } else if (value + 1 >= Kotlin.Long.TWO_PWR_63_DBL_) {\n    return Kotlin.Long.MAX_VALUE;\n  } else if (value < 0) {\n    return Kotlin.Long.fromNumber(-value).negate();\n  } else {\n    return new Kotlin.Long(\n        (value % Kotlin.Long.TWO_PWR_32_DBL_) | 0,\n        (value / Kotlin.Long.TWO_PWR_32_DBL_) | 0);\n  }\n};\n\n\n/**\n * Returns a Long representing the 64-bit integer that comes by concatenating\n * the given high and low bits.  Each is assumed to use 32 bits.\n * @param {number} lowBits The low 32-bits.\n * @param {number} highBits The high 32-bits.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromBits = function(lowBits, highBits) {\n  return new Kotlin.Long(lowBits, highBits);\n};\n\n\n/**\n * Returns a Long representation of the given string, written using the given\n * radix.\n * @param {string} str The textual representation of the Long.\n * @param {number=} opt_radix The radix in which the text is written.\n * @return {!Kotlin.Long} The corresponding Long value.\n */\nKotlin.Long.fromString = function(str, opt_radix) {\n  if (str.length == 0) {\n    throw Error('number format error: empty string');\n  }\n\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (str.charAt(0) == '-') {\n    return Kotlin.Long.fromString(str.substring(1), radix).negate();\n  } else if (str.indexOf('-') >= 0) {\n    throw Error('number format error: interior \"-\" character: ' + str);\n  }\n\n  // Do several (8) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 8));\n\n  var result = Kotlin.Long.ZERO;\n  for (var i = 0; i < str.length; i += 8) {\n    var size = Math.min(8, str.length - i);\n    var value = parseInt(str.substring(i, i + size), radix);\n    if (size < 8) {\n      var power = Kotlin.Long.fromNumber(Math.pow(radix, size));\n      result = result.multiply(power).add(Kotlin.Long.fromNumber(value));\n    } else {\n      result = result.multiply(radixToPower);\n      result = result.add(Kotlin.Long.fromNumber(value));\n    }\n  }\n  return result;\n};\n\n\n// NOTE: the compiler should inline these constant values below and then remove\n// these variables, so there should be no runtime penalty for these.\n\n\n/**\n * Number used repeated below in calculations.  This must appear before the\n * first call to any from* function below.\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_16_DBL_ = 1 << 16;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_24_DBL_ = 1 << 24;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_32_DBL_ =\n    Kotlin.Long.TWO_PWR_16_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_31_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ / 2;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_48_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_16_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_64_DBL_ =\n    Kotlin.Long.TWO_PWR_32_DBL_ * Kotlin.Long.TWO_PWR_32_DBL_;\n\n\n/**\n * @type {number}\n * @private\n */\nKotlin.Long.TWO_PWR_63_DBL_ =\n    Kotlin.Long.TWO_PWR_64_DBL_ / 2;\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ZERO = Kotlin.Long.fromInt(0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.ONE = Kotlin.Long.fromInt(1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.NEG_ONE = Kotlin.Long.fromInt(-1);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MAX_VALUE =\n    Kotlin.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);\n\n\n/** @type {!Kotlin.Long} */\nKotlin.Long.MIN_VALUE = Kotlin.Long.fromBits(0, 0x80000000 | 0);\n\n\n/**\n * @type {!Kotlin.Long}\n * @private\n */\nKotlin.Long.TWO_PWR_24_ = Kotlin.Long.fromInt(1 << 24);\n\n\n/** @return {number} The value, assuming it is a 32-bit integer. */\nKotlin.Long.prototype.toInt = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The closest floating-point representation to this value. */\nKotlin.Long.prototype.toNumber = function() {\n  return this.high_ * Kotlin.Long.TWO_PWR_32_DBL_ +\n         this.getLowBitsUnsigned();\n};\n\n/** @return {number} The 32-bit hashCode of this value. */\nKotlin.Long.prototype.hashCode = function() {\n  return this.high_ ^ this.low_;\n};\n\n/**\n * @param {number=} opt_radix The radix in which the text should be written.\n * @return {string} The textual representation of this value.\n * @override\n */\nKotlin.Long.prototype.toString = function(opt_radix) {\n  var radix = opt_radix || 10;\n  if (radix < 2 || 36 < radix) {\n    throw Error('radix out of range: ' + radix);\n  }\n\n  if (this.isZero()) {\n    return '0';\n  }\n\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      // We need to change the Long value before it can be negated, so we remove\n      // the bottom-most digit in this base and then recurse to do the rest.\n      var radixLong = Kotlin.Long.fromNumber(radix);\n      var div = this.div(radixLong);\n      var rem = div.multiply(radixLong).subtract(this);\n      return div.toString(radix) + rem.toInt().toString(radix);\n    } else {\n      return '-' + this.negate().toString(radix);\n    }\n  }\n\n  // Do several (5) digits each time through the loop, so as to\n  // minimize the calls to the very expensive emulated div.\n  var radixToPower = Kotlin.Long.fromNumber(Math.pow(radix, 5));\n\n  var rem = this;\n  var result = '';\n  while (true) {\n    var remDiv = rem.div(radixToPower);\n    var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();\n    var digits = intval.toString(radix);\n\n    rem = remDiv;\n    if (rem.isZero()) {\n      return digits + result;\n    } else {\n      while (digits.length < 5) {\n        digits = '0' + digits;\n      }\n      result = '' + digits + result;\n    }\n  }\n};\n\n\n/** @return {number} The high 32-bits as a signed value. */\nKotlin.Long.prototype.getHighBits = function() {\n  return this.high_;\n};\n\n\n/** @return {number} The low 32-bits as a signed value. */\nKotlin.Long.prototype.getLowBits = function() {\n  return this.low_;\n};\n\n\n/** @return {number} The low 32-bits as an unsigned value. */\nKotlin.Long.prototype.getLowBitsUnsigned = function() {\n  return (this.low_ >= 0) ?\n      this.low_ : Kotlin.Long.TWO_PWR_32_DBL_ + this.low_;\n};\n\n\n/**\n * @return {number} Returns the number of bits needed to represent the absolute\n *     value of this Long.\n */\nKotlin.Long.prototype.getNumBitsAbs = function() {\n  if (this.isNegative()) {\n    if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return 64;\n    } else {\n      return this.negate().getNumBitsAbs();\n    }\n  } else {\n    var val = this.high_ != 0 ? this.high_ : this.low_;\n    for (var bit = 31; bit > 0; bit--) {\n      if ((val & (1 << bit)) != 0) {\n        break;\n      }\n    }\n    return this.high_ != 0 ? bit + 33 : bit + 1;\n  }\n};\n\n\n/** @return {boolean} Whether this value is zero. */\nKotlin.Long.prototype.isZero = function() {\n  return this.high_ == 0 && this.low_ == 0;\n};\n\n\n/** @return {boolean} Whether this value is negative. */\nKotlin.Long.prototype.isNegative = function() {\n  return this.high_ < 0;\n};\n\n\n/** @return {boolean} Whether this value is odd. */\nKotlin.Long.prototype.isOdd = function() {\n  return (this.low_ & 1) == 1;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long equals the other.\n */\nKotlin.Long.prototype.equalsLong = function(other) {\n  return (this.high_ == other.high_) && (this.low_ == other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long does not equal the other.\n */\nKotlin.Long.prototype.notEqualsLong = function(other) {\n  return (this.high_ != other.high_) || (this.low_ != other.low_);\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than the other.\n */\nKotlin.Long.prototype.lessThan = function(other) {\n  return this.compare(other) < 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is less than or equal to the other.\n */\nKotlin.Long.prototype.lessThanOrEqual = function(other) {\n  return this.compare(other) <= 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than the other.\n */\nKotlin.Long.prototype.greaterThan = function(other) {\n  return this.compare(other) > 0;\n};\n\n\n/**\n * @param {Kotlin.Long} other Long to compare against.\n * @return {boolean} Whether this Long is greater than or equal to the other.\n */\nKotlin.Long.prototype.greaterThanOrEqual = function(other) {\n  return this.compare(other) >= 0;\n};\n\n\n/**\n * Compares this Long with the given one.\n * @param {Kotlin.Long} other Long to compare against.\n * @return {number} 0 if they are the same, 1 if the this is greater, and -1\n *     if the given one is greater.\n */\nKotlin.Long.prototype.compare = function(other) {\n  if (this.equalsLong(other)) {\n    return 0;\n  }\n\n  var thisNeg = this.isNegative();\n  var otherNeg = other.isNegative();\n  if (thisNeg && !otherNeg) {\n    return -1;\n  }\n  if (!thisNeg && otherNeg) {\n    return 1;\n  }\n\n  // at this point, the signs are the same, so subtraction will not overflow\n  if (this.subtract(other).isNegative()) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\n\n/** @return {!Kotlin.Long} The negation of this value. */\nKotlin.Long.prototype.negate = function() {\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.MIN_VALUE;\n  } else {\n    return this.not().add(Kotlin.Long.ONE);\n  }\n};\n\n\n/**\n * Returns the sum of this and the given Long.\n * @param {Kotlin.Long} other Long to add to this one.\n * @return {!Kotlin.Long} The sum of this and the given Long.\n */\nKotlin.Long.prototype.add = function(other) {\n  // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 + b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 + b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 + b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 + b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns the difference of this and the given Long.\n * @param {Kotlin.Long} other Long to subtract from this.\n * @return {!Kotlin.Long} The difference of this and the given Long.\n */\nKotlin.Long.prototype.subtract = function(other) {\n  return this.add(other.negate());\n};\n\n\n/**\n * Returns the product of this and the given long.\n * @param {Kotlin.Long} other Long to multiply with this.\n * @return {!Kotlin.Long} The product of this and the other.\n */\nKotlin.Long.prototype.multiply = function(other) {\n  if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  } else if (other.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return other.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return this.isOdd() ? Kotlin.Long.MIN_VALUE : Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().multiply(other.negate());\n    } else {\n      return this.negate().multiply(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.multiply(other.negate()).negate();\n  }\n\n  // If both longs are small, use float multiplication\n  if (this.lessThan(Kotlin.Long.TWO_PWR_24_) &&\n      other.lessThan(Kotlin.Long.TWO_PWR_24_)) {\n    return Kotlin.Long.fromNumber(this.toNumber() * other.toNumber());\n  }\n\n  // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n  // We can skip products that would overflow.\n\n  var a48 = this.high_ >>> 16;\n  var a32 = this.high_ & 0xFFFF;\n  var a16 = this.low_ >>> 16;\n  var a00 = this.low_ & 0xFFFF;\n\n  var b48 = other.high_ >>> 16;\n  var b32 = other.high_ & 0xFFFF;\n  var b16 = other.low_ >>> 16;\n  var b00 = other.low_ & 0xFFFF;\n\n  var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n  c00 += a00 * b00;\n  c16 += c00 >>> 16;\n  c00 &= 0xFFFF;\n  c16 += a16 * b00;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c16 += a00 * b16;\n  c32 += c16 >>> 16;\n  c16 &= 0xFFFF;\n  c32 += a32 * b00;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a16 * b16;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c32 += a00 * b32;\n  c48 += c32 >>> 16;\n  c32 &= 0xFFFF;\n  c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n  c48 &= 0xFFFF;\n  return Kotlin.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);\n};\n\n\n/**\n * Returns this Long divided by the given one.\n * @param {Kotlin.Long} other Long by which to divide.\n * @return {!Kotlin.Long} This Long divided by the given one.\n */\nKotlin.Long.prototype.div = function(other) {\n  if (other.isZero()) {\n    throw Error('division by zero');\n  } else if (this.isZero()) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    if (other.equalsLong(Kotlin.Long.ONE) ||\n        other.equalsLong(Kotlin.Long.NEG_ONE)) {\n      return Kotlin.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\n    } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n      return Kotlin.Long.ONE;\n    } else {\n      // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n      var halfThis = this.shiftRight(1);\n      var approx = halfThis.div(other).shiftLeft(1);\n      if (approx.equalsLong(Kotlin.Long.ZERO)) {\n        return other.isNegative() ? Kotlin.Long.ONE : Kotlin.Long.NEG_ONE;\n      } else {\n        var rem = this.subtract(other.multiply(approx));\n        var result = approx.add(rem.div(other));\n        return result;\n      }\n    }\n  } else if (other.equalsLong(Kotlin.Long.MIN_VALUE)) {\n    return Kotlin.Long.ZERO;\n  }\n\n  if (this.isNegative()) {\n    if (other.isNegative()) {\n      return this.negate().div(other.negate());\n    } else {\n      return this.negate().div(other).negate();\n    }\n  } else if (other.isNegative()) {\n    return this.div(other.negate()).negate();\n  }\n\n  // Repeat the following until the remainder is less than other:  find a\n  // floating-point that approximates remainder / other *from below*, add this\n  // into the result, and subtract it from the remainder.  It is critical that\n  // the approximate value is less than or equal to the real value so that the\n  // remainder never becomes negative.\n  var res = Kotlin.Long.ZERO;\n  var rem = this;\n  while (rem.greaterThanOrEqual(other)) {\n    // Approximate the result of division. This may be a little greater or\n    // smaller than the actual value.\n    var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));\n\n    // We will tweak the approximate result by changing it in the 48-th digit or\n    // the smallest non-fractional digit, whichever is larger.\n    var log2 = Math.ceil(Math.log(approx) / Math.LN2);\n    var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);\n\n    // Decrease the approximation until it is smaller than the remainder.  Note\n    // that if it is too large, the product overflows and is negative.\n    var approxRes = Kotlin.Long.fromNumber(approx);\n    var approxRem = approxRes.multiply(other);\n    while (approxRem.isNegative() || approxRem.greaterThan(rem)) {\n      approx -= delta;\n      approxRes = Kotlin.Long.fromNumber(approx);\n      approxRem = approxRes.multiply(other);\n    }\n\n    // We know the answer can't be zero... and actually, zero would cause\n    // infinite recursion since we would make no progress.\n    if (approxRes.isZero()) {\n      approxRes = Kotlin.Long.ONE;\n    }\n\n    res = res.add(approxRes);\n    rem = rem.subtract(approxRem);\n  }\n  return res;\n};\n\n\n/**\n * Returns this Long modulo the given one.\n * @param {Kotlin.Long} other Long by which to mod.\n * @return {!Kotlin.Long} This Long modulo the given one.\n */\nKotlin.Long.prototype.modulo = function(other) {\n  return this.subtract(this.div(other).multiply(other));\n};\n\n\n/** @return {!Kotlin.Long} The bitwise-NOT of this value. */\nKotlin.Long.prototype.not = function() {\n  return Kotlin.Long.fromBits(~this.low_, ~this.high_);\n};\n\n\n/**\n * Returns the bitwise-AND of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to AND.\n * @return {!Kotlin.Long} The bitwise-AND of this and the other.\n */\nKotlin.Long.prototype.and = function(other) {\n  return Kotlin.Long.fromBits(this.low_ & other.low_,\n                                 this.high_ & other.high_);\n};\n\n\n/**\n * Returns the bitwise-OR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to OR.\n * @return {!Kotlin.Long} The bitwise-OR of this and the other.\n */\nKotlin.Long.prototype.or = function(other) {\n  return Kotlin.Long.fromBits(this.low_ | other.low_,\n                                 this.high_ | other.high_);\n};\n\n\n/**\n * Returns the bitwise-XOR of this Long and the given one.\n * @param {Kotlin.Long} other The Long with which to XOR.\n * @return {!Kotlin.Long} The bitwise-XOR of this and the other.\n */\nKotlin.Long.prototype.xor = function(other) {\n  return Kotlin.Long.fromBits(this.low_ ^ other.low_,\n                                 this.high_ ^ other.high_);\n};\n\n\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the left by the given amount.\n */\nKotlin.Long.prototype.shiftLeft = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var low = this.low_;\n    if (numBits < 32) {\n      var high = this.high_;\n      return Kotlin.Long.fromBits(\n          low << numBits,\n          (high << numBits) | (low >>> (32 - numBits)));\n    } else {\n      return Kotlin.Long.fromBits(0, low << (numBits - 32));\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount.\n */\nKotlin.Long.prototype.shiftRight = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >> numBits);\n    } else {\n      return Kotlin.Long.fromBits(\n          high >> (numBits - 32),\n          high >= 0 ? 0 : -1);\n    }\n  }\n};\n\n\n/**\n * Returns this Long with bits shifted to the right by the given amount, with\n * zeros placed into the new leading bits.\n * @param {number} numBits The number of bits by which to shift.\n * @return {!Kotlin.Long} This shifted to the right by the given amount, with\n *     zeros placed into the new leading bits.\n */\nKotlin.Long.prototype.shiftRightUnsigned = function(numBits) {\n  numBits &= 63;\n  if (numBits == 0) {\n    return this;\n  } else {\n    var high = this.high_;\n    if (numBits < 32) {\n      var low = this.low_;\n      return Kotlin.Long.fromBits(\n          (low >>> numBits) | (high << (32 - numBits)),\n          high >>> numBits);\n    } else if (numBits == 32) {\n      return Kotlin.Long.fromBits(high, 0);\n    } else {\n      return Kotlin.Long.fromBits(high >>> (numBits - 32), 0);\n    }\n  }\n};\n\n// Support for Kotlin\nKotlin.Long.prototype.equals = function (other) {\n    return other instanceof Kotlin.Long && this.equalsLong(other);\n};\n\nKotlin.Long.prototype.compareTo_11rb$ = Kotlin.Long.prototype.compare;\n\nKotlin.Long.prototype.inc = function() {\n    return this.add(Kotlin.Long.ONE);\n};\n\nKotlin.Long.prototype.dec = function() {\n    return this.add(Kotlin.Long.NEG_ONE);\n};\n\nKotlin.Long.prototype.valueOf = function() {\n    return this.toNumber();\n};\n\nKotlin.Long.prototype.unaryPlus = function() {\n    return this;\n};\n\nKotlin.Long.prototype.unaryMinus = Kotlin.Long.prototype.negate;\nKotlin.Long.prototype.inv = Kotlin.Long.prototype.not;\n\nKotlin.Long.prototype.rangeTo = function (other) {\n    return new Kotlin.kotlin.ranges.LongRange(this, other);\n};","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\npublic class Enum<T : Enum<T>> : Comparable<Enum<T>> {\n    @JsName(\"name$\") private var _name: String = \"\"\n    @JsName(\"ordinal$\") private var _ordinal: Int = 0\n\n    val name: String\n        get() = _name\n\n    val ordinal: Int\n        get() = _ordinal\n\n    override fun compareTo(other: Enum<T>) = ordinal.compareTo(other.ordinal)\n\n    override fun equals(other: Any?) = this === other\n\n    override fun hashCode(): Int = js(\"Kotlin.identityHashCode\")(this)\n\n    override fun toString() = name\n\n    companion object\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@PublishedApi\nexternal internal fun <T> Array(size: Int): Array<T>\n\n@JsName(\"newArray\")\nfun <T> newArray(size: Int, initValue: T) = fillArrayVal(Array<T>(size), initValue)\n\n@JsName(\"newArrayF\")\ninline fun <T> arrayWithFun(size: Int, init: (Int) -> T) = fillArrayFun(Array<T>(size), init)\n\n@JsName(\"fillArray\")\ninline fun <T> fillArrayFun(array: Array<T>, init: (Int) -> T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = init(i)\n    }\n    return array\n}\n\n@JsName(\"booleanArray\")\nfun booleanArray(size: Int, init: dynamic): Array<Boolean> {\n    val result: dynamic = Array<Boolean>(size)\n    result.`$type$` = \"BooleanArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, false)\n        false -> result\n        else -> fillArrayFun<Boolean>(result, init)\n    }\n}\n\n@JsName(\"booleanArrayF\")\ninline fun booleanArrayWithFun(size: Int, init: (Int) -> Boolean): Array<Boolean> = fillArrayFun(booleanArray(size, false), init)\n\n@JsName(\"charArray\")\n@Suppress(\"UNUSED_PARAMETER\")\nfun charArray(size: Int, init: dynamic): Array<Char> {\n    val result = js(\"new Uint16Array(size)\")\n    result.`$type$` = \"CharArray\"\n    return when (init) {\n        null, true, false -> result // For consistency\n        else -> fillArrayFun<Char>(result, init)\n    }\n}\n\n@JsName(\"charArrayF\")\ninline fun charArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = charArray(size, null)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"untypedCharArrayF\")\ninline fun untypedCharArrayWithFun(size: Int, init: (Int) -> Char): Array<Char> {\n    val array = Array<Char>(size)\n    for (i in 0..array.size - 1) {\n        @Suppress(\"UNUSED_VARIABLE\") // used in js block\n        val value = init(i)\n        js(\"array[i] = value;\")\n    }\n    return array\n}\n\n@JsName(\"longArray\")\nfun longArray(size: Int, init: dynamic): Array<Long> {\n    val result: dynamic = Array<Long>(size)\n    result.`$type$` = \"LongArray\"\n    return when (init) {\n        null, true -> fillArrayVal(result, 0L)\n        false -> result\n        else -> fillArrayFun<Long>(result, init)\n    }\n}\n\n@JsName(\"longArrayF\")\ninline fun longArrayWithFun(size: Int, init: (Int) -> Long): Array<Long> = fillArrayFun(longArray(size, false), init)\n\nprivate fun <T> fillArrayVal(array: Array<T>, initValue: T): Array<T> {\n    for (i in 0..array.size - 1) {\n        array[i] = initValue\n    }\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js.internal\n\n@JsName(\"DoubleCompanionObject\")\ninternal object DoubleCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    const val MIN_VALUE: Double = 4.9E-324\n\n    @JsName(\"MAX_VALUE\")\n    const val MAX_VALUE: Double = 1.7976931348623157E308\n\n    @JsName(\"POSITIVE_INFINITY\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val POSITIVE_INFINITY: Double = 1.0 / 0.0\n\n    @JsName(\"NEGATIVE_INFINITY\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val NEGATIVE_INFINITY: Double = -1.0 / 0.0\n\n    @JsName(\"NaN\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val NaN: Double = -(0.0 / 0.0)\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 8\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 64\n}\n\n@JsName(\"FloatCompanionObject\")\ninternal  object FloatCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    const val MIN_VALUE: Float = 1.4E-45F\n\n    @JsName(\"MAX_VALUE\")\n    const val MAX_VALUE: Float = 3.4028235E38F\n\n    @JsName(\"POSITIVE_INFINITY\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val POSITIVE_INFINITY: Float = 1.0F / 0.0F\n\n    @JsName(\"NEGATIVE_INFINITY\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val NEGATIVE_INFINITY: Float = -1.0F / 0.0F\n\n    @JsName(\"NaN\")\n    @Suppress(\"DIVISION_BY_ZERO\")\n    const val NaN: Float = -(0.0F / 0.0F)\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 4\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 32\n}\n\n@JsName(\"IntCompanionObject\")\ninternal  object IntCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    val MIN_VALUE: Int = -2147483647 - 1\n\n    @JsName(\"MAX_VALUE\")\n    val MAX_VALUE: Int = 2147483647\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 4\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 32\n}\n\n@JsName(\"LongCompanionObject\")\ninternal  object LongCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    val MIN_VALUE: Long = js(\"Kotlin.Long.MIN_VALUE\")\n\n    @JsName(\"MAX_VALUE\")\n    val MAX_VALUE: Long = js(\"Kotlin.Long.MAX_VALUE\")\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 8\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 64\n}\n\n@JsName(\"ShortCompanionObject\")\ninternal  object ShortCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    val MIN_VALUE: Short = -32768\n\n    @JsName(\"MAX_VALUE\")\n    val MAX_VALUE: Short = 32767\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 2\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 16\n}\n\n@JsName(\"ByteCompanionObject\")\ninternal  object ByteCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    val MIN_VALUE: Byte = -128\n\n    @JsName(\"MAX_VALUE\")\n    val MAX_VALUE: Byte = 127\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 1\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 8\n}\n\n@JsName(\"CharCompanionObject\")\ninternal  object CharCompanionObject {\n    @JsName(\"MIN_VALUE\")\n    public const val MIN_VALUE: Char = '\\u0000'\n\n    @JsName(\"MAX_VALUE\")\n    public const val MAX_VALUE: Char = '\\uFFFF'\n\n    @JsName(\"MIN_HIGH_SURROGATE\")\n    public const val MIN_HIGH_SURROGATE: Char = '\\uD800'\n\n    @JsName(\"MAX_HIGH_SURROGATE\")\n    public const val MAX_HIGH_SURROGATE: Char = '\\uDBFF'\n\n    @JsName(\"MIN_LOW_SURROGATE\")\n    public const val MIN_LOW_SURROGATE: Char = '\\uDC00'\n\n    @JsName(\"MAX_LOW_SURROGATE\")\n    public const val MAX_LOW_SURROGATE: Char = '\\uDFFF'\n\n    @JsName(\"MIN_SURROGATE\")\n    public const val MIN_SURROGATE: Char = MIN_HIGH_SURROGATE\n\n    @JsName(\"MAX_SURROGATE\")\n    public const val MAX_SURROGATE: Char = MAX_LOW_SURROGATE\n\n    @JsName(\"SIZE_BYTES\")\n    const val SIZE_BYTES = 2\n\n    @JsName(\"SIZE_BITS\")\n    const val SIZE_BITS = 16\n}\n\ninternal  object StringCompanionObject {}\n\ninternal  object BooleanCompanionObject {}\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"ArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component1(): Byte {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component1(): Short {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component1(): Int {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component1(): Long {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component1(): Float {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component1(): Double {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component1(): Boolean {\n    return get(0)\n}\n\n/**\n * Returns 1st *element* from the array.\n * \n * If the size of this array is less than 1, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component1(): Char {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component2(): Byte {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component2(): Short {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component2(): Int {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component2(): Long {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component2(): Float {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component2(): Double {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component2(): Boolean {\n    return get(1)\n}\n\n/**\n * Returns 2nd *element* from the array.\n * \n * If the size of this array is less than 2, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component2(): Char {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component3(): Byte {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component3(): Short {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component3(): Int {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component3(): Long {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component3(): Float {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component3(): Double {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component3(): Boolean {\n    return get(2)\n}\n\n/**\n * Returns 3rd *element* from the array.\n * \n * If the size of this array is less than 3, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component3(): Char {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component4(): Byte {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component4(): Short {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component4(): Int {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component4(): Long {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component4(): Float {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component4(): Double {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component4(): Boolean {\n    return get(3)\n}\n\n/**\n * Returns 4th *element* from the array.\n * \n * If the size of this array is less than 4, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component4(): Char {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> Array<out T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ByteArray.component5(): Byte {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun ShortArray.component5(): Short {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntArray.component5(): Int {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongArray.component5(): Long {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun FloatArray.component5(): Float {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun DoubleArray.component5(): Double {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun BooleanArray.component5(): Boolean {\n    return get(4)\n}\n\n/**\n * Returns 5th *element* from the array.\n * \n * If the size of this array is less than 5, throws an [IndexOutOfBoundsException] except in Kotlin/JS\n * where the behavior is unspecified.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharArray.component5(): Char {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ByteArray.contains(element: Byte): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun ShortArray.contains(element: Short): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun IntArray.contains(element: Int): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun LongArray.contains(element: Long): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic operator fun FloatArray.contains(element: Float): Boolean {\n    return any { it == element }\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'any { it == element }' instead to continue using this behavior, or '.asList().contains(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"any { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic operator fun DoubleArray.contains(element: Double): Boolean {\n    return any { it == element }\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun BooleanArray.contains(element: Boolean): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns `true` if [element] is found in the array.\n */\npublic operator fun CharArray.contains(element: Char): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun <T> Array<out T>.elementAt(index: Int): T\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ByteArray.elementAt(index: Int): Byte\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun ShortArray.elementAt(index: Int): Short\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun IntArray.elementAt(index: Int): Int\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun LongArray.elementAt(index: Int): Long\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun FloatArray.elementAt(index: Int): Float\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun DoubleArray.elementAt(index: Int): Double\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun BooleanArray.elementAt(index: Int): Boolean\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharArray.elementAt(index: Int): Char\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.elementAtOrNull(index: Int): Byte? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.elementAtOrNull(index: Int): Short? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.elementAtOrNull(index: Int): Int? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.elementAtOrNull(index: Int): Long? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.elementAtOrNull(index: Int): Float? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.elementAtOrNull(index: Int): Double? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.elementAtOrNull(index: Int): Boolean? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.find(predicate: (Byte) -> Boolean): Byte? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.find(predicate: (Short) -> Boolean): Short? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.find(predicate: (Int) -> Boolean): Int? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.find(predicate: (Long) -> Boolean): Long? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.find(predicate: (Float) -> Boolean): Float? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.find(predicate: (Double) -> Boolean): Double? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.find(predicate: (Boolean) -> Boolean): Boolean? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.findLast(predicate: (Byte) -> Boolean): Byte? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.findLast(predicate: (Short) -> Boolean): Short? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.findLast(predicate: (Int) -> Boolean): Int? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.findLast(predicate: (Long) -> Boolean): Long? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.findLast(predicate: (Float) -> Boolean): Float? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.findLast(predicate: (Double) -> Boolean): Double? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.findLast(predicate: (Boolean) -> Boolean): Boolean? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun <T> Array<out T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun ByteArray.first(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun ShortArray.first(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun IntArray.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun LongArray.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun FloatArray.first(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun DoubleArray.first(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun BooleanArray.first(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\npublic fun CharArray.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Array<out T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ByteArray.first(predicate: (Byte) -> Boolean): Byte {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun ShortArray.first(predicate: (Short) -> Boolean): Short {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun IntArray.first(predicate: (Int) -> Boolean): Int {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun LongArray.first(predicate: (Long) -> Boolean): Long {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun FloatArray.first(predicate: (Float) -> Boolean): Float {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun DoubleArray.first(predicate: (Double) -> Boolean): Double {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun BooleanArray.first(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun CharArray.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the array was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this array in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Array<out T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun <T> Array<out T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ByteArray.firstOrNull(): Byte? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun ShortArray.firstOrNull(): Short? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun IntArray.firstOrNull(): Int? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun LongArray.firstOrNull(): Long? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun FloatArray.firstOrNull(): Float? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun DoubleArray.firstOrNull(): Double? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun BooleanArray.firstOrNull(): Boolean? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element, or `null` if the array is empty.\n */\npublic fun CharArray.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Array<out T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ByteArray.firstOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun ShortArray.firstOrNull(predicate: (Short) -> Boolean): Short? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun IntArray.firstOrNull(predicate: (Int) -> Boolean): Int? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun LongArray.firstOrNull(predicate: (Long) -> Boolean): Long? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun FloatArray.firstOrNull(predicate: (Float) -> Boolean): Float? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun DoubleArray.firstOrNull(predicate: (Double) -> Boolean): Double? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun BooleanArray.firstOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun CharArray.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.getOrElse(index: Int, defaultValue: (Int) -> Byte): Byte {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.getOrElse(index: Int, defaultValue: (Int) -> Short): Short {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.getOrElse(index: Int, defaultValue: (Int) -> Int): Int {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.getOrElse(index: Int, defaultValue: (Int) -> Long): Long {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.getOrElse(index: Int, defaultValue: (Int) -> Float): Float {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.getOrElse(index: Int, defaultValue: (Int) -> Double): Double {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.getOrElse(index: Int, defaultValue: (Int) -> Boolean): Boolean {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> Array<out T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ByteArray.getOrNull(index: Int): Byte? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun ShortArray.getOrNull(index: Int): Short? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun IntArray.getOrNull(index: Int): Int? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun LongArray.getOrNull(index: Int): Long? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun FloatArray.getOrNull(index: Int): Float? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun DoubleArray.getOrNull(index: Int): Double? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun BooleanArray.getOrNull(index: Int): Boolean? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharArray.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.indexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.indexOf(element: Byte): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.indexOf(element: Short): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.indexOf(element: Int): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.indexOf(element: Long): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun FloatArray.indexOf(element: Float): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfFirst { it == element }' instead to continue using this behavior, or '.asList().indexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfFirst { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun DoubleArray.indexOf(element: Double): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.indexOf(element: Boolean): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.indexOf(element: Char): Int {\n    for (index in indices) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfFirst(predicate: (Byte) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfFirst(predicate: (Short) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfFirst(predicate: (Int) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfFirst(predicate: (Long) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfFirst(predicate: (Float) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfFirst(predicate: (Double) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfFirst(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun <T> Array<out T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ByteArray.indexOfLast(predicate: (Byte) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun ShortArray.indexOfLast(predicate: (Short) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun IntArray.indexOfLast(predicate: (Int) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun LongArray.indexOfLast(predicate: (Long) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun FloatArray.indexOfLast(predicate: (Float) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun DoubleArray.indexOfLast(predicate: (Double) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun BooleanArray.indexOfLast(predicate: (Boolean) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the array does not contain such element.\n */\npublic inline fun CharArray.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.last(): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.last(): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.last(): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.last(): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.last(): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.last(predicate: (T) -> Boolean): T {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.last(predicate: (Byte) -> Boolean): Byte {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.last(predicate: (Short) -> Boolean): Short {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.last(predicate: (Int) -> Boolean): Int {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.last(predicate: (Long) -> Boolean): Long {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.last(predicate: (Float) -> Boolean): Float {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.last(predicate: (Double) -> Boolean): Double {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.last(predicate: (Boolean) -> Boolean): Boolean {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Array<out T>.lastIndexOf(element: T): Int {\n    if (element == null) {\n        for (index in indices.reversed()) {\n            if (this[index] == null) {\n                return index\n            }\n        }\n    } else {\n        for (index in indices.reversed()) {\n            if (element == this[index]) {\n                return index\n            }\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ByteArray.lastIndexOf(element: Byte): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun ShortArray.lastIndexOf(element: Short): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun IntArray.lastIndexOf(element: Int): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun LongArray.lastIndexOf(element: Long): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun FloatArray.lastIndexOf(element: Float): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\n@Deprecated(\"The function has unclear behavior when searching for NaN or zero values and will be removed soon. Use 'indexOfLast { it == element }' instead to continue using this behavior, or '.asList().lastIndexOf(element: T)' to get the same search behavior as in a list.\", ReplaceWith(\"indexOfLast { it == element }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.6\", hiddenSince = \"1.7\")\npublic fun DoubleArray.lastIndexOf(element: Double): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun BooleanArray.lastIndexOf(element: Boolean): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns last index of [element], or -1 if the array does not contain element.\n */\npublic fun CharArray.lastIndexOf(element: Char): Int {\n    for (index in indices.reversed()) {\n        if (element == this[index]) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Array<out T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ByteArray.lastOrNull(): Byte? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun ShortArray.lastOrNull(): Short? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun IntArray.lastOrNull(): Int? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun LongArray.lastOrNull(): Long? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun FloatArray.lastOrNull(): Float? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun DoubleArray.lastOrNull(): Double? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun BooleanArray.lastOrNull(): Boolean? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element, or `null` if the array is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun CharArray.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Array<out T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ByteArray.lastOrNull(predicate: (Byte) -> Boolean): Byte? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun ShortArray.lastOrNull(predicate: (Short) -> Boolean): Short? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun IntArray.lastOrNull(predicate: (Int) -> Boolean): Int? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun LongArray.lastOrNull(predicate: (Long) -> Boolean): Long? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun FloatArray.lastOrNull(predicate: (Float) -> Boolean): Float? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun DoubleArray.lastOrNull(predicate: (Double) -> Boolean): Double? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun BooleanArray.lastOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun CharArray.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.random(): Byte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.random(): Short {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.random(): Float {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.random(): Double {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.random(): Boolean {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Array<out T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ByteArray.random(random: Random): Byte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun ShortArray.random(random: Random): Short {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntArray.random(random: Random): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongArray.random(random: Random): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun FloatArray.random(random: Random): Float {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun DoubleArray.random(random: Random): Double {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun BooleanArray.random(random: Random): Boolean {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharArray.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.randomOrNull(): Byte? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.randomOrNull(): Short? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.randomOrNull(): Float? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.randomOrNull(): Double? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.randomOrNull(): Boolean? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Array<out T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ByteArray.randomOrNull(random: Random): Byte? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun ShortArray.randomOrNull(random: Random): Short? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntArray.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongArray.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun FloatArray.randomOrNull(random: Random): Float? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun DoubleArray.randomOrNull(random: Random): Double? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun BooleanArray.randomOrNull(random: Random): Boolean? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness, or `null` if this array is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharArray.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ByteArray.single(): Byte {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun ShortArray.single(): Short {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun IntArray.single(): Int {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun LongArray.single(): Long {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun FloatArray.single(): Float {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun DoubleArray.single(): Double {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun BooleanArray.single(): Boolean {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the array is empty or has more than one element.\n */\npublic fun CharArray.single(): Char {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"Array is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Array has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Array<out T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ByteArray.single(predicate: (Byte) -> Boolean): Byte {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Byte\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun ShortArray.single(predicate: (Short) -> Boolean): Short {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Short\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun IntArray.single(predicate: (Int) -> Boolean): Int {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Int\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun LongArray.single(predicate: (Long) -> Boolean): Long {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Long\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun FloatArray.single(predicate: (Float) -> Boolean): Float {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Float\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun DoubleArray.single(predicate: (Double) -> Boolean): Double {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Double\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun BooleanArray.single(predicate: (Boolean) -> Boolean): Boolean {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Boolean\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun CharArray.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Array contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Array contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun <T> Array<out T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ByteArray.singleOrNull(): Byte? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun ShortArray.singleOrNull(): Short? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun IntArray.singleOrNull(): Int? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun LongArray.singleOrNull(): Long? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun FloatArray.singleOrNull(): Float? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun DoubleArray.singleOrNull(): Double? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun BooleanArray.singleOrNull(): Boolean? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns single element, or `null` if the array is empty or has more than one element.\n */\npublic fun CharArray.singleOrNull(): Char? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Array<out T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ByteArray.singleOrNull(predicate: (Byte) -> Boolean): Byte? {\n    var single: Byte? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun ShortArray.singleOrNull(predicate: (Short) -> Boolean): Short? {\n    var single: Short? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun IntArray.singleOrNull(predicate: (Int) -> Boolean): Int? {\n    var single: Int? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun LongArray.singleOrNull(predicate: (Long) -> Boolean): Long? {\n    var single: Long? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun FloatArray.singleOrNull(predicate: (Float) -> Boolean): Float? {\n    var single: Float? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun DoubleArray.singleOrNull(predicate: (Double) -> Boolean): Double? {\n    var single: Double? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun BooleanArray.singleOrNull(predicate: (Boolean) -> Boolean): Boolean? {\n    var single: Boolean? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun CharArray.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.drop(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.drop(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.drop(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.drop(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.drop(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.drop(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.drop(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.drop(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return takeLast((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Array<out T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ByteArray.dropLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun ShortArray.dropLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun IntArray.dropLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun LongArray.dropLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun FloatArray.dropLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun DoubleArray.dropLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun BooleanArray.dropLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharArray.dropLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return take(index + 1)\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Array<out T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ByteArray.dropWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    var yielding = false\n    val list = ArrayList<Byte>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun ShortArray.dropWhile(predicate: (Short) -> Boolean): List<Short> {\n    var yielding = false\n    val list = ArrayList<Short>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun IntArray.dropWhile(predicate: (Int) -> Boolean): List<Int> {\n    var yielding = false\n    val list = ArrayList<Int>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun LongArray.dropWhile(predicate: (Long) -> Boolean): List<Long> {\n    var yielding = false\n    val list = ArrayList<Long>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun FloatArray.dropWhile(predicate: (Float) -> Boolean): List<Float> {\n    var yielding = false\n    val list = ArrayList<Float>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun DoubleArray.dropWhile(predicate: (Double) -> Boolean): List<Double> {\n    var yielding = false\n    val list = ArrayList<Double>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun BooleanArray.dropWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    var yielding = false\n    val list = ArrayList<Boolean>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharArray.dropWhile(predicate: (Char) -> Boolean): List<Char> {\n    var yielding = false\n    val list = ArrayList<Char>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filter(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filter(predicate: (Short) -> Boolean): List<Short> {\n    return filterTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filter(predicate: (Int) -> Boolean): List<Int> {\n    return filterTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filter(predicate: (Long) -> Boolean): List<Long> {\n    return filterTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filter(predicate: (Float) -> Boolean): List<Float> {\n    return filterTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filter(predicate: (Double) -> Boolean): List<Double> {\n    return filterTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filter(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filter(predicate: (Char) -> Boolean): List<Char> {\n    return filterTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Array<out T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ByteArray.filterIndexed(predicate: (index: Int, Byte) -> Boolean): List<Byte> {\n    return filterIndexedTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun ShortArray.filterIndexed(predicate: (index: Int, Short) -> Boolean): List<Short> {\n    return filterIndexedTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun IntArray.filterIndexed(predicate: (index: Int, Int) -> Boolean): List<Int> {\n    return filterIndexedTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun LongArray.filterIndexed(predicate: (index: Int, Long) -> Boolean): List<Long> {\n    return filterIndexedTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun FloatArray.filterIndexed(predicate: (index: Int, Float) -> Boolean): List<Float> {\n    return filterIndexedTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun DoubleArray.filterIndexed(predicate: (index: Int, Double) -> Boolean): List<Double> {\n    return filterIndexedTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun BooleanArray.filterIndexed(predicate: (index: Int, Boolean) -> Boolean): List<Boolean> {\n    return filterIndexedTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharArray.filterIndexed(predicate: (index: Int, Char) -> Boolean): List<Char> {\n    return filterIndexedTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterIndexedTo(destination: C, predicate: (index: Int, Byte) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterIndexedTo(destination: C, predicate: (index: Int, Short) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterIndexedTo(destination: C, predicate: (index: Int, Int) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterIndexedTo(destination: C, predicate: (index: Int, Long) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterIndexedTo(destination: C, predicate: (index: Int, Float) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterIndexedTo(destination: C, predicate: (index: Int, Double) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterIndexedTo(destination: C, predicate: (index: Int, Boolean) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Array<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Array<out T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ByteArray.filterNot(predicate: (Byte) -> Boolean): List<Byte> {\n    return filterNotTo(ArrayList<Byte>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun ShortArray.filterNot(predicate: (Short) -> Boolean): List<Short> {\n    return filterNotTo(ArrayList<Short>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun IntArray.filterNot(predicate: (Int) -> Boolean): List<Int> {\n    return filterNotTo(ArrayList<Int>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun LongArray.filterNot(predicate: (Long) -> Boolean): List<Long> {\n    return filterNotTo(ArrayList<Long>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun FloatArray.filterNot(predicate: (Float) -> Boolean): List<Float> {\n    return filterNotTo(ArrayList<Float>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun DoubleArray.filterNot(predicate: (Double) -> Boolean): List<Double> {\n    return filterNotTo(ArrayList<Double>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun BooleanArray.filterNot(predicate: (Boolean) -> Boolean): List<Boolean> {\n    return filterNotTo(ArrayList<Boolean>(), predicate)\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun CharArray.filterNot(predicate: (Char) -> Boolean): List<Char> {\n    return filterNotTo(ArrayList<Char>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Array<out T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Array<out T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterNotTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterNotTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterNotTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterNotTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterNotTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterNotTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterNotTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Array<out T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Byte>> ByteArray.filterTo(destination: C, predicate: (Byte) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Short>> ShortArray.filterTo(destination: C, predicate: (Short) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Int>> IntArray.filterTo(destination: C, predicate: (Int) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Long>> LongArray.filterTo(destination: C, predicate: (Long) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Float>> FloatArray.filterTo(destination: C, predicate: (Float) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Double>> DoubleArray.filterTo(destination: C, predicate: (Double) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Boolean>> BooleanArray.filterTo(destination: C, predicate: (Boolean) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : MutableCollection<in Char>> CharArray.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<out T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.slice(indices: IntRange): List<Byte> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.slice(indices: IntRange): List<Short> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.slice(indices: IntRange): List<Int> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.slice(indices: IntRange): List<Long> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.slice(indices: IntRange): List<Float> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.slice(indices: IntRange): List<Double> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.slice(indices: IntRange): List<Boolean> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.slice(indices: IntRange): List<Char> {\n    if (indices.isEmpty()) return listOf()\n    return copyOfRange(indices.start, indices.endInclusive + 1).asList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> Array<out T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ByteArray.slice(indices: Iterable<Int>): List<Byte> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Byte>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun ShortArray.slice(indices: Iterable<Int>): List<Short> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Short>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun IntArray.slice(indices: Iterable<Int>): List<Int> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Int>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun LongArray.slice(indices: Iterable<Int>): List<Long> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Long>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun FloatArray.slice(indices: Iterable<Int>): List<Float> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Float>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun DoubleArray.slice(indices: Iterable<Int>): List<Double> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Double>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun BooleanArray.slice(indices: Iterable<Int>): List<Boolean> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Boolean>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun CharArray.slice(indices: Iterable<Int>): List<Char> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<Char>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun <T> Array<T>.sliceArray(indices: Collection<Int>): Array<T> {\n    val result = arrayOfNulls(this, indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ByteArray.sliceArray(indices: Collection<Int>): ByteArray {\n    val result = ByteArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun ShortArray.sliceArray(indices: Collection<Int>): ShortArray {\n    val result = ShortArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun IntArray.sliceArray(indices: Collection<Int>): IntArray {\n    val result = IntArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun LongArray.sliceArray(indices: Collection<Int>): LongArray {\n    val result = LongArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun FloatArray.sliceArray(indices: Collection<Int>): FloatArray {\n    val result = FloatArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun DoubleArray.sliceArray(indices: Collection<Int>): DoubleArray {\n    val result = DoubleArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun BooleanArray.sliceArray(indices: Collection<Int>): BooleanArray {\n    val result = BooleanArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements of this array at specified [indices].\n */\npublic fun CharArray.sliceArray(indices: Collection<Int>): CharArray {\n    val result = CharArray(indices.size)\n    var targetIndex = 0\n    for (sourceIndex in indices) {\n        result[targetIndex++] = this[sourceIndex]\n    }\n    return result\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun <T> Array<T>.sliceArray(indices: IntRange): Array<T> {\n    if (indices.isEmpty()) return copyOfRange(0, 0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ByteArray.sliceArray(indices: IntRange): ByteArray {\n    if (indices.isEmpty()) return ByteArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun ShortArray.sliceArray(indices: IntRange): ShortArray {\n    if (indices.isEmpty()) return ShortArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun IntArray.sliceArray(indices: IntRange): IntArray {\n    if (indices.isEmpty()) return IntArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun LongArray.sliceArray(indices: IntRange): LongArray {\n    if (indices.isEmpty()) return LongArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun FloatArray.sliceArray(indices: IntRange): FloatArray {\n    if (indices.isEmpty()) return FloatArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun DoubleArray.sliceArray(indices: IntRange): DoubleArray {\n    if (indices.isEmpty()) return DoubleArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun BooleanArray.sliceArray(indices: IntRange): BooleanArray {\n    if (indices.isEmpty()) return BooleanArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns an array containing elements at indices in the specified [indices] range.\n */\npublic fun CharArray.sliceArray(indices: IntRange): CharArray {\n    if (indices.isEmpty()) return CharArray(0)\n    return copyOfRange(indices.start, indices.endInclusive + 1)\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.take(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Byte>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.take(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Short>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.take(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Int>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.take(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Long>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.take(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Float>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.take(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Double>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.take(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Boolean>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.take(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[0])\n    var count = 0\n    val list = ArrayList<Char>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Array<out T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<T>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ByteArray.takeLast(n: Int): List<Byte> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Byte>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun ShortArray.takeLast(n: Int): List<Short> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Short>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun IntArray.takeLast(n: Int): List<Int> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Int>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun LongArray.takeLast(n: Int): List<Long> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Long>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun FloatArray.takeLast(n: Int): List<Float> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Float>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun DoubleArray.takeLast(n: Int): List<Double> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Double>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun BooleanArray.takeLast(n: Int): List<Boolean> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Boolean>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharArray.takeLast(n: Int): List<Char> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(this[size - 1])\n    val list = ArrayList<Char>(n)\n    for (index in size - n until size)\n        list.add(this[index])\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeLastWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeLastWhile(predicate: (Short) -> Boolean): List<Short> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeLastWhile(predicate: (Int) -> Boolean): List<Int> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeLastWhile(predicate: (Long) -> Boolean): List<Long> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeLastWhile(predicate: (Float) -> Boolean): List<Float> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeLastWhile(predicate: (Double) -> Boolean): List<Double> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeLastWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeLastWhile(predicate: (Char) -> Boolean): List<Char> {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return drop(index + 1)\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Array<out T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ByteArray.takeWhile(predicate: (Byte) -> Boolean): List<Byte> {\n    val list = ArrayList<Byte>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun ShortArray.takeWhile(predicate: (Short) -> Boolean): List<Short> {\n    val list = ArrayList<Short>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun IntArray.takeWhile(predicate: (Int) -> Boolean): List<Int> {\n    val list = ArrayList<Int>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun LongArray.takeWhile(predicate: (Long) -> Boolean): List<Long> {\n    val list = ArrayList<Long>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun FloatArray.takeWhile(predicate: (Float) -> Boolean): List<Float> {\n    val list = ArrayList<Float>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun DoubleArray.takeWhile(predicate: (Double) -> Boolean): List<Double> {\n    val list = ArrayList<Double>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun BooleanArray.takeWhile(predicate: (Boolean) -> Boolean): List<Boolean> {\n    val list = ArrayList<Boolean>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharArray.takeWhile(predicate: (Char) -> Boolean): List<Char> {\n    val list = ArrayList<Char>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun <T> Array<T>.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ByteArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun ShortArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun IntArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun LongArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun FloatArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun DoubleArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun BooleanArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements in the array in-place.\n */\npublic fun CharArray.reverse(): Unit {\n    val midPoint = (size / 2) - 1\n    if (midPoint < 0) return\n    var reverseIndex = lastIndex\n    for (index in 0..midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Reverses elements of the array in the specified range in-place.\n * \n * @param fromIndex the start of the range (inclusive) to reverse.\n * @param toIndex the end of the range (exclusive) to reverse.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.reverse(fromIndex: Int, toIndex: Int): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val midPoint = (fromIndex + toIndex) / 2\n    if (fromIndex == midPoint) return\n    var reverseIndex = toIndex - 1\n    for (index in fromIndex until midPoint) {\n        val tmp = this[index]\n        this[index] = this[reverseIndex]\n        this[reverseIndex] = tmp\n        reverseIndex--\n    }\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Array<out T>.reversed(): List<T> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ByteArray.reversed(): List<Byte> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun ShortArray.reversed(): List<Short> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun IntArray.reversed(): List<Int> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun LongArray.reversed(): List<Long> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun FloatArray.reversed(): List<Float> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun DoubleArray.reversed(): List<Double> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun BooleanArray.reversed(): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun CharArray.reversed(): List<Char> {\n    if (isEmpty()) return emptyList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun <T> Array<T>.reversedArray(): Array<T> {\n    if (isEmpty()) return this\n    val result = arrayOfNulls(this, size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ByteArray.reversedArray(): ByteArray {\n    if (isEmpty()) return this\n    val result = ByteArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun ShortArray.reversedArray(): ShortArray {\n    if (isEmpty()) return this\n    val result = ShortArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun IntArray.reversedArray(): IntArray {\n    if (isEmpty()) return this\n    val result = IntArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun LongArray.reversedArray(): LongArray {\n    if (isEmpty()) return this\n    val result = LongArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun FloatArray.reversedArray(): FloatArray {\n    if (isEmpty()) return this\n    val result = FloatArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun DoubleArray.reversedArray(): DoubleArray {\n    if (isEmpty()) return this\n    val result = DoubleArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun BooleanArray.reversedArray(): BooleanArray {\n    if (isEmpty()) return this\n    val result = BooleanArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Returns an array with elements of this array in reversed order.\n */\npublic fun CharArray.reversedArray(): CharArray {\n    if (isEmpty()) return this\n    val result = CharArray(size)\n    val lastIndex = lastIndex\n    for (i in 0..lastIndex)\n        result[lastIndex - i] = this[i]\n    return result\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(): Unit {\n    shuffle(Random)\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Randomly shuffles elements in this array in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        val copy = this[i]\n        this[i] = this[j]\n        this[j] = copy\n    }\n}\n\n/**\n * Sorts elements in the array in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ByteArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun ShortArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun IntArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun LongArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun FloatArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun DoubleArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Sorts elements in the array in-place descending according to their natural sort order.\n */\npublic fun CharArray.sortDescending(): Unit {\n    if (size > 1) {\n        sort()\n        reverse()\n    }\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sorted(): List<T> {\n    return sortedArray().asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ByteArray.sorted(): List<Byte> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun ShortArray.sorted(): List<Short> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun IntArray.sorted(): List<Int> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun LongArray.sorted(): List<Long> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun FloatArray.sorted(): List<Float> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun DoubleArray.sorted(): List<Double> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n */\npublic fun CharArray.sorted(): List<Char> {\n    return toTypedArray().apply { sort() }.asList()\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArray(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ByteArray.sortedArray(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun ShortArray.sortedArray(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun IntArray.sortedArray(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun LongArray.sortedArray(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun FloatArray.sortedArray(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun DoubleArray.sortedArray(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according to their natural sort order.\n */\npublic fun CharArray.sortedArray(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sort() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<T>.sortedArrayDescending(): Array<T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(reverseOrder()) }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedArrayDescending(): ByteArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedArrayDescending(): ShortArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedArrayDescending(): IntArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedArrayDescending(): LongArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedArrayDescending(): FloatArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedArrayDescending(): DoubleArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedArrayDescending(): CharArray {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortDescending() }\n}\n\n/**\n * Returns an array with all elements of this array sorted according the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedArrayWith(comparator: Comparator<in T>): Array<out T> {\n    if (isEmpty()) return this\n    return this.copyOf().apply { sortWith(comparator) }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedBy(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedBy(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedBy(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedBy(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedBy(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedBy(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedBy(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedBy(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Array<out T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ByteArray.sortedByDescending(crossinline selector: (Byte) -> R?): List<Byte> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> ShortArray.sortedByDescending(crossinline selector: (Short) -> R?): List<Short> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> IntArray.sortedByDescending(crossinline selector: (Int) -> R?): List<Int> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> LongArray.sortedByDescending(crossinline selector: (Long) -> R?): List<Long> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> FloatArray.sortedByDescending(crossinline selector: (Float) -> R?): List<Float> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> DoubleArray.sortedByDescending(crossinline selector: (Double) -> R?): List<Double> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> BooleanArray.sortedByDescending(crossinline selector: (Boolean) -> R?): List<Boolean> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n */\npublic inline fun <R : Comparable<R>> CharArray.sortedByDescending(crossinline selector: (Char) -> R?): List<Char> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Array<out T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ByteArray.sortedDescending(): List<Byte> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun ShortArray.sortedDescending(): List<Short> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun IntArray.sortedDescending(): List<Int> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun LongArray.sortedDescending(): List<Long> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun FloatArray.sortedDescending(): List<Float> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun DoubleArray.sortedDescending(): List<Double> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n */\npublic fun CharArray.sortedDescending(): List<Char> {\n    return copyOf().apply { sort() }.reversed()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    return sortedArrayWith(comparator).asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ByteArray.sortedWith(comparator: Comparator<in Byte>): List<Byte> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun ShortArray.sortedWith(comparator: Comparator<in Short>): List<Short> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun IntArray.sortedWith(comparator: Comparator<in Int>): List<Int> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun LongArray.sortedWith(comparator: Comparator<in Long>): List<Long> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun FloatArray.sortedWith(comparator: Comparator<in Float>): List<Float> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun DoubleArray.sortedWith(comparator: Comparator<in Double>): List<Double> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun BooleanArray.sortedWith(comparator: Comparator<in Boolean>): List<Boolean> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n */\npublic fun CharArray.sortedWith(comparator: Comparator<in Char>): List<Char> {\n    return toTypedArray().apply { sortWith(comparator) }.asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun <T> Array<out T>.asList(): List<T>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ByteArray.asList(): List<Byte>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun ShortArray.asList(): List<Short>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun IntArray.asList(): List<Int>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun LongArray.asList(): List<Long>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun FloatArray.asList(): List<Float>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun DoubleArray.asList(): List<Double>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun BooleanArray.asList(): List<Boolean>\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic expect fun CharArray.asList(): List<Char>\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepHashCode(): Int\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic expect fun <T> Array<out T>.contentDeepToString(): String\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentDeepToString(): String\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ByteArray.contentEquals(other: ByteArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun ShortArray.contentEquals(other: ShortArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun IntArray.contentEquals(other: IntArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun LongArray.contentEquals(other: LongArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun FloatArray.contentEquals(other: FloatArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect infix fun CharArray.contentEquals(other: CharArray): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun IntArray?.contentEquals(other: IntArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun LongArray?.contentEquals(other: LongArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\npublic expect infix fun CharArray?.contentEquals(other: CharArray?): Boolean\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentHashCode(): Int\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentHashCode(): Int\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun <T> Array<out T>.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ByteArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun ShortArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun IntArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun LongArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun FloatArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun DoubleArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun BooleanArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic expect fun CharArray.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T> Array<out T>?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun BooleanArray?.contentToString(): String\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray?.contentToString(): String\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T>\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(): Array<T>\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ByteArray.copyOf(): ByteArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun ShortArray.copyOf(): ShortArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun IntArray.copyOf(): IntArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun LongArray.copyOf(): LongArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun FloatArray.copyOf(): FloatArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun DoubleArray.copyOf(): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun BooleanArray.copyOf(): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic expect fun CharArray.copyOf(): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ByteArray.copyOf(newSize: Int): ByteArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun ShortArray.copyOf(newSize: Int): ShortArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun IntArray.copyOf(newSize: Int): IntArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun LongArray.copyOf(newSize: Int): LongArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun FloatArray.copyOf(newSize: Int): FloatArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun DoubleArray.copyOf(newSize: Int): DoubleArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun BooleanArray.copyOf(newSize: Int): BooleanArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic expect fun CharArray.copyOf(newSize: Int): CharArray\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOf(newSize: Int): Array<T?>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T>\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\npublic expect fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val <T> Array<out T>.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ByteArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val ShortArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val IntArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val LongArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val FloatArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val DoubleArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val BooleanArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns the range of valid indices for the array.\n */\npublic val CharArray.indices: IntRange\n    get() = IntRange(0, lastIndex)\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isEmpty(): Boolean {\n    return size == 0\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if the array is not empty.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.isNotEmpty(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns the last valid index for the array.\n */\npublic val <T> Array<out T>.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ByteArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val ShortArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val IntArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val LongArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val FloatArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val DoubleArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val BooleanArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns the last valid index for the array.\n */\npublic val CharArray.lastIndex: Int\n    get() = size - 1\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(element: T): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ByteArray.plus(element: Byte): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun ShortArray.plus(element: Short): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun IntArray.plus(element: Int): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun LongArray.plus(element: Long): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun FloatArray.plus(element: Float): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun DoubleArray.plus(element: Double): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun BooleanArray.plus(element: Boolean): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\npublic expect operator fun CharArray.plus(element: Char): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Collection<T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun ShortArray.plus(elements: Collection<Short>): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun IntArray.plus(elements: Collection<Int>): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun LongArray.plus(elements: Collection<Long>): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun FloatArray.plus(elements: Collection<Float>): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic expect operator fun CharArray.plus(elements: Collection<Char>): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect operator fun <T> Array<T>.plus(elements: Array<out T>): Array<T>\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ByteArray.plus(elements: ByteArray): ByteArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun ShortArray.plus(elements: ShortArray): ShortArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun IntArray.plus(elements: IntArray): IntArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun LongArray.plus(elements: LongArray): LongArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun FloatArray.plus(elements: FloatArray): FloatArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\npublic expect operator fun CharArray.plus(elements: CharArray): CharArray\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun <T> Array<T>.plusElement(element: T): Array<T>\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun IntArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun LongArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ByteArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun ShortArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun DoubleArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun FloatArray.sort(): Unit\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic expect fun CharArray.sort(): Unit\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic expect fun <T : Comparable<T>> Array<out T>.sort(): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\npublic expect fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\npublic expect fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sortWith(reverseOrder(), fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts elements of the array in the specified range in-place.\n * The elements are sorted descending according to their natural sort order.\n * \n * @param fromIndex the start of the range (inclusive) to sort.\n * @param toIndex the end of the range (exclusive) to sort.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.sortDescending(fromIndex: Int, toIndex: Int): Unit {\n    sort(fromIndex, toIndex)\n    reverse(fromIndex, toIndex)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic expect fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit\n\n/**\n * Returns an array of Boolean containing all of the elements of this generic array.\n */\npublic fun Array<out Boolean>.toBooleanArray(): BooleanArray {\n    return BooleanArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this generic array.\n */\npublic fun Array<out Byte>.toByteArray(): ByteArray {\n    return ByteArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Char containing all of the elements of this generic array.\n */\npublic fun Array<out Char>.toCharArray(): CharArray {\n    return CharArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Double containing all of the elements of this generic array.\n */\npublic fun Array<out Double>.toDoubleArray(): DoubleArray {\n    return DoubleArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Float containing all of the elements of this generic array.\n */\npublic fun Array<out Float>.toFloatArray(): FloatArray {\n    return FloatArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Int containing all of the elements of this generic array.\n */\npublic fun Array<out Int>.toIntArray(): IntArray {\n    return IntArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Long containing all of the elements of this generic array.\n */\npublic fun Array<out Long>.toLongArray(): LongArray {\n    return LongArray(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of Short containing all of the elements of this generic array.\n */\npublic fun Array<out Short>.toShortArray(): ShortArray {\n    return ShortArray(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ByteArray.toTypedArray(): Array<Byte>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun ShortArray.toTypedArray(): Array<Short>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun IntArray.toTypedArray(): Array<Int>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun LongArray.toTypedArray(): Array<Long>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun FloatArray.toTypedArray(): Array<Float>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun DoubleArray.toTypedArray(): Array<Double>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun BooleanArray.toTypedArray(): Array<Boolean>\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic expect fun CharArray.toTypedArray(): Array<Char>\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <T, K, V> Array<out T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ByteArray.associate(transform: (Byte) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> ShortArray.associate(transform: (Short) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> IntArray.associate(transform: (Int) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> LongArray.associate(transform: (Long) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> FloatArray.associate(transform: (Float) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> DoubleArray.associate(transform: (Double) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> BooleanArray.associate(transform: (Boolean) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitives\n */\npublic inline fun <K, V> CharArray.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <T, K> Array<out T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ByteArray.associateBy(keySelector: (Byte) -> K): Map<K, Byte> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Byte>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> ShortArray.associateBy(keySelector: (Short) -> K): Map<K, Short> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Short>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> IntArray.associateBy(keySelector: (Int) -> K): Map<K, Int> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Int>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> LongArray.associateBy(keySelector: (Long) -> K): Map<K, Long> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Long>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> FloatArray.associateBy(keySelector: (Float) -> K): Map<K, Float> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Float>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> DoubleArray.associateBy(keySelector: (Double) -> K): Map<K, Double> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Double>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> BooleanArray.associateBy(keySelector: (Boolean) -> K): Map<K, Boolean> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Boolean>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the elements from the given array indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesBy\n */\npublic inline fun <K> CharArray.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <T, K, V> Array<out T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ByteArray.associateBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> ShortArray.associateBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> IntArray.associateBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> LongArray.associateBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> FloatArray.associateBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> DoubleArray.associateBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> BooleanArray.associateBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByWithValueTransform\n */\npublic inline fun <K, V> CharArray.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(size).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Byte>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Short>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Int>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Long>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Float>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Double>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Boolean>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given array\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given array.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Array<out T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ByteArray.associateTo(destination: M, transform: (Byte) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> ShortArray.associateTo(destination: M, transform: (Short) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> IntArray.associateTo(destination: M, transform: (Int) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> LongArray.associateTo(destination: M, transform: (Long) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> FloatArray.associateTo(destination: M, transform: (Float) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> DoubleArray.associateTo(destination: M, transform: (Double) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> BooleanArray.associateTo(destination: M, transform: (Boolean) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given array.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Arrays.Transformations.associateArrayOfPrimitivesTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharArray.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V> Array<out K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ByteArray.associateWith(valueSelector: (Byte) -> V): Map<Byte, V> {\n    val result = LinkedHashMap<Byte, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> ShortArray.associateWith(valueSelector: (Short) -> V): Map<Short, V> {\n    val result = LinkedHashMap<Short, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> IntArray.associateWith(valueSelector: (Int) -> V): Map<Int, V> {\n    val result = LinkedHashMap<Int, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> LongArray.associateWith(valueSelector: (Long) -> V): Map<Long, V> {\n    val result = LinkedHashMap<Long, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> FloatArray.associateWith(valueSelector: (Float) -> V): Map<Float, V> {\n    val result = LinkedHashMap<Float, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> DoubleArray.associateWith(valueSelector: (Double) -> V): Map<Double, V> {\n    val result = LinkedHashMap<Double, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> BooleanArray.associateWith(valueSelector: (Boolean) -> V): Map<Boolean, V> {\n    val result = LinkedHashMap<Boolean, V>(mapCapacity(size).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Returns a [Map] where keys are elements from the given array and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original array.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V> CharArray.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(size.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Array<out K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Byte, in V>> ByteArray.associateWithTo(destination: M, valueSelector: (Byte) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Short, in V>> ShortArray.associateWithTo(destination: M, valueSelector: (Short) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Int, in V>> IntArray.associateWithTo(destination: M, valueSelector: (Int) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Long, in V>> LongArray.associateWithTo(destination: M, valueSelector: (Long) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Float, in V>> FloatArray.associateWithTo(destination: M, valueSelector: (Float) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Double, in V>> DoubleArray.associateWithTo(destination: M, valueSelector: (Double) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Boolean, in V>> BooleanArray.associateWithTo(destination: M, valueSelector: (Boolean) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given array,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <V, M : MutableMap<in Char, in V>> CharArray.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Array<out T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Byte>> ByteArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Short>> ShortArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Int>> IntArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Long>> LongArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Float>> FloatArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Double>> DoubleArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Boolean>> BooleanArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharArray.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Array<out T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ByteArray.toHashSet(): HashSet<Byte> {\n    return toCollection(HashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun ShortArray.toHashSet(): HashSet<Short> {\n    return toCollection(HashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun IntArray.toHashSet(): HashSet<Int> {\n    return toCollection(HashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun LongArray.toHashSet(): HashSet<Long> {\n    return toCollection(HashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun FloatArray.toHashSet(): HashSet<Float> {\n    return toCollection(HashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun DoubleArray.toHashSet(): HashSet<Double> {\n    return toCollection(HashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun BooleanArray.toHashSet(): HashSet<Boolean> {\n    return toCollection(HashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun CharArray.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Array<out T>.toList(): List<T> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ByteArray.toList(): List<Byte> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun ShortArray.toList(): List<Short> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun IntArray.toList(): List<Int> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun LongArray.toList(): List<Long> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun FloatArray.toList(): List<Float> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun DoubleArray.toList(): List<Double> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun BooleanArray.toList(): List<Boolean> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun CharArray.toList(): List<Char> {\n    return when (size) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun <T> Array<out T>.toMutableList(): MutableList<T> {\n    return ArrayList(this.asCollection())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ByteArray.toMutableList(): MutableList<Byte> {\n    val list = ArrayList<Byte>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun ShortArray.toMutableList(): MutableList<Short> {\n    val list = ArrayList<Short>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun IntArray.toMutableList(): MutableList<Int> {\n    val list = ArrayList<Int>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun LongArray.toMutableList(): MutableList<Long> {\n    val list = ArrayList<Long>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun FloatArray.toMutableList(): MutableList<Float> {\n    val list = ArrayList<Float>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun DoubleArray.toMutableList(): MutableList<Double> {\n    val list = ArrayList<Double>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun BooleanArray.toMutableList(): MutableList<Boolean> {\n    val list = ArrayList<Boolean>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this array.\n */\npublic fun CharArray.toMutableList(): MutableList<Char> {\n    val list = ArrayList<Char>(size)\n    for (item in this) list.add(item)\n    return list\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toSet(): Set<T> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toSet(): Set<Byte> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toSet(): Set<Short> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toSet(): Set<Int> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toSet(): Set<Long> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toSet(): Set<Float> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toSet(): Set<Double> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toSet(): Set<Boolean> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n    }\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toSet(): Set<Char> {\n    return when (size) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ByteArray.flatMap(transform: (Byte) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> ShortArray.flatMap(transform: (Short) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> IntArray.flatMap(transform: (Int) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> LongArray.flatMap(transform: (Long) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> FloatArray.flatMap(transform: (Float) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> DoubleArray.flatMap(transform: (Double) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> BooleanArray.flatMap(transform: (Boolean) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharArray.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Array<out T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.flatMapIndexed(transform: (index: Int, Byte) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.flatMapIndexed(transform: (index: Int, Short) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.flatMapIndexed(transform: (index: Int, Int) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.flatMapIndexed(transform: (index: Int, Long) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.flatMapIndexed(transform: (index: Int, Float) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.flatMapIndexed(transform: (index: Int, Double) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.flatMapIndexed(transform: (index: Int, Boolean) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapIndexedTo(destination: C, transform: (index: Int, Byte) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapIndexedTo(destination: C, transform: (index: Int, Short) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapIndexedTo(destination: C, transform: (index: Int, Int) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapIndexedTo(destination: C, transform: (index: Int, Long) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapIndexedTo(destination: C, transform: (index: Int, Float) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapIndexedTo(destination: C, transform: (index: Int, Double) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapIndexedTo(destination: C, transform: (index: Int, Boolean) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.flatMapTo(destination: C, transform: (Byte) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.flatMapTo(destination: C, transform: (Short) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.flatMapTo(destination: C, transform: (Int) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.flatMapTo(destination: C, transform: (Long) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.flatMapTo(destination: C, transform: (Float) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.flatMapTo(destination: C, transform: (Double) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.flatMapTo(destination: C, transform: (Boolean) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original array, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Array<out T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ByteArray.groupBy(keySelector: (Byte) -> K): Map<K, List<Byte>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Byte>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> ShortArray.groupBy(keySelector: (Short) -> K): Map<K, List<Short>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Short>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> IntArray.groupBy(keySelector: (Int) -> K): Map<K, List<Int>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Int>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> LongArray.groupBy(keySelector: (Long) -> K): Map<K, List<Long>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Long>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> FloatArray.groupBy(keySelector: (Float) -> K): Map<K, List<Float>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Float>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> DoubleArray.groupBy(keySelector: (Double) -> K): Map<K, List<Double>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Double>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> BooleanArray.groupBy(keySelector: (Boolean) -> K): Map<K, List<Boolean>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Boolean>>(), keySelector)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharArray.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Array<out T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ByteArray.groupBy(keySelector: (Byte) -> K, valueTransform: (Byte) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> ShortArray.groupBy(keySelector: (Short) -> K, valueTransform: (Short) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> IntArray.groupBy(keySelector: (Int) -> K, valueTransform: (Int) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> LongArray.groupBy(keySelector: (Long) -> K, valueTransform: (Long) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> FloatArray.groupBy(keySelector: (Float) -> K, valueTransform: (Float) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> DoubleArray.groupBy(keySelector: (Double) -> K, valueTransform: (Double) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> BooleanArray.groupBy(keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original array.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharArray.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Byte>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Byte>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Short>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Short>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Int>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Int>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Long>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Long>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Float>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Float>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Double>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Double>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Boolean>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Boolean>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original array by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Array<out T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ByteArray.groupByTo(destination: M, keySelector: (Byte) -> K, valueTransform: (Byte) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> ShortArray.groupByTo(destination: M, keySelector: (Short) -> K, valueTransform: (Short) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> IntArray.groupByTo(destination: M, keySelector: (Int) -> K, valueTransform: (Int) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> LongArray.groupByTo(destination: M, keySelector: (Long) -> K, valueTransform: (Long) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> FloatArray.groupByTo(destination: M, keySelector: (Float) -> K, valueTransform: (Float) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> DoubleArray.groupByTo(destination: M, keySelector: (Double) -> K, valueTransform: (Double) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> BooleanArray.groupByTo(destination: M, keySelector: (Boolean) -> K, valueTransform: (Boolean) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original array\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharArray.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from an array to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Array<out T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Array<out T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ByteArray.map(transform: (Byte) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> ShortArray.map(transform: (Short) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> IntArray.map(transform: (Int) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> LongArray.map(transform: (Long) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> FloatArray.map(transform: (Float) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> DoubleArray.map(transform: (Double) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> BooleanArray.map(transform: (Boolean) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <R> CharArray.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Array<out T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ByteArray.mapIndexed(transform: (index: Int, Byte) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> ShortArray.mapIndexed(transform: (index: Int, Short) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> IntArray.mapIndexed(transform: (index: Int, Int) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> LongArray.mapIndexed(transform: (index: Int, Long) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> FloatArray.mapIndexed(transform: (index: Int, Float) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> DoubleArray.mapIndexed(transform: (index: Int, Double) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> BooleanArray.mapIndexed(transform: (index: Int, Boolean) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R> CharArray.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(size), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original array.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Array<out T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapIndexedTo(destination: C, transform: (index: Int, Byte) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapIndexedTo(destination: C, transform: (index: Int, Short) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapIndexedTo(destination: C, transform: (index: Int, Int) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapIndexedTo(destination: C, transform: (index: Int, Long) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapIndexedTo(destination: C, transform: (index: Int, Float) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapIndexedTo(destination: C, transform: (index: Int, Double) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapIndexedTo(destination: C, transform: (index: Int, Boolean) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original array\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original array.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Array<out T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original array\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Array<out T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Array<out T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ByteArray.mapTo(destination: C, transform: (Byte) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> ShortArray.mapTo(destination: C, transform: (Short) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> IntArray.mapTo(destination: C, transform: (Int) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> LongArray.mapTo(destination: C, transform: (Long) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> FloatArray.mapTo(destination: C, transform: (Float) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> DoubleArray.mapTo(destination: C, transform: (Double) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> BooleanArray.mapTo(destination: C, transform: (Boolean) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original array\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharArray.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Array<out T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ByteArray.withIndex(): Iterable<IndexedValue<Byte>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun ShortArray.withIndex(): Iterable<IndexedValue<Short>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun IntArray.withIndex(): Iterable<IndexedValue<Int>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun LongArray.withIndex(): Iterable<IndexedValue<Long>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun FloatArray.withIndex(): Iterable<IndexedValue<Float>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun DoubleArray.withIndex(): Iterable<IndexedValue<Double>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun BooleanArray.withIndex(): Iterable<IndexedValue<Boolean>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original array\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun CharArray.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * Among equal elements of the given array, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Array<out T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ByteArray.distinct(): List<Byte> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun ShortArray.distinct(): List<Short> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun IntArray.distinct(): List<Int> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun LongArray.distinct(): List<Long> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun FloatArray.distinct(): List<Float> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun DoubleArray.distinct(): List<Double> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun BooleanArray.distinct(): List<Boolean> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only distinct elements from the given array.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun CharArray.distinct(): List<Char> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given array with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Array<out T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ByteArray.distinctBy(selector: (Byte) -> K): List<Byte> {\n    val set = HashSet<K>()\n    val list = ArrayList<Byte>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> ShortArray.distinctBy(selector: (Short) -> K): List<Short> {\n    val set = HashSet<K>()\n    val list = ArrayList<Short>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> IntArray.distinctBy(selector: (Int) -> K): List<Int> {\n    val set = HashSet<K>()\n    val list = ArrayList<Int>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> LongArray.distinctBy(selector: (Long) -> K): List<Long> {\n    val set = HashSet<K>()\n    val list = ArrayList<Long>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> FloatArray.distinctBy(selector: (Float) -> K): List<Float> {\n    val set = HashSet<K>()\n    val list = ArrayList<Float>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> DoubleArray.distinctBy(selector: (Double) -> K): List<Double> {\n    val set = HashSet<K>()\n    val list = ArrayList<Double>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> BooleanArray.distinctBy(selector: (Boolean) -> K): List<Boolean> {\n    val set = HashSet<K>()\n    val list = ArrayList<Boolean>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a list containing only elements from the given array\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source array.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <K> CharArray.distinctBy(selector: (Char) -> K): List<Char> {\n    val set = HashSet<K>()\n    val list = ArrayList<Char>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Array<out T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ByteArray.intersect(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun ShortArray.intersect(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun IntArray.intersect(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun LongArray.intersect(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun FloatArray.intersect(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun DoubleArray.intersect(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun BooleanArray.intersect(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by both this array and the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun CharArray.intersect(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun <T> Array<out T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ByteArray.subtract(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun ShortArray.subtract(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun IntArray.subtract(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun LongArray.subtract(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun FloatArray.subtract(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun DoubleArray.subtract(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun BooleanArray.subtract(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this array and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic infix fun CharArray.subtract(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun <T> Array<out T>.toMutableSet(): MutableSet<T> {\n    return toCollection(LinkedHashSet<T>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ByteArray.toMutableSet(): MutableSet<Byte> {\n    return toCollection(LinkedHashSet<Byte>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun ShortArray.toMutableSet(): MutableSet<Short> {\n    return toCollection(LinkedHashSet<Short>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun IntArray.toMutableSet(): MutableSet<Int> {\n    return toCollection(LinkedHashSet<Int>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun LongArray.toMutableSet(): MutableSet<Long> {\n    return toCollection(LinkedHashSet<Long>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun FloatArray.toMutableSet(): MutableSet<Float> {\n    return toCollection(LinkedHashSet<Float>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun DoubleArray.toMutableSet(): MutableSet<Double> {\n    return toCollection(LinkedHashSet<Double>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun BooleanArray.toMutableSet(): MutableSet<Boolean> {\n    return toCollection(LinkedHashSet<Boolean>(mapCapacity(size)))\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given array.\n * \n * The returned set preserves the element iteration order of the original array.\n */\npublic fun CharArray.toMutableSet(): MutableSet<Char> {\n    return toCollection(LinkedHashSet<Char>(mapCapacity(size.coerceAtMost(128))))\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Array<out T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ByteArray.union(other: Iterable<Byte>): Set<Byte> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun ShortArray.union(other: Iterable<Short>): Set<Short> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun IntArray.union(other: Iterable<Int>): Set<Int> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun LongArray.union(other: Iterable<Long>): Set<Long> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun FloatArray.union(other: Iterable<Float>): Set<Float> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun DoubleArray.union(other: Iterable<Double>): Set<Double> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun BooleanArray.union(other: Iterable<Boolean>): Set<Boolean> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original array.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun CharArray.union(other: Iterable<Char>): Set<Char> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Array<out T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ByteArray.all(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun ShortArray.all(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun IntArray.all(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun LongArray.all(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun FloatArray.all(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun DoubleArray.all(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun BooleanArray.all(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharArray.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Array<out T>.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ByteArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun ShortArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun IntArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun LongArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun FloatArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun DoubleArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun BooleanArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if array has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharArray.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Array<out T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ByteArray.any(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun ShortArray.any(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun IntArray.any(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun LongArray.any(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun FloatArray.any(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun DoubleArray.any(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun BooleanArray.any(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharArray.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements in this array.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Array<out T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ByteArray.count(predicate: (Byte) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun ShortArray.count(predicate: (Short) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun IntArray.count(predicate: (Int) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun LongArray.count(predicate: (Long) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun FloatArray.count(predicate: (Float) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun DoubleArray.count(predicate: (Double) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun BooleanArray.count(predicate: (Boolean) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun CharArray.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.fold(initial: R, operation: (acc: R, Byte) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.fold(initial: R, operation: (acc: R, Short) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.fold(initial: R, operation: (acc: R, Int) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.fold(initial: R, operation: (acc: R, Long) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.fold(initial: R, operation: (acc: R, Float) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.fold(initial: R, operation: (acc: R, Double) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.fold(initial: R, operation: (acc: R, Boolean) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRight(initial: R, operation: (Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRight(initial: R, operation: (Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRight(initial: R, operation: (Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRight(initial: R, operation: (Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRight(initial: R, operation: (Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRight(initial: R, operation: (Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRight(initial: R, operation: (Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Array<out T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ByteArray.foldRightIndexed(initial: R, operation: (index: Int, Byte, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> ShortArray.foldRightIndexed(initial: R, operation: (index: Int, Short, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> IntArray.foldRightIndexed(initial: R, operation: (index: Int, Int, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> LongArray.foldRightIndexed(initial: R, operation: (index: Int, Long, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> FloatArray.foldRightIndexed(initial: R, operation: (index: Int, Float, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> DoubleArray.foldRightIndexed(initial: R, operation: (index: Int, Double, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> BooleanArray.foldRightIndexed(initial: R, operation: (index: Int, Boolean, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns the specified [initial] value if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharArray.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun <T> Array<out T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ByteArray.forEach(action: (Byte) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun ShortArray.forEach(action: (Short) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun IntArray.forEach(action: (Int) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun LongArray.forEach(action: (Long) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun FloatArray.forEach(action: (Float) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun DoubleArray.forEach(action: (Double) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun BooleanArray.forEach(action: (Boolean) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element.\n */\npublic inline fun CharArray.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Array<out T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ByteArray.forEachIndexed(action: (index: Int, Byte) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun ShortArray.forEachIndexed(action: (index: Int, Short) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun IntArray.forEachIndexed(action: (index: Int, Int) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun LongArray.forEachIndexed(action: (index: Int, Long) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun FloatArray.forEachIndexed(action: (index: Int, Float) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun DoubleArray.forEachIndexed(action: (index: Int, Double) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun BooleanArray.forEachIndexed(action: (index: Int, Boolean) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun CharArray.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Double>.max(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Float>.max(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Array<out T>.max(): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.max(): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.max(): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.max(): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.max(): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.max(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.max(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.max(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxBy(selector: (T) -> R): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ByteArray.maxBy(selector: (Byte) -> R): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ShortArray.maxBy(selector: (Short) -> R): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> IntArray.maxBy(selector: (Int) -> R): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> LongArray.maxBy(selector: (Long) -> R): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> FloatArray.maxBy(selector: (Float) -> R): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxBy(selector: (Double) -> R): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxBy(selector: (Boolean) -> R): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharArray.maxBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.maxByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.maxByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.maxByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.maxByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.maxByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.maxByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.maxByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.maxOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.maxOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.maxOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.maxOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.maxOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.maxOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.maxOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.maxOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.maxOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.maxOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.maxOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.maxOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.maxOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.maxOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.maxOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.maxOrNull(): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxOrNull(): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxOrNull(): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxOrNull(): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxOrNull(): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxOrNull(): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxOrNull(): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Array<out T>.maxWith(comparator: Comparator<in T>): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.maxWith(comparator: Comparator<in Byte>): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.maxWith(comparator: Comparator<in Short>): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.maxWith(comparator: Comparator<in Int>): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.maxWith(comparator: Comparator<in Long>): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.maxWith(comparator: Comparator<in Float>): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.maxWith(comparator: Comparator<in Double>): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun BooleanArray.maxWith(comparator: Comparator<in Boolean>): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.maxWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.maxWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.maxWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.maxWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.maxWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.maxWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.maxWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.maxWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Double>.min(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Array<out Float>.min(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Array<out T>.min(): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.min(): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.min(): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.min(): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.min(): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.min(): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.min(): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.min(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minBy(selector: (T) -> R): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ByteArray.minBy(selector: (Byte) -> R): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> ShortArray.minBy(selector: (Short) -> R): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> IntArray.minBy(selector: (Int) -> R): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> LongArray.minBy(selector: (Long) -> R): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> FloatArray.minBy(selector: (Float) -> R): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> DoubleArray.minBy(selector: (Double) -> R): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> BooleanArray.minBy(selector: (Boolean) -> R): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the array is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharArray.minBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Array<out T>.minByOrNull(selector: (T) -> R): T? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ByteArray.minByOrNull(selector: (Byte) -> R): Byte? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> ShortArray.minByOrNull(selector: (Short) -> R): Short? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> IntArray.minByOrNull(selector: (Int) -> R): Int? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> LongArray.minByOrNull(selector: (Long) -> R): Long? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> FloatArray.minByOrNull(selector: (Float) -> R): Float? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> DoubleArray.minByOrNull(selector: (Double) -> R): Double? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> BooleanArray.minByOrNull(selector: (Boolean) -> R): Boolean? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharArray.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOf(selector: (T) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOf(selector: (Byte) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOf(selector: (Short) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOf(selector: (Int) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOf(selector: (Long) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOf(selector: (Float) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOf(selector: (Double) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOf(selector: (Boolean) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOf(selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOf(selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOf(selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOf(selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOf(selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOf(selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOf(selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOf(selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.minOfOrNull(selector: (T) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.minOfOrNull(selector: (Byte) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.minOfOrNull(selector: (Short) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.minOfOrNull(selector: (Int) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.minOfOrNull(selector: (Long) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.minOfOrNull(selector: (Float) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.minOfOrNull(selector: (Double) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.minOfOrNull(selector: (Boolean) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Array<out T>.minOfOrNull(selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ByteArray.minOfOrNull(selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> ShortArray.minOfOrNull(selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> IntArray.minOfOrNull(selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> LongArray.minOfOrNull(selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> FloatArray.minOfOrNull(selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> DoubleArray.minOfOrNull(selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> BooleanArray.minOfOrNull(selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharArray.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWith(comparator: Comparator<in R>, selector: (Byte) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWith(comparator: Comparator<in R>, selector: (Short) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWith(comparator: Comparator<in R>, selector: (Int) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWith(comparator: Comparator<in R>, selector: (Long) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWith(comparator: Comparator<in R>, selector: (Float) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWith(comparator: Comparator<in R>, selector: (Double) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWith(comparator: Comparator<in R>, selector: (Boolean) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array.\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Array<out T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Byte) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Short) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Int) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Long) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Float) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Double) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Boolean) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the array or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Double>.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Array<out Float>.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Array<out T>.minOrNull(): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minOrNull(): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minOrNull(): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minOrNull(): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minOrNull(): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minOrNull(): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minOrNull(): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Array<out T>.minWith(comparator: Comparator<in T>): T {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ByteArray.minWith(comparator: Comparator<in Byte>): Byte {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun ShortArray.minWith(comparator: Comparator<in Short>): Short {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun IntArray.minWith(comparator: Comparator<in Int>): Int {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun LongArray.minWith(comparator: Comparator<in Long>): Long {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun FloatArray.minWith(comparator: Comparator<in Float>): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun DoubleArray.minWith(comparator: Comparator<in Double>): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun BooleanArray.minWith(comparator: Comparator<in Boolean>): Boolean {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the array is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharArray.minWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Array<out T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ByteArray.minWithOrNull(comparator: Comparator<in Byte>): Byte? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun ShortArray.minWithOrNull(comparator: Comparator<in Short>): Short? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun IntArray.minWithOrNull(comparator: Comparator<in Int>): Int? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun LongArray.minWithOrNull(comparator: Comparator<in Long>): Long? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun FloatArray.minWithOrNull(comparator: Comparator<in Float>): Float? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun DoubleArray.minWithOrNull(comparator: Comparator<in Double>): Double? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun BooleanArray.minWithOrNull(comparator: Comparator<in Boolean>): Boolean? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharArray.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Array<out T>.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ByteArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun ShortArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun IntArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun LongArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun FloatArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun DoubleArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun BooleanArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if the array has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharArray.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Array<out T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ByteArray.none(predicate: (Byte) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun ShortArray.none(predicate: (Short) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun IntArray.none(predicate: (Int) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun LongArray.none(predicate: (Long) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun FloatArray.none(predicate: (Float) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun DoubleArray.none(predicate: (Double) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun BooleanArray.none(predicate: (Boolean) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharArray.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEach(action: (T) -> Unit): Array<out T> {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEach(action: (Byte) -> Unit): ByteArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEach(action: (Short) -> Unit): ShortArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEach(action: (Int) -> Unit): IntArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEach(action: (Long) -> Unit): LongArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEach(action: (Float) -> Unit): FloatArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEach(action: (Double) -> Unit): DoubleArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEach(action: (Boolean) -> Unit): BooleanArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element and returns the array itself afterwards.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEach(action: (Char) -> Unit): CharArray {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.onEachIndexed(action: (index: Int, T) -> Unit): Array<out T> {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.onEachIndexed(action: (index: Int, Byte) -> Unit): ByteArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.onEachIndexed(action: (index: Int, Short) -> Unit): ShortArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.onEachIndexed(action: (index: Int, Int) -> Unit): IntArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.onEachIndexed(action: (index: Int, Long) -> Unit): LongArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.onEachIndexed(action: (index: Int, Float) -> Unit): FloatArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.onEachIndexed(action: (index: Int, Double) -> Unit): DoubleArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.onEachIndexed(action: (index: Int, Boolean) -> Unit): BooleanArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the array itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.onEachIndexed(action: (index: Int, Char) -> Unit): CharArray {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduce(operation: (acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduce(operation: (acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduce(operation: (acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduce(operation: (acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduce(operation: (acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduce(operation: (acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduce(operation: (acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduce(operation: (acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Array<out T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ByteArray.reduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun ShortArray.reduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): Short {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun IntArray.reduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): Int {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun LongArray.reduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): Long {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun FloatArray.reduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): Float {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun DoubleArray.reduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): Double {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun BooleanArray.reduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharArray.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceIndexedOrNull(operation: (index: Int, acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceIndexedOrNull(operation: (index: Int, acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceIndexedOrNull(operation: (index: Int, acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceIndexedOrNull(operation: (index: Int, acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceIndexedOrNull(operation: (index: Int, acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceIndexedOrNull(operation: (index: Int, acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceIndexedOrNull(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original array.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    if (isEmpty())\n        return null\n    var accumulator: S = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceOrNull(operation: (acc: Byte, Byte) -> Byte): Byte? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceOrNull(operation: (acc: Short, Short) -> Short): Short? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceOrNull(operation: (acc: Int, Int) -> Int): Int? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceOrNull(operation: (acc: Long, Long) -> Long): Long? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceOrNull(operation: (acc: Float, Float) -> Float): Float? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceOrNull(operation: (acc: Double, Double) -> Double): Double? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceOrNull(operation: (acc: Boolean, Boolean) -> Boolean): Boolean? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRight(operation: (T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRight(operation: (Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRight(operation: (Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRight(operation: (Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRight(operation: (Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRight(operation: (Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRight(operation: (Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRight(operation: (Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ByteArray.reduceRightIndexed(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun ShortArray.reduceRightIndexed(operation: (index: Int, Short, acc: Short) -> Short): Short {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun IntArray.reduceRightIndexed(operation: (index: Int, Int, acc: Int) -> Int): Int {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun LongArray.reduceRightIndexed(operation: (index: Int, Long, acc: Long) -> Long): Long {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun FloatArray.reduceRightIndexed(operation: (index: Int, Float, acc: Float) -> Float): Float {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun DoubleArray.reduceRightIndexed(operation: (index: Int, Double, acc: Double) -> Double): Double {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun BooleanArray.reduceRightIndexed(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Throws an exception if this array is empty. If the array can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharArray.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty array can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ByteArray.reduceRightIndexedOrNull(operation: (index: Int, Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun ShortArray.reduceRightIndexedOrNull(operation: (index: Int, Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun IntArray.reduceRightIndexedOrNull(operation: (index: Int, Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun LongArray.reduceRightIndexedOrNull(operation: (index: Int, Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun FloatArray.reduceRightIndexedOrNull(operation: (index: Int, Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun DoubleArray.reduceRightIndexedOrNull(operation: (index: Int, Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun BooleanArray.reduceRightIndexedOrNull(operation: (index: Int, Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original array and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharArray.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator: S = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ByteArray.reduceRightOrNull(operation: (Byte, acc: Byte) -> Byte): Byte? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun ShortArray.reduceRightOrNull(operation: (Short, acc: Short) -> Short): Short? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun IntArray.reduceRightOrNull(operation: (Int, acc: Int) -> Int): Int? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun LongArray.reduceRightOrNull(operation: (Long, acc: Long) -> Long): Long? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun FloatArray.reduceRightOrNull(operation: (Float, acc: Float) -> Float): Float? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun DoubleArray.reduceRightOrNull(operation: (Double, acc: Double) -> Double): Double? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun BooleanArray.reduceRightOrNull(operation: (Boolean, acc: Boolean) -> Boolean): Boolean? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the array is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharArray.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFold(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFold(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFold(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFold(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFold(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFold(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFold(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Array<out T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(size + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Array<out T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduce(operation: (acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduce(operation: (acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduce(operation: (acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduce(operation: (acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduce(operation: (acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduce(operation: (acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduce(operation: (acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Array<out T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    if (isEmpty()) return emptyList()\n    var accumulator: S = this[0]\n    val result = ArrayList<S>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.runningReduceIndexed(operation: (index: Int, acc: Byte, Byte) -> Byte): List<Byte> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Byte>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.runningReduceIndexed(operation: (index: Int, acc: Short, Short) -> Short): List<Short> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Short>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.runningReduceIndexed(operation: (index: Int, acc: Int, Int) -> Int): List<Int> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Int>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.runningReduceIndexed(operation: (index: Int, acc: Long, Long) -> Long): List<Long> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Long>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.runningReduceIndexed(operation: (index: Int, acc: Float, Float) -> Float): List<Float> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Float>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.runningReduceIndexed(operation: (index: Int, acc: Double, Double) -> Double): List<Double> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Double>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.runningReduceIndexed(operation: (index: Int, acc: Boolean, Boolean) -> Boolean): List<Boolean> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Boolean>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with the first element of this array.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(size).apply { add(accumulator) }\n    for (index in 1 until size) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scan(initial: R, operation: (acc: R, Byte) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scan(initial: R, operation: (acc: R, Short) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scan(initial: R, operation: (acc: R, Int) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scan(initial: R, operation: (acc: R, Long) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scan(initial: R, operation: (acc: R, Float) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scan(initial: R, operation: (acc: R, Double) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scan(initial: R, operation: (acc: R, Boolean) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Array<out T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ByteArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Byte) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> ShortArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Short) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> IntArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Int) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> LongArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Long) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> FloatArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Float) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> DoubleArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Double) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> BooleanArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Boolean) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original array and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharArray.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumBy(selector: (Byte) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumBy(selector: (Short) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumBy(selector: (Int) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumBy(selector: (Long) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumBy(selector: (Float) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumBy(selector: (Double) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumBy(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Array<out T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ByteArray.sumByDouble(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun ShortArray.sumByDouble(selector: (Short) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun IntArray.sumByDouble(selector: (Int) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun LongArray.sumByDouble(selector: (Long) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun FloatArray.sumByDouble(selector: (Float) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun DoubleArray.sumByDouble(selector: (Double) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun BooleanArray.sumByDouble(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharArray.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Array<out T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sumOf(selector: (Byte) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sumOf(selector: (Short) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sumOf(selector: (Int) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sumOf(selector: (Long) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sumOf(selector: (Float) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sumOf(selector: (Double) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun BooleanArray.sumOf(selector: (Boolean) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the array.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Array<T?>.requireNoNulls(): Array<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Array<T>\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun <T> Array<out T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ByteArray.partition(predicate: (Byte) -> Boolean): Pair<List<Byte>, List<Byte>> {\n    val first = ArrayList<Byte>()\n    val second = ArrayList<Byte>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun ShortArray.partition(predicate: (Short) -> Boolean): Pair<List<Short>, List<Short>> {\n    val first = ArrayList<Short>()\n    val second = ArrayList<Short>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun IntArray.partition(predicate: (Int) -> Boolean): Pair<List<Int>, List<Int>> {\n    val first = ArrayList<Int>()\n    val second = ArrayList<Int>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun LongArray.partition(predicate: (Long) -> Boolean): Pair<List<Long>, List<Long>> {\n    val first = ArrayList<Long>()\n    val second = ArrayList<Long>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun FloatArray.partition(predicate: (Float) -> Boolean): Pair<List<Float>, List<Float>> {\n    val first = ArrayList<Float>()\n    val second = ArrayList<Float>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun DoubleArray.partition(predicate: (Double) -> Boolean): Pair<List<Double>, List<Double>> {\n    val first = ArrayList<Double>()\n    val second = ArrayList<Double>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun BooleanArray.partition(predicate: (Boolean) -> Boolean): Pair<List<Boolean>, List<Boolean>> {\n    val first = ArrayList<Boolean>()\n    val second = ArrayList<Boolean>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original array into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Arrays.Transformations.partitionArrayOfPrimitives\n */\npublic inline fun CharArray.partition(predicate: (Char) -> Boolean): Pair<List<Char>, List<Char>> {\n    val first = ArrayList<Char>()\n    val second = ArrayList<Char>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Array<out R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Array<out R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Array<out R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Array<out R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Array<out R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Array<out R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Array<out R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Array<out R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Array<out R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Array<out R>, transform: (a: Short, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Array<out R>, transform: (a: Int, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Array<out R>, transform: (a: Long, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Array<out R>, transform: (a: Float, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Array<out R>, transform: (a: Double, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Array<out R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Array<out R>, transform: (a: Char, b: R) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Array<out T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ByteArray.zip(other: Iterable<R>): List<Pair<Byte, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> ShortArray.zip(other: Iterable<R>): List<Pair<Short, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> IntArray.zip(other: Iterable<R>): List<Pair<Int, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> LongArray.zip(other: Iterable<R>): List<Pair<Long, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> FloatArray.zip(other: Iterable<R>): List<Pair<Float, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> DoubleArray.zip(other: Iterable<R>): List<Pair<Double, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> BooleanArray.zip(other: Iterable<R>): List<Pair<Boolean, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <R> CharArray.zip(other: Iterable<R>): List<Pair<Char, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Array<out T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ByteArray.zip(other: Iterable<R>, transform: (a: Byte, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> ShortArray.zip(other: Iterable<R>, transform: (a: Short, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> IntArray.zip(other: Iterable<R>, transform: (a: Int, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> LongArray.zip(other: Iterable<R>, transform: (a: Long, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> FloatArray.zip(other: Iterable<R>, transform: (a: Float, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> DoubleArray.zip(other: Iterable<R>, transform: (a: Double, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> BooleanArray.zip(other: Iterable<R>, transform: (a: Boolean, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <R, V> CharArray.zip(other: Iterable<R>, transform: (a: Char, b: R) -> V): List<V> {\n    val arraySize = size\n    val list = ArrayList<V>(minOf(other.collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in other) {\n        if (i >= arraySize) break\n        list.add(transform(this[i++], element))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ByteArray.zip(other: ByteArray): List<Pair<Byte, Byte>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun ShortArray.zip(other: ShortArray): List<Pair<Short, Short>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun IntArray.zip(other: IntArray): List<Pair<Int, Int>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun LongArray.zip(other: LongArray): List<Pair<Long, Long>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun FloatArray.zip(other: FloatArray): List<Pair<Float, Float>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun DoubleArray.zip(other: DoubleArray): List<Pair<Double, Double>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun BooleanArray.zip(other: BooleanArray): List<Pair<Boolean, Boolean>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` array and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun CharArray.zip(other: CharArray): List<Pair<Char, Char>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ByteArray.zip(other: ByteArray, transform: (a: Byte, b: Byte) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> ShortArray.zip(other: ShortArray, transform: (a: Short, b: Short) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> IntArray.zip(other: IntArray, transform: (a: Int, b: Int) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> LongArray.zip(other: LongArray, transform: (a: Long, b: Long) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> FloatArray.zip(other: FloatArray, transform: (a: Float, b: Float) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> DoubleArray.zip(other: DoubleArray, transform: (a: Double, b: Double) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> BooleanArray.zip(other: BooleanArray, transform: (a: Boolean, b: Boolean) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of values built from the elements of `this` array and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest array.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <V> CharArray.zip(other: CharArray, transform: (a: Char, b: Char) -> V): List<V> {\n    val size = minOf(size, other.size)\n    val list = ArrayList<V>(size)\n    for (i in 0 until size) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Array<out T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ByteArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> ShortArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> IntArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> LongArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> FloatArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> DoubleArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> BooleanArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element.toString())\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <A : Appendable> CharArray.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            if (transform != null)\n                buffer.append(transform(element))\n            else\n                buffer.append(element)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Array<out T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ByteArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Byte) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun ShortArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Short) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun IntArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Int) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun LongArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Long) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun FloatArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Float) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun DoubleArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Double) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun BooleanArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Boolean) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun CharArray.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((Char) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun <T> Array<out T>.asIterable(): Iterable<T> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ByteArray.asIterable(): Iterable<Byte> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun ShortArray.asIterable(): Iterable<Short> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun IntArray.asIterable(): Iterable<Int> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun LongArray.asIterable(): Iterable<Long> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun FloatArray.asIterable(): Iterable<Float> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun DoubleArray.asIterable(): Iterable<Double> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun BooleanArray.asIterable(): Iterable<Boolean> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original array returning its elements when being iterated.\n */\npublic fun CharArray.asIterable(): Iterable<Char> {\n    if (isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun <T> Array<out T>.asSequence(): Sequence<T> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ByteArray.asSequence(): Sequence<Byte> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun ShortArray.asSequence(): Sequence<Short> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun IntArray.asSequence(): Sequence<Int> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun LongArray.asSequence(): Sequence<Long> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun FloatArray.asSequence(): Sequence<Float> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun DoubleArray.asSequence(): Sequence<Double> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun BooleanArray.asSequence(): Sequence<Boolean> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original array returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromArray\n */\npublic fun CharArray.asSequence(): Sequence<Char> {\n    if (isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Array<out Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Array<out Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Array<out Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Array<out Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Array<out Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Array<out Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ByteArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun ShortArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun IntArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun LongArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun FloatArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the array.\n */\npublic fun DoubleArray.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        ++count\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Array<out Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Array<out Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Array<out Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Array<out Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Array<out Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Array<out Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ByteArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun ShortArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun IntArray.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun LongArray.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun FloatArray.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the array.\n */\npublic fun DoubleArray.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun IntProgression.first(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.first\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun LongProgression.first(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.first\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun CharProgression.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.first\n}\n\n/**\n * Returns the first element, or `null` if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun IntProgression.firstOrNull(): Int? {\n    return if (isEmpty()) null else this.first\n}\n\n/**\n * Returns the first element, or `null` if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun LongProgression.firstOrNull(): Long? {\n    return if (isEmpty()) null else this.first\n}\n\n/**\n * Returns the first element, or `null` if the progression is empty.\n */\n@SinceKotlin(\"1.7\")\npublic fun CharProgression.firstOrNull(): Char? {\n    return if (isEmpty()) null else this.first\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun IntProgression.last(): Int {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.last\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun LongProgression.last(): Long {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.last\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun CharProgression.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Progression $this is empty.\")\n    return this.last\n}\n\n/**\n * Returns the last element, or `null` if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun IntProgression.lastOrNull(): Int? {\n    return if (isEmpty()) null else this.last\n}\n\n/**\n * Returns the last element, or `null` if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun LongProgression.lastOrNull(): Long? {\n    return if (isEmpty()) null else this.last\n}\n\n/**\n * Returns the last element, or `null` if the progression is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\n@SinceKotlin(\"1.7\")\npublic fun CharProgression.lastOrNull(): Char? {\n    return if (isEmpty()) null else this.last\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.random(): Int {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.random(): Long {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun IntRange.random(random: Random): Int {\n    try {\n        return random.nextInt(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun LongRange.random(random: Random): Long {\n    try {\n        return random.nextLong(this)\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness.\n * \n * @throws IllegalArgumentException if this range is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharRange.random(random: Random): Char {\n    try {\n        return random.nextInt(first.code, last.code + 1).toChar()\n    } catch(e: IllegalArgumentException) {\n        throw NoSuchElementException(e.message)\n    }\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun IntRange.randomOrNull(): Int? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun LongRange.randomOrNull(): Long? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharRange.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun IntRange.randomOrNull(random: Random): Int? {\n    if (isEmpty())\n        return null\n    return random.nextInt(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun LongRange.randomOrNull(random: Random): Long? {\n    if (isEmpty())\n        return null\n    return random.nextLong(this)\n}\n\n/**\n * Returns a random element from this range using the specified source of randomness, or `null` if this range is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharRange.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return random.nextInt(first.code, last.code + 1).toChar()\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(element: Int?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(element: Long?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Returns `true` if this range contains the specified [element].\n * \n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun CharRange.contains(element: Char?): Boolean {\n    return element != null && contains(element)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Byte): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Byte): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Int>.contains(value: Byte): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Long>.contains(value: Byte): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Short>.contains(value: Byte): Boolean {\n    return contains(value.toShort())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(value: Byte): Boolean {\n    return (this as ClosedRange<Int>).contains(value)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(value: Byte): Boolean {\n    return (this as ClosedRange<Long>).contains(value)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Double): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Double): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Double): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Double): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Double): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Float): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Float): Boolean {\n    return value.toLongExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Float): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Float): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Double>.contains(value: Float): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Int): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Int): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Long>.contains(value: Int): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Byte>.contains(value: Int): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Short>.contains(value: Int): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(value: Int): Boolean {\n    return (this as ClosedRange<Long>).contains(value)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\npublic operator fun ClosedRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Long): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Long): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Int>.contains(value: Long): Boolean {\n    return value.toIntExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Byte>.contains(value: Long): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"shortRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Short>.contains(value: Long): Boolean {\n    return value.toShortExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(value: Long): Boolean {\n    return (this as ClosedRange<Int>).contains(value)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\npublic operator fun ClosedRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\npublic operator fun ClosedRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\npublic operator fun ClosedRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"doubleRangeContains\")\npublic operator fun ClosedRange<Double>.contains(value: Short): Boolean {\n    return contains(value.toDouble())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@Deprecated(\"This `contains` operation mixing integer and floating point arguments has ambiguous semantics and is going to be removed.\")\n@DeprecatedSinceKotlin(warningSince = \"1.3\", errorSince = \"1.4\", hiddenSince = \"1.5\")\n@kotlin.jvm.JvmName(\"floatRangeContains\")\npublic operator fun ClosedRange<Float>.contains(value: Short): Boolean {\n    return contains(value.toFloat())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"intRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Int>.contains(value: Short): Boolean {\n    return contains(value.toInt())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"longRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Long>.contains(value: Short): Boolean {\n    return contains(value.toLong())\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.jvm.JvmName(\"byteRangeContains\")\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun OpenEndRange<Byte>.contains(value: Short): Boolean {\n    return value.toByteExactOrNull().let { if (it != null) contains(it) else false }\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun IntRange.contains(value: Short): Boolean {\n    return (this as ClosedRange<Int>).contains(value)\n}\n\n/**\n * Checks if the specified [value] belongs to this range.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun LongRange.contains(value: Short): Boolean {\n    return (this as ClosedRange<Long>).contains(value)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Byte): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Byte): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Char.downTo(to: Char): CharProgression {\n    return CharProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this, to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Int): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Int): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to, -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this, to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Long): LongProgression {\n    return LongProgression.fromClosedRange(this.toLong(), to, -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Int.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this, to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Long.downTo(to: Short): LongProgression {\n    return LongProgression.fromClosedRange(this, to.toLong(), -1L)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Byte.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a progression from this value down to the specified [to] value with the step -1.\n * \n * The [to] value should be less than or equal to `this` value.\n * If the [to] value is greater than `this` value the returned progression is empty.\n */\npublic infix fun Short.downTo(to: Short): IntProgression {\n    return IntProgression.fromClosedRange(this.toInt(), to.toInt(), -1)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.rangeUntil(to: Byte): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Long.rangeUntil(to: Byte): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Byte.rangeUntil(to: Byte): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Short.rangeUntil(to: Byte): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.rangeUntil(to: Char): CharRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.rangeUntil(to: Int): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Long.rangeUntil(to: Int): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Byte.rangeUntil(to: Int): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Short.rangeUntil(to: Int): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.rangeUntil(to: Long): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Long.rangeUntil(to: Long): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Byte.rangeUntil(to: Long): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Short.rangeUntil(to: Long): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.rangeUntil(to: Short): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Long.rangeUntil(to: Short): LongRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Byte.rangeUntil(to: Short): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun Short.rangeUntil(to: Short): IntRange {\n    return until(to)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun IntProgression.reversed(): IntProgression {\n    return IntProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun LongProgression.reversed(): LongProgression {\n    return LongProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range in the opposite direction with the same step.\n */\npublic fun CharProgression.reversed(): CharProgression {\n    return CharProgression.fromClosedRange(last, first, -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun IntProgression.step(step: Int): IntProgression {\n    checkStepIsPositive(step > 0, step)\n    return IntProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun LongProgression.step(step: Long): LongProgression {\n    checkStepIsPositive(step > 0, step)\n    return LongProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\n/**\n * Returns a progression that goes over the same range with the given step.\n */\npublic infix fun CharProgression.step(step: Int): CharProgression {\n    checkStepIsPositive(step > 0, step)\n    return CharProgression.fromClosedRange(first, last, if (this.step > 0) step else -step)\n}\n\ninternal fun Int.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toInt()..Byte.MAX_VALUE.toInt()) this.toByte() else null\n}\n\ninternal fun Long.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toLong()..Byte.MAX_VALUE.toLong()) this.toByte() else null\n}\n\ninternal fun Short.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toShort()..Byte.MAX_VALUE.toShort()) this.toByte() else null\n}\n\ninternal fun Double.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toDouble()..Byte.MAX_VALUE.toDouble()) this.toInt().toByte() else null\n}\n\ninternal fun Float.toByteExactOrNull(): Byte? {\n    return if (this in Byte.MIN_VALUE.toFloat()..Byte.MAX_VALUE.toFloat()) this.toInt().toByte() else null\n}\n\ninternal fun Long.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toLong()..Int.MAX_VALUE.toLong()) this.toInt() else null\n}\n\ninternal fun Double.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toDouble()..Int.MAX_VALUE.toDouble()) this.toInt() else null\n}\n\ninternal fun Float.toIntExactOrNull(): Int? {\n    return if (this in Int.MIN_VALUE.toFloat()..Int.MAX_VALUE.toFloat()) this.toInt() else null\n}\n\ninternal fun Double.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toDouble()..Long.MAX_VALUE.toDouble()) this.toLong() else null\n}\n\ninternal fun Float.toLongExactOrNull(): Long? {\n    return if (this in Long.MIN_VALUE.toFloat()..Long.MAX_VALUE.toFloat()) this.toLong() else null\n}\n\ninternal fun Int.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toInt()..Short.MAX_VALUE.toInt()) this.toShort() else null\n}\n\ninternal fun Long.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toLong()..Short.MAX_VALUE.toLong()) this.toShort() else null\n}\n\ninternal fun Double.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toDouble()..Short.MAX_VALUE.toDouble()) this.toInt().toShort() else null\n}\n\ninternal fun Float.toShortExactOrNull(): Short? {\n    return if (this in Short.MIN_VALUE.toFloat()..Short.MAX_VALUE.toFloat()) this.toInt().toShort() else null\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Byte): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Byte): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Byte): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Char.until(to: Char): CharRange {\n    if (to <= '\\u0000') return CharRange.EMPTY\n    return this .. (to - 1).toChar()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Int): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Int): IntRange {\n    if (to <= Int.MIN_VALUE) return IntRange.EMPTY\n    return this.toInt() .. (to - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Long): LongRange {\n    if (to <= Long.MIN_VALUE) return LongRange.EMPTY\n    return this.toLong() .. (to - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Int.until(to: Short): IntRange {\n    return this .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Long.until(to: Short): LongRange {\n    return this .. (to.toLong() - 1).toLong()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Byte.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Returns a range from this value up to but excluding the specified [to] value.\n * \n * If the [to] value is less than or equal to `this` value, then the returned range is empty.\n */\npublic infix fun Short.until(to: Short): IntRange {\n    return this.toInt() .. (to.toInt() - 1).toInt()\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeastComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtLeast(minimumValue: T): T {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Byte.coerceAtLeast(minimumValue: Byte): Byte {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Short.coerceAtLeast(minimumValue: Short): Short {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Int.coerceAtLeast(minimumValue: Int): Int {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Long.coerceAtLeast(minimumValue: Long): Long {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Float.coerceAtLeast(minimumValue: Float): Float {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not less than the specified [minimumValue].\n * \n * @return this value if it's greater than or equal to the [minimumValue] or the [minimumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtLeast\n */\npublic fun Double.coerceAtLeast(minimumValue: Double): Double {\n    return if (this < minimumValue) minimumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMostComparable\n */\npublic fun <T : Comparable<T>> T.coerceAtMost(maximumValue: T): T {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Byte.coerceAtMost(maximumValue: Byte): Byte {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Short.coerceAtMost(maximumValue: Short): Short {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Int.coerceAtMost(maximumValue: Int): Int {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Long.coerceAtMost(maximumValue: Long): Long {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Float.coerceAtMost(maximumValue: Float): Float {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value is not greater than the specified [maximumValue].\n * \n * @return this value if it's less than or equal to the [maximumValue] or the [maximumValue] otherwise.\n * \n * @sample samples.comparisons.ComparableOps.coerceAtMost\n */\npublic fun Double.coerceAtMost(maximumValue: Double): Double {\n    return if (this > maximumValue) maximumValue else this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(minimumValue: T?, maximumValue: T?): T {\n    if (minimumValue !== null && maximumValue !== null) {\n        if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n        if (this < minimumValue) return minimumValue\n        if (this > maximumValue) return maximumValue\n    }\n    else {\n        if (minimumValue !== null && this < minimumValue) return minimumValue\n        if (maximumValue !== null && this > maximumValue) return maximumValue\n    }\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Byte.coerceIn(minimumValue: Byte, maximumValue: Byte): Byte {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Short.coerceIn(minimumValue: Short, maximumValue: Short): Short {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(minimumValue: Int, maximumValue: Int): Int {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(minimumValue: Long, maximumValue: Long): Long {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Float.coerceIn(minimumValue: Float, maximumValue: Float): Float {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified range [minimumValue]..[maximumValue].\n * \n * @return this value if it's in the range, or [minimumValue] if this value is less than [minimumValue], or [maximumValue] if this value is greater than [maximumValue].\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Double.coerceIn(minimumValue: Double, maximumValue: Double): Double {\n    if (minimumValue > maximumValue) throw IllegalArgumentException(\"Cannot coerce value to an empty range: maximum $maximumValue is less than minimum $minimumValue.\")\n    if (this < minimumValue) return minimumValue\n    if (this > maximumValue) return maximumValue\n    return this\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInFloatingPointRange\n */\n@SinceKotlin(\"1.1\")\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedFloatingPointRange<T>): T {\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        // this < start equiv to this <= start && !(this >= start)\n        range.lessThanOrEquals(this, range.start) && !range.lessThanOrEquals(range.start, this) -> range.start\n        // this > end equiv to this >= end && !(this <= end)\n        range.lessThanOrEquals(range.endInclusive, this) && !range.lessThanOrEquals(this, range.endInclusive) -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceInComparable\n */\npublic fun <T : Comparable<T>> T.coerceIn(range: ClosedRange<T>): T {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<T>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Int.coerceIn(range: ClosedRange<Int>): Int {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Int>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n/**\n * Ensures that this value lies in the specified [range].\n * \n * @return this value if it's in the [range], or `range.start` if this value is less than `range.start`, or `range.endInclusive` if this value is greater than `range.endInclusive`.\n * \n * @sample samples.comparisons.ComparableOps.coerceIn\n */\npublic fun Long.coerceIn(range: ClosedRange<Long>): Long {\n    if (range is ClosedFloatingPointRange) {\n        return this.coerceIn<Long>(range)\n    }\n    if (range.isEmpty()) throw IllegalArgumentException(\"Cannot coerce value to an empty range: $range.\")\n    return when {\n        this < range.start -> range.start\n        this > range.endInclusive -> range.endInclusive\n        else -> this\n    }\n}\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UByte @kotlin.internal.IntrinsicConstEvaluation @PublishedApi internal constructor(@PublishedApi internal val data: Byte) : Comparable<UByte> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UByte can have.\n         */\n        public const val MIN_VALUE: UByte = UByte(0)\n\n        /**\n         * A constant holding the maximum value an instance of UByte can have.\n         */\n        public const val MAX_VALUE: UByte = UByte(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 1\n\n        /**\n         * The number of bits used to represent an instance of UByte in a binary form.\n         */\n        public const val SIZE_BITS: Int = 8\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /**\n     * Returns this value incremented by one.\n     *\n     * @sample samples.misc.Builtins.inc\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UByte = UByte(data.inc())\n\n    /**\n     * Returns this value decremented by one.\n     *\n     * @sample samples.misc.Builtins.dec\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UByte = UByte(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UByte): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UByte): UByte = UByte(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UByte): UByte = UByte(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UByte): UByte = UByte(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UByte = UByte(data.inv())\n\n    /**\n     * Converts this [UByte] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UByte`. Otherwise the result is negative.\n     *\n     * The resulting `Byte` value has the same binary representation as this `UByte` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data\n    /**\n     * Converts this [UByte] value to [Short].\n     *\n     * The resulting `Short` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Short` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort() and 0xFF\n    /**\n     * Converts this [UByte] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Int` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFF\n    /**\n     * Converts this [UByte] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `Long` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFF\n\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = this\n    /**\n     * Converts this [UByte] value to [UShort].\n     *\n     * The resulting `UShort` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 8 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = UShort(data.toShort() and 0xFF)\n    /**\n     * Converts this [UByte] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 24 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFF)\n    /**\n     * Converts this [UByte] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UByte`.\n     *\n     * The least significant 8 bits of the resulting `ULong` value are the same as the bits of this `UByte` value,\n     * whereas the most significant 56 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFF)\n\n    /**\n     * Converts this [UByte] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UByte] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UByte`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UByte].\n *\n * If this value is positive, the resulting `UByte` value represents the same numerical value as this `Byte`.\n *\n * The resulting `UByte` value has the same binary representation as this `Byte` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUByte(): UByte = UByte(this)\n/**\n * Converts this [Short] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Short`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Int] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUByte(): UByte = UByte(this.toByte())\n/**\n * Converts this [Long] value to [UByte].\n *\n * If this value is positive and less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UByte` value is represented by the least significant 8 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUByte(): UByte = UByte(this.toByte())\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UInt @kotlin.internal.IntrinsicConstEvaluation @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = div(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = rem(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /**\n     * Returns this value incremented by one.\n     *\n     * @sample samples.misc.Builtins.inc\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n\n    /**\n     * Returns this value decremented by one.\n     *\n     * @sample samples.misc.Builtins.dec\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /**\n     * Shifts this value left by the [bitCount] number of bits.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n\n    /**\n     * Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros.\n     *\n     * Note that only the five lowest-order bits of the [bitCount] are used as the shift distance.\n     * The shift distance actually used is therefore always in the range `0..31`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    /**\n     * Converts this [UInt] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UInt` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UInt] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `Short` value is represented by the least significant 16 bits of this `UInt` value.\n     * Note that the resulting `Short` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    /**\n     * Converts this [UInt] value to [Int].\n     *\n     * If this value is less than or equals to [Int.MAX_VALUE], the resulting `Int` value represents\n     * the same numerical value as this `UInt`. Otherwise the result is negative.\n     *\n     * The resulting `Int` value has the same binary representation as this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    /**\n     * Converts this [UInt] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `Long` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    /**\n     * Converts this [UInt] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /**\n     * Converts this [UInt] value to [UShort].\n     *\n     * If this value is less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n     * the same numerical value as this `UInt`.\n     *\n     * The resulting `UShort` value is represented by the least significant 16 bits of this `UInt` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    /**\n     * Converts this [UInt] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UInt`.\n     *\n     * The least significant 32 bits of the resulting `ULong` value are the same as the bits of this `UInt` value,\n     * whereas the most significant 32 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    /**\n     * Converts this [UInt] value to [Float].\n     *\n     * The resulting value is the closest `Float` to this `UInt` value.\n     * In case when this `UInt` value is exactly between two `Float`s,\n     * the one with zero at least significant bit of mantissa is selected.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toDouble().toFloat()\n    /**\n     * Converts this [UInt] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UInt`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = uintToDouble(data)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UInt` value are the same as the bits of this `Byte` value,\n * whereas the most significant 24 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Short] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Short`.\n *\n * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `Short` value,\n * whereas the most significant 16 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n/**\n * Converts this [Int] value to [UInt].\n *\n * If this value is positive, the resulting `UInt` value represents the same numerical value as this `Int`.\n *\n * The resulting `UInt` value has the same binary representation as this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n/**\n * Converts this [Long] value to [UInt].\n *\n * If this value is positive and less than or equals to [UInt.MAX_VALUE], the resulting `UInt` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UInt` value is represented by the least significant 32 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n\n/**\n * Converts this [Float] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Float` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Float.toUInt(): UInt = doubleToUInt(this.toDouble())\n/**\n * Converts this [Double] value to [UInt].\n *\n * The fractional part, if any, is rounded down towards zero.\n * Returns zero if this `Double` value is negative or `NaN`, [UInt.MAX_VALUE] if it's bigger than `UInt.MAX_VALUE`.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Double.toUInt(): UInt = doubleToUInt(this)\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\nimport kotlin.jvm.*\n\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@JvmInline\npublic value class UShort @kotlin.internal.IntrinsicConstEvaluation @PublishedApi internal constructor(@PublishedApi internal val data: Short) : Comparable<UShort> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UShort can have.\n         */\n        public const val MIN_VALUE: UShort = UShort(0)\n\n        /**\n         * A constant holding the maximum value an instance of UShort can have.\n         */\n        public const val MAX_VALUE: UShort = UShort(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 2\n\n        /**\n         * The number of bits used to represent an instance of UShort in a binary form.\n         */\n        public const val SIZE_BITS: Int = 16\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UShort): Int = this.toInt().compareTo(other.toInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.toUInt().compareTo(other)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.toUInt().plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = this.toUInt().plus(other)\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.toUInt().minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = this.toUInt().minus(other)\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.toUInt().times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = this.toUInt().times(other)\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.toUInt().div(other.toUInt())\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = this.toUInt().div(other)\n    /** Divides this value by the other value, truncating the result to an integer that is closer to zero. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.toUInt().rem(other.toUInt())\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = this.toUInt().rem(other)\n    /**\n     * Calculates the remainder of truncating division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UByte): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UShort): UInt = this.toUInt().floorDiv(other.toUInt())\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: UInt): UInt = this.toUInt().floorDiv(other)\n    /**\n     * Divides this value by the other value, flooring the result to an integer that is closer to negative infinity.\n     * \n     * For unsigned types, the results of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun floorDiv(other: ULong): ULong = this.toULong().floorDiv(other)\n\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UByte): UByte = this.toUInt().mod(other.toUInt()).toUByte()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UShort): UShort = this.toUInt().mod(other.toUInt()).toUShort()\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: UInt): UInt = this.toUInt().mod(other)\n    /**\n     * Calculates the remainder of flooring division of this value by the other value.\n     * \n     * The result is always less than the divisor.\n     * \n     * For unsigned types, the remainders of flooring division and truncating division are the same.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun mod(other: ULong): ULong = this.toULong().mod(other)\n\n    /**\n     * Returns this value incremented by one.\n     *\n     * @sample samples.misc.Builtins.inc\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UShort = UShort(data.inc())\n\n    /**\n     * Returns this value decremented by one.\n     *\n     * @sample samples.misc.Builtins.dec\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UShort = UShort(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UShort): UIntRange = UIntRange(this.toUInt(), other.toUInt())\n\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UShort): UShort = UShort(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UShort): UShort = UShort(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UShort): UShort = UShort(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UShort = UShort(data.inv())\n\n    /**\n     * Converts this [UShort] value to [Byte].\n     *\n     * If this value is less than or equals to [Byte.MAX_VALUE], the resulting `Byte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `Byte` value is represented by the least significant 8 bits of this `UShort` value.\n     * Note that the resulting `Byte` value may be negative.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    /**\n     * Converts this [UShort] value to [Short].\n     *\n     * If this value is less than or equals to [Short.MAX_VALUE], the resulting `Short` value represents\n     * the same numerical value as this `UShort`. Otherwise the result is negative.\n     *\n     * The resulting `Short` value has the same binary representation as this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data\n    /**\n     * Converts this [UShort] value to [Int].\n     *\n     * The resulting `Int` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Int` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt() and 0xFFFF\n    /**\n     * Converts this [UShort] value to [Long].\n     *\n     * The resulting `Long` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `Long` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF\n\n    /**\n     * Converts this [UShort] value to [UByte].\n     *\n     * If this value is less than or equals to [UByte.MAX_VALUE], the resulting `UByte` value represents\n     * the same numerical value as this `UShort`.\n     *\n     * The resulting `UByte` value is represented by the least significant 8 bits of this `UShort` value.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    /** Returns this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = this\n    /**\n     * Converts this [UShort] value to [UInt].\n     *\n     * The resulting `UInt` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `UInt` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 16 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = UInt(data.toInt() and 0xFFFF)\n    /**\n     * Converts this [UShort] value to [ULong].\n     *\n     * The resulting `ULong` value represents the same numerical value as this `UShort`.\n     *\n     * The least significant 16 bits of the resulting `ULong` value are the same as the bits of this `UShort` value,\n     * whereas the most significant 48 bits are filled with zeros.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF)\n\n    /**\n     * Converts this [UShort] value to [Float].\n     *\n     * The resulting `Float` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toFloat(): Float = this.toInt().toFloat()\n    /**\n     * Converts this [UShort] value to [Double].\n     *\n     * The resulting `Double` value represents the same numerical value as this `UShort`.\n     */\n    @kotlin.internal.InlineOnly\n    public inline fun toDouble(): Double = this.toInt().toDouble()\n\n    public override fun toString(): String = toInt().toString()\n\n}\n\n/**\n * Converts this [Byte] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Byte`.\n *\n * The least significant 8 bits of the resulting `UShort` value are the same as the bits of this `Byte` value,\n * whereas the most significant 8 bits are filled with the sign bit of this value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Short] value to [UShort].\n *\n * If this value is positive, the resulting `UShort` value represents the same numerical value as this `Short`.\n *\n * The resulting `UShort` value has the same binary representation as this `Short` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUShort(): UShort = UShort(this)\n/**\n * Converts this [Int] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Int`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Int` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUShort(): UShort = UShort(this.toShort())\n/**\n * Converts this [Long] value to [UShort].\n *\n * If this value is positive and less than or equals to [UShort.MAX_VALUE], the resulting `UShort` value represents\n * the same numerical value as this `Long`.\n *\n * The resulting `UShort` value is represented by the least significant 16 bits of this `Long` value.\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUShort(): UShort = UShort(this.toShort())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\nimport kotlin.random.Random\n\ninternal object EmptyIterator : ListIterator<Nothing> {\n    override fun hasNext(): Boolean = false\n    override fun hasPrevious(): Boolean = false\n    override fun nextIndex(): Int = 0\n    override fun previousIndex(): Int = -1\n    override fun next(): Nothing = throw NoSuchElementException()\n    override fun previous(): Nothing = throw NoSuchElementException()\n}\n\ninternal object EmptyList : List<Nothing>, Serializable, RandomAccess {\n    private const val serialVersionUID: Long = -7390468764508069838L\n\n    override fun equals(other: Any?): Boolean = other is List<*> && other.isEmpty()\n    override fun hashCode(): Int = 1\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun get(index: Int): Nothing = throw IndexOutOfBoundsException(\"Empty list doesn't contain element at index $index.\")\n    override fun indexOf(element: Nothing): Int = -1\n    override fun lastIndexOf(element: Nothing): Int = -1\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun listIterator(): ListIterator<Nothing> = EmptyIterator\n    override fun listIterator(index: Int): ListIterator<Nothing> {\n        if (index != 0) throw IndexOutOfBoundsException(\"Index: $index\")\n        return EmptyIterator\n    }\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<Nothing> {\n        if (fromIndex == 0 && toIndex == 0) return this\n        throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex\")\n    }\n\n    private fun readResolve(): Any = EmptyList\n}\n\ninternal fun <T> Array<out T>.asCollection(): Collection<T> = ArrayAsCollection(this, isVarargs = false)\n\nprivate class ArrayAsCollection<T>(val values: Array<out T>, val isVarargs: Boolean) : Collection<T> {\n    override val size: Int get() = values.size\n    override fun isEmpty(): Boolean = values.isEmpty()\n    override fun contains(element: T): Boolean = values.contains(element)\n    override fun containsAll(elements: Collection<T>): Boolean = elements.all { contains(it) }\n    override fun iterator(): Iterator<T> = values.iterator()\n    // override hidden toArray implementation to prevent copying of values array\n    public fun toArray(): Array<out Any?> = values.copyToArrayOfAny(isVarargs)\n}\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\npublic fun <T> emptyList(): List<T> = EmptyList\n\n/**\n * Returns a new read-only list of given elements.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.readOnlyList\n */\npublic fun <T> listOf(vararg elements: T): List<T> = if (elements.size > 0) elements.asList() else emptyList()\n\n/**\n * Returns an empty read-only list.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.emptyReadOnlyList\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> listOf(): List<T> = emptyList()\n\n/**\n * Returns an empty new [MutableList].\n * @sample samples.collections.Collections.Lists.emptyMutableList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableListOf(): MutableList<T> = ArrayList()\n\n/**\n * Returns an empty new [ArrayList].\n * @sample samples.collections.Collections.Lists.emptyArrayList\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> arrayListOf(): ArrayList<T> = ArrayList()\n\n/**\n * Returns a new [MutableList] with the given elements.\n * @sample samples.collections.Collections.Lists.mutableList\n */\npublic fun <T> mutableListOf(vararg elements: T): MutableList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new [ArrayList] with the given elements.\n * @sample samples.collections.Collections.Lists.arrayList\n */\npublic fun <T> arrayListOf(vararg elements: T): ArrayList<T> =\n    if (elements.size == 0) ArrayList() else ArrayList(ArrayAsCollection(elements, isVarargs = true))\n\n/**\n * Returns a new read-only list either of single given element, if it is not null, or empty list if the element is null. The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(element: T?): List<T> = if (element != null) listOf(element) else emptyList()\n\n/**\n * Returns a new read-only list only of those given elements, that are not null.  The returned list is serializable (JVM).\n * @sample samples.collections.Collections.Lists.listOfNotNull\n */\npublic fun <T : Any> listOfNotNull(vararg elements: T?): List<T> = elements.filterNotNull()\n\n/**\n * Creates a new read-only list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.readOnlyListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> List(size: Int, init: (index: Int) -> T): List<T> = MutableList(size, init)\n\n/**\n * Creates a new mutable list with the specified [size], where each element is calculated by calling the specified\n * [init] function.\n *\n * The function [init] is called for each list element sequentially starting from the first one.\n * It should return the value for a list element given its index.\n *\n * @sample samples.collections.Collections.Lists.mutableListFromInitializer\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList(size: Int, init: (index: Int) -> T): MutableList<T> {\n    val list = ArrayList<T>(size)\n    repeat(size) { index -> list.add(init(index)) }\n    return list\n}\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * The returned list is serializable (JVM).\n *\n * @sample samples.collections.Builders.Lists.buildListSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <E> buildList(@BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Builds a new read-only [List] by populating a [MutableList] using the given [builderAction]\n * and returning a read-only list with the same elements.\n *\n * The list passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * The returned list is serializable (JVM).\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Lists.buildListSampleWithCapacity\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <E> buildList(capacity: Int, @BuilderInference builderAction: MutableList<E>.() -> Unit): List<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildListInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E>\n\n/**\n * Returns an [IntRange] of the valid indices for this collection.\n * @sample samples.collections.Collections.Collections.indicesOfCollection\n */\npublic val Collection<*>.indices: IntRange\n    get() = 0..size - 1\n\n/**\n * Returns the index of the last item in the list or -1 if the list is empty.\n *\n * @sample samples.collections.Collections.Lists.lastIndexOfList\n */\npublic val <T> List<T>.lastIndex: Int\n    get() = this.size - 1\n\n/**\n * Returns `true` if the collection is not empty.\n * @sample samples.collections.Collections.Collections.collectionIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable collection is either null or empty.\n * @sample samples.collections.Collections.Collections.collectionIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.isEmpty()\n}\n\n/**\n * Returns this Collection if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Collections.collectionOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>?.orEmpty(): Collection<T> = this ?: emptyList()\n\n/**\n * Returns this List if it's not `null` and the empty list otherwise.\n * @sample samples.collections.Collections.Lists.listOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>?.orEmpty(): List<T> = this ?: emptyList()\n\n/**\n * Returns this collection if it's not empty\n * or the result of calling [defaultValue] function if the collection is empty.\n *\n * @sample samples.collections.Collections.Collections.collectionIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : Collection<*>, C : R =\n    if (isEmpty()) defaultValue() else this\n\n\n/**\n * Checks if all elements in the specified collection are contained in this collection.\n *\n * Allows to overcome type-safety restriction of `containsAll` that requires to pass a collection of type `Collection<E>`.\n * @sample samples.collections.Collections.Collections.collectionContainsAll\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> Collection<T>.containsAll(elements: Collection<T>): Boolean = this.containsAll(elements)\n\n\n/**\n * Returns a new list with the elements of this list randomly shuffled\n * using the specified [random] instance as the source of randomness.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Iterable<T>.shuffled(random: Random): List<T> = toMutableList().apply { shuffle(random) }\n\n\ninternal fun <T> List<T>.optimizeReadOnlyList() = when (size) {\n    0 -> emptyList()\n    1 -> listOf(this[0])\n    else -> this\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements,\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchOnComparable\n * @sample samples.collections.Collections.Lists.binarySearchWithBoundaries\n */\npublic fun <T : Comparable<T>> List<T?>.binarySearch(element: T?, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = compareValues(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for the provided [element] using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the specified [comparator],\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements equal to the specified [element], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted according to the specified [comparator].\n * @sample samples.collections.Collections.Lists.binarySearchWithComparator\n */\npublic fun <T> List<T>.binarySearch(element: T, comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparator.compare(midVal, element)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Searches this list or its range for an element having the key returned by the specified [selector] function\n * equal to the provided [key] value using the binary search algorithm.\n * The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements.\n * otherwise the result is undefined.\n *\n * If the list contains multiple elements with the specified [key], there is no guarantee which one will be found.\n *\n * `null` value is considered to be less than any non-null value.\n *\n * @return the index of the element with the specified [key], if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchByKey\n */\npublic inline fun <T, K : Comparable<K>> List<T>.binarySearchBy(\n    key: K?,\n    fromIndex: Int = 0,\n    toIndex: Int = size,\n    crossinline selector: (T) -> K?\n): Int =\n    binarySearch(fromIndex, toIndex) { compareValues(selector(it), key) }\n\n// do not introduce this overload --- too rare\n//public fun <T, K> List<T>.binarySearchBy(key: K, comparator: Comparator<K>, fromIndex: Int = 0, toIndex: Int = size(), selector: (T) -> K): Int =\n//        binarySearch(fromIndex, toIndex) { comparator.compare(selector(it), key) }\n\n\n/**\n * Searches this list or its range for an element for which the given [comparison] function returns zero using the binary search algorithm.\n *\n * The list is expected to be sorted so that the signs of the [comparison] function's return values ascend on the list elements,\n * i.e. negative values come before zero and zeroes come before positive values.\n * Otherwise, the result is undefined.\n *\n * If the list contains multiple elements for which [comparison] returns zero, there is no guarantee which one will be found.\n *\n * @param comparison function that returns zero when called on the list element being searched.\n * On the elements coming before the target element, the function must return negative values;\n * on the elements coming after the target element, the function must return positive values.\n *\n * @return the index of the found element, if it is contained in the list within the specified range;\n * otherwise, the inverted insertion point `(-insertion point - 1)`.\n * The insertion point is defined as the index at which the element should be inserted,\n * so that the list (or the specified subrange of list) still remains sorted.\n * @sample samples.collections.Collections.Lists.binarySearchWithComparisonFunction\n */\npublic fun <T> List<T>.binarySearch(fromIndex: Int = 0, toIndex: Int = size, comparison: (T) -> Int): Int {\n    rangeCheck(size, fromIndex, toIndex)\n\n    var low = fromIndex\n    var high = toIndex - 1\n\n    while (low <= high) {\n        val mid = (low + high).ushr(1) // safe from overflows\n        val midVal = get(mid)\n        val cmp = comparison(midVal)\n\n        if (cmp < 0)\n            low = mid + 1\n        else if (cmp > 0)\n            high = mid - 1\n        else\n            return mid // key found\n    }\n    return -(low + 1)  // key not found\n}\n\n/**\n * Checks that `from` and `to` are in\n * the range of [0..size] and throws an appropriate exception, if they aren't.\n */\nprivate fun rangeCheck(size: Int, fromIndex: Int, toIndex: Int) {\n    when {\n        fromIndex > toIndex -> throw IllegalArgumentException(\"fromIndex ($fromIndex) is greater than toIndex ($toIndex).\")\n        fromIndex < 0 -> throw IndexOutOfBoundsException(\"fromIndex ($fromIndex) is less than zero.\")\n        toIndex > size -> throw IndexOutOfBoundsException(\"toIndex ($toIndex) is greater than size ($size).\")\n    }\n}\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkIndexOverflow(index: Int): Int\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal expect fun checkCountOverflow(count: Int): Int\n\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwIndexOverflow() { throw ArithmeticException(\"Index overflow has happened.\") }\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun throwCountOverflow() { throw ArithmeticException(\"Count overflow has happened.\") }\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\nprivate object EmptyMap : Map<Any?, Nothing>, Serializable {\n    private const val serialVersionUID: Long = 8246714829545688274\n\n    override fun equals(other: Any?): Boolean = other is Map<*, *> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"{}\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n\n    override fun containsKey(key: Any?): Boolean = false\n    override fun containsValue(value: Nothing): Boolean = false\n    override fun get(key: Any?): Nothing? = null\n    override val entries: Set<Map.Entry<Any?, Nothing>> get() = EmptySet\n    override val keys: Set<Any?> get() = EmptySet\n    override val values: Collection<Nothing> get() = EmptyList\n\n    private fun readResolve(): Any = EmptyMap\n}\n\n/**\n * Returns an empty read-only map of specified type.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\npublic fun <K, V> emptyMap(): Map<K, V> = @Suppress(\"UNCHECKED_CAST\") (EmptyMap as Map<K, V>)\n\n/**\n * Returns a new read-only map with the specified contents, given as a list of pairs\n * where the first value is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic fun <K, V> mapOf(vararg pairs: Pair<K, V>): Map<K, V> =\n    if (pairs.size > 0) pairs.toMap(LinkedHashMap(mapCapacity(pairs.size))) else emptyMap()\n\n/**\n * Returns an empty read-only map.\n *\n * The returned map is serializable (JVM).\n * @sample samples.collections.Maps.Instantiation.emptyReadOnlyMap\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mapOf(): Map<K, V> = emptyMap()\n\n/**\n * Returns an empty new [MutableMap].\n *\n * The returned map preserves the entry iteration order.\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> mutableMapOf(): MutableMap<K, V> = LinkedHashMap()\n\n/**\n * Returns a new [MutableMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.mutableMapFromPairs\n * @sample samples.collections.Maps.Instantiation.emptyMutableMap\n */\npublic fun <K, V> mutableMapOf(vararg pairs: Pair<K, V>): MutableMap<K, V> =\n    LinkedHashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [HashMap].\n *\n * @sample samples.collections.Maps.Instantiation.emptyHashMap\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> hashMapOf(): HashMap<K, V> = HashMap<K, V>()\n\n/**\n * Returns a new [HashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * @sample samples.collections.Maps.Instantiation.hashMapFromPairs\n */\npublic fun <K, V> hashMapOf(vararg pairs: Pair<K, V>): HashMap<K, V> = HashMap<K, V>(mapCapacity(pairs.size)).apply { putAll(pairs) }\n\n/**\n * Returns an empty new [LinkedHashMap].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> linkedMapOf(): LinkedHashMap<K, V> = LinkedHashMap<K, V>()\n\n/**\n * Returns a new [LinkedHashMap] with the specified contents, given as a list of pairs\n * where the first component is the key and the second is the value.\n *\n * If multiple pairs have the same key, the resulting map will contain the value from the last of those pairs.\n *\n * Entries of the map are iterated in the order they were specified.\n *\n * @sample samples.collections.Maps.Instantiation.linkedMapFromPairs\n */\npublic fun <K, V> linkedMapOf(vararg pairs: Pair<K, V>): LinkedHashMap<K, V> = pairs.toMap(LinkedHashMap(mapCapacity(pairs.size)))\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * The returned map is serializable (JVM).\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <K, V> buildMap(@BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Builds a new read-only [Map] by populating a [MutableMap] using the given [builderAction]\n * and returning a read-only map with the same key-value pairs.\n *\n * The map passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of pairs added in the [builderAction].\n *\n * Entries of the map are iterated in the order they were added by the [builderAction].\n *\n * The returned map is serializable (JVM).\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Maps.buildMapSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <K, V> buildMap(capacity: Int, @BuilderInference builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildMapInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V>\n\n/**\n * Calculate the initial capacity of a map.\n */\n@PublishedApi\ninternal expect fun mapCapacity(expectedSize: Int): Int\n\n/**\n * Returns `true` if this map is not empty.\n * @sample samples.collections.Maps.Usage.mapIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>.isNotEmpty(): Boolean = !isEmpty()\n\n/**\n * Returns `true` if this nullable map is either null or empty.\n * @sample samples.collections.Maps.Usage.mapIsNullOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<out K, V>?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || isEmpty()\n}\n\n/**\n * Returns the [Map] if its not `null`, or the empty [Map] otherwise.\n *\n * @sample samples.collections.Maps.Usage.mapOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>?.orEmpty(): Map<K, V> = this ?: emptyMap()\n\n/**\n * Returns this map if it's not empty\n * or the result of calling [defaultValue] function if the map is empty.\n *\n * @sample samples.collections.Maps.Usage.mapIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <M, R> M.ifEmpty(defaultValue: () -> R): R where M : Map<*, *>, M : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Checks if the map contains the given key.\n *\n * This method allows to use the `x in map` syntax for checking whether an object is contained in the map.\n *\n * @sample samples.collections.Maps.Usage.containsKey\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.contains(key: K): Boolean = containsKey(key)\n\n/**\n * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <@kotlin.internal.OnlyInputTypes K, V> Map<out K, V>.get(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, V>).get(key)\n\n/**\n * Allows to use the index operator for storing values in a mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.set(key: K, value: V): Unit {\n    put(key, value)\n}\n\n/**\n * Returns `true` if the map contains the specified [key].\n *\n * Allows to overcome type-safety restriction of `containsKey` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K> Map<out K, *>.containsKey(key: K): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as Map<K, *>).containsKey(key)\n\n/**\n * Returns `true` if the map maps one or more keys to the specified [value].\n *\n * Allows to overcome type-safety restriction of `containsValue` that requires to pass a value of type `V`.\n *\n * @sample samples.collections.Maps.Usage.containsValue\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\n@kotlin.internal.InlineOnly\npublic inline fun <K, @kotlin.internal.OnlyInputTypes V> Map<K, V>.containsValue(value: V): Boolean = this.containsValue(value)\n\n\n/**\n * Removes the specified key and its corresponding value from this map.\n *\n * @return the previous value associated with the key, or `null` if the key was not present in the map.\n\n * Allows to overcome type-safety restriction of `remove` that requires to pass a key of type `K`.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes K, V> MutableMap<out K, V>.remove(key: K): V? =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableMap<K, V>).remove(key)\n\n/**\n * Returns the key component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component1(): K = key\n\n/**\n * Returns the value component of the map entry.\n *\n * This method allows to use destructuring declarations when working with maps, for example:\n * ```\n * for ((key, value) in map) {\n *     // do something with the key and the value\n * }\n * ```\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map.Entry<K, V>.component2(): V = value\n\n/**\n * Converts entry to [Pair] with key being first component and value being second.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map.Entry<K, V>.toPair(): Pair<K, V> = Pair(key, value)\n\n/**\n * Returns the value for the given key, or the result of the [defaultValue] function if there was no entry for the given key.\n *\n * @sample samples.collections.Maps.Usage.getOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <K, V> Map<K, V>.getOrElse(key: K, defaultValue: () -> V): V = get(key) ?: defaultValue()\n\n\ninternal inline fun <K, V> Map<K, V>.getOrElseNullable(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    if (value == null && !containsKey(key)) {\n        return defaultValue()\n    } else {\n        @Suppress(\"UNCHECKED_CAST\")\n        return value as V\n    }\n}\n\n/**\n * Returns the value for the given [key] or throws an exception if there is no such key in the map.\n *\n * If the map was created by [withDefault], resorts to its `defaultValue` provider function\n * instead of throwing an exception.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and\n * no implicit default value was provided for that map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<K, V>.getValue(key: K): V = getOrImplicitDefault(key)\n\n/**\n * Returns the value for the given key. If the key is not found in the map, calls the [defaultValue] function,\n * puts its result into the map under the given key and returns it.\n *\n * Note that the operation is not guaranteed to be atomic if the map is being modified concurrently.\n *\n * @sample samples.collections.Maps.Usage.getOrPut\n */\npublic inline fun <K, V> MutableMap<K, V>.getOrPut(key: K, defaultValue: () -> V): V {\n    val value = get(key)\n    return if (value == null) {\n        val answer = defaultValue()\n        put(key, answer)\n        answer\n    } else {\n        value\n    }\n}\n\n/**\n * Returns an [Iterator] over the entries in the [Map].\n *\n * @sample samples.collections.Maps.Usage.forOverEntries\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> Map<out K, V>.iterator(): Iterator<Map.Entry<K, V>> = entries.iterator()\n\n/**\n * Returns a [MutableIterator] over the mutable entries in the [MutableMap].\n *\n */\n@kotlin.jvm.JvmName(\"mutableIterator\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.iterator(): MutableIterator<MutableMap.MutableEntry<K, V>> = entries.iterator()\n\n/**\n * Populates the given [destination] map with entries having the keys of this map and the values obtained\n * by applying the [transform] function to each entry in this [Map].\n */\npublic inline fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, { it.key }, transform)\n}\n\n/**\n * Populates the given [destination] map with entries having the keys obtained\n * by applying the [transform] function to each entry in this [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n */\npublic inline fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(destination: M, transform: (Map.Entry<K, V>) -> R): M {\n    return entries.associateByTo(destination, transform, { it.value })\n}\n\n/**\n * Puts all the given [pairs] into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Array<out Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given collection into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Iterable<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Puts all the elements of the given sequence into this [MutableMap] with the first component in the pair being the key and the second the value.\n */\npublic fun <K, V> MutableMap<in K, in V>.putAll(pairs: Sequence<Pair<K, V>>): Unit {\n    for ((key, value) in pairs) {\n        put(key, value)\n    }\n}\n\n/**\n * Returns a new map with entries having the keys of this map and the values obtained by applying the [transform]\n * function to each entry in this [Map].\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapValues\n */\npublic inline fun <K, V, R> Map<out K, V>.mapValues(transform: (Map.Entry<K, V>) -> R): Map<K, R> {\n    return mapValuesTo(LinkedHashMap<K, R>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a new Map with entries having the keys obtained by applying the [transform] function to each entry in this\n * [Map] and the values of this map.\n *\n * In case if any two entries are mapped to the equal keys, the value of the latter one will overwrite\n * the value associated with the former one.\n *\n * The returned map preserves the entry iteration order of the original map.\n *\n * @sample samples.collections.Maps.Transformations.mapKeys\n */\npublic inline fun <K, V, R> Map<out K, V>.mapKeys(transform: (Map.Entry<K, V>) -> R): Map<R, V> {\n    return mapKeysTo(LinkedHashMap<R, V>(mapCapacity(size)), transform) // .optimizeReadOnlyMap()\n}\n\n/**\n * Returns a map containing all key-value pairs with keys matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterKeys\n */\npublic inline fun <K, V> Map<out K, V>.filterKeys(predicate: (K) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.key)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n/**\n * Returns a map containing all key-value pairs with values matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n *  @sample samples.collections.Maps.Filtering.filterValues\n */\npublic inline fun <K, V> Map<out K, V>.filterValues(predicate: (V) -> Boolean): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    for (entry in this) {\n        if (predicate(entry.value)) {\n            result.put(entry.key, entry.value)\n        }\n    }\n    return result\n}\n\n\n/**\n * Appends all entries matching the given [predicate] into the mutable map given as [destination] parameter.\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filter\n */\npublic inline fun <K, V> Map<out K, V>.filter(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Appends all entries not matching the given [predicate] into the given [destination].\n *\n * @return the destination map.\n * @sample samples.collections.Maps.Filtering.filterNotTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterNotTo(destination: M, predicate: (Map.Entry<K, V>) -> Boolean): M {\n    for (element in this) {\n        if (!predicate(element)) {\n            destination.put(element.key, element.value)\n        }\n    }\n    return destination\n}\n\n/**\n * Returns a new map containing all key-value pairs not matching the given [predicate].\n *\n * The returned map preserves the entry iteration order of the original map.\n * @sample samples.collections.Maps.Filtering.filterNot\n */\npublic inline fun <K, V> Map<out K, V>.filterNot(predicate: (Map.Entry<K, V>) -> Boolean): Map<K, V> {\n    return filterNotTo(LinkedHashMap<K, V>(), predicate)\n}\n\n/**\n * Returns a new map containing all key-value pairs from the given collection of pairs.\n *\n * The returned map preserves the entry iteration order of the original collection.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Iterable<Pair<K, V>>.toMap(): Map<K, V> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyMap()\n            1 -> mapOf(if (this is List) this[0] else iterator().next())\n            else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n        }\n    }\n    return toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given collection of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Iterable<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given array of pairs.\n *\n * The returned map preserves the entry iteration order of the original array.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Array<out Pair<K, V>>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> mapOf(this[0])\n    else -> toMap(LinkedHashMap<K, V>(mapCapacity(size)))\n}\n\n/**\n *  Populates and returns the [destination] mutable map with key-value pairs from the given array of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Array<out Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new map containing all key-value pairs from the given sequence of pairs.\n *\n * The returned map preserves the entry iteration order of the original sequence.\n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic fun <K, V> Sequence<Pair<K, V>>.toMap(): Map<K, V> = toMap(LinkedHashMap<K, V>()).optimizeReadOnlyMap()\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given sequence of pairs.\n */\npublic fun <K, V, M : MutableMap<in K, in V>> Sequence<Pair<K, V>>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Returns a new read-only map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMap(): Map<K, V> = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMap()\n    else -> toMutableMap()\n}\n\n/**\n * Returns a new mutable map containing all key-value pairs from the original map.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V> Map<out K, V>.toMutableMap(): MutableMap<K, V> = LinkedHashMap(this)\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs from the given map.\n */\n@SinceKotlin(\"1.1\")\npublic fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.toMap(destination: M): M =\n    destination.apply { putAll(this@toMap) }\n\n/**\n * Creates a new read-only map by replacing or adding an entry to this map from a given key-value [pair].\n *\n * The returned map preserves the entry iteration order of the original map.\n * The [pair] is iterated in the end if it has a unique key.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pair: Pair<K, V>): Map<K, V> =\n    if (this.isEmpty()) mapOf(pair) else LinkedHashMap(this).apply { put(pair.first, pair.second) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given collection of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] collection.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Iterable<Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given array of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] array.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Array<out Pair<K, V>>): Map<K, V> =\n    if (this.isEmpty()) pairs.toMap() else LinkedHashMap(this).apply { putAll(pairs) }\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from a given sequence of key-value [pairs].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those [pairs] with unique keys are iterated in the end in the order of [pairs] sequence.\n */\npublic operator fun <K, V> Map<out K, V>.plus(pairs: Sequence<Pair<K, V>>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(pairs) }.optimizeReadOnlyMap()\n\n/**\n * Creates a new read-only map by replacing or adding entries to this map from another [map].\n *\n * The returned map preserves the entry iteration order of the original map.\n * Those entries of another [map] that are missing in this map are iterated in the end in the order of that [map].\n */\npublic operator fun <K, V> Map<out K, V>.plus(map: Map<out K, V>): Map<K, V> =\n    LinkedHashMap(this).apply { putAll(map) }\n\n\n/**\n * Appends or replaces the given [pair] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pair: Pair<K, V>) {\n    put(pair.first, pair.second)\n}\n\n/**\n * Appends or replaces all pairs from the given collection of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Iterable<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given array of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Array<out Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all pairs from the given sequence of [pairs] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(pairs: Sequence<Pair<K, V>>) {\n    putAll(pairs)\n}\n\n/**\n * Appends or replaces all entries from the given [map] in this mutable map.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<in K, in V>.plusAssign(map: Map<K, V>) {\n    putAll(map)\n}\n\n/**\n * Returns a map containing all entries of the original map except the entry with the given [key].\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(key: K): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(key) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] collection.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Iterable<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] array.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Array<out K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Returns a map containing all entries of the original map except those entries\n * the keys of which are contained in the given [keys] sequence.\n *\n * The returned map preserves the entry iteration order of the original map.\n */\n@SinceKotlin(\"1.1\")\npublic operator fun <K, V> Map<out K, V>.minus(keys: Sequence<K>): Map<K, V> =\n    this.toMutableMap().apply { minusAssign(keys) }.optimizeReadOnlyMap()\n\n/**\n * Removes the entry with the given [key] from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(key: K) {\n    remove(key)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] collection from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Iterable<K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries the keys of which are contained in the given [keys] array from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Array<out K>) {\n    this.keys.removeAll(keys)\n}\n\n/**\n * Removes all entries from the keys of which are contained in the given [keys] sequence from this mutable map.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <K, V> MutableMap<K, V>.minusAssign(keys: Sequence<K>) {\n    this.keys.removeAll(keys)\n}\n\n\n// do not expose for now @PublishedApi\ninternal fun <K, V> Map<K, V>.optimizeReadOnlyMap() = when (size) {\n    0 -> emptyMap()\n    1 -> toSingletonMapOrSelf()\n    else -> this\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SetsKt\")\n@file:OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n\npackage kotlin.collections\n\nimport kotlin.contracts.*\n\ninternal object EmptySet : Set<Nothing>, Serializable {\n    private const val serialVersionUID: Long = 3406603774387020532\n\n    override fun equals(other: Any?): Boolean = other is Set<*> && other.isEmpty()\n    override fun hashCode(): Int = 0\n    override fun toString(): String = \"[]\"\n\n    override val size: Int get() = 0\n    override fun isEmpty(): Boolean = true\n    override fun contains(element: Nothing): Boolean = false\n    override fun containsAll(elements: Collection<Nothing>): Boolean = elements.isEmpty()\n\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n\n    private fun readResolve(): Any = EmptySet\n}\n\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\npublic fun <T> emptySet(): Set<T> = EmptySet\n\n/**\n * Returns a new read-only set with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.readOnlySet\n */\npublic fun <T> setOf(vararg elements: T): Set<T> = if (elements.size > 0) elements.toSet() else emptySet()\n\n/**\n * Returns an empty read-only set.  The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.emptyReadOnlySet\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> setOf(): Set<T> = emptySet()\n\n/**\n * Returns an empty new [MutableSet].\n *\n * The returned set preserves the element iteration order.\n * @sample samples.collections.Collections.Sets.emptyMutableSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> mutableSetOf(): MutableSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [MutableSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.mutableSet\n */\npublic fun <T> mutableSetOf(vararg elements: T): MutableSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/** Returns an empty new [HashSet]. */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> hashSetOf(): HashSet<T> = HashSet()\n\n/** Returns a new [HashSet] with the given elements. */\npublic fun <T> hashSetOf(vararg elements: T): HashSet<T> = elements.toCollection(HashSet(mapCapacity(elements.size)))\n\n/**\n * Returns an empty new [LinkedHashSet].\n * @sample samples.collections.Collections.Sets.emptyLinkedHashSet\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> linkedSetOf(): LinkedHashSet<T> = LinkedHashSet()\n\n/**\n * Returns a new [LinkedHashSet] with the given elements.\n * Elements of the set are iterated in the order they were specified.\n * @sample samples.collections.Collections.Sets.linkedHashSet\n */\npublic fun <T> linkedSetOf(vararg elements: T): LinkedHashSet<T> = elements.toCollection(LinkedHashSet(mapCapacity(elements.size)))\n\n/**\n * Returns a new read-only set either with single given element, if it is not null, or empty set if the element is null.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(element: T?): Set<T> = if (element != null) setOf(element) else emptySet()\n\n/**\n * Returns a new read-only set only with those given elements, that are not null.\n * Elements of the set are iterated in the order they were specified.\n * The returned set is serializable (JVM).\n * @sample samples.collections.Collections.Sets.setOfNotNull\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Any> setOfNotNull(vararg elements: T?): Set<T> {\n    return elements.filterNotNullTo(LinkedHashSet())\n}\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * The returned set is serializable (JVM).\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <E> buildSet(@BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n/**\n * Builds a new read-only [Set] by populating a [MutableSet] using the given [builderAction]\n * and returning a read-only set with the same elements.\n *\n * The set passed as a receiver to the [builderAction] is valid only inside that function.\n * Using it outside of the function produces an unspecified behavior.\n *\n * [capacity] is used to hint the expected number of elements added in the [builderAction].\n *\n * Elements of the set are iterated in the order they were added by the [builderAction].\n *\n * The returned set is serializable (JVM).\n *\n * @throws IllegalArgumentException if the given [capacity] is negative.\n *\n * @sample samples.collections.Builders.Sets.buildSetSample\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\npublic inline fun <E> buildSet(capacity: Int, @BuilderInference builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return buildSetInternal(capacity, builderAction)\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal expect inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E>\n\n\n/** Returns this Set if it's not `null` and the empty set otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Set<T>?.orEmpty(): Set<T> = this ?: emptySet()\n\ninternal fun <T> Set<T>.optimizeReadOnlySet() = when (size) {\n    0 -> emptySet()\n    1 -> setOf(iterator().next())\n    else -> this\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * A range of values of type `Char`.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic class CharRange(start: Char, endInclusive: Char) : CharProgression(start, endInclusive, 1), ClosedRange<Char>, OpenEndRange<Char> {\n    override val start: Char get() = first\n    override val endInclusive: Char get() = last\n    \n    @Deprecated(\"Can throw an exception when it's impossible to represent the value with Char type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.\")\n    @SinceKotlin(\"1.7\")\n    @ExperimentalStdlibApi\n    override val endExclusive: Char get() {\n        if (last == Char.MAX_VALUE) error(\"Cannot return the exclusive upper bound of a range that includes MAX_VALUE.\")\n        return last + 1\n    }\n\n    override fun contains(value: Char): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first.code + last.code)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Char. */\n        public val EMPTY: CharRange = CharRange(1.toChar(), 0.toChar())\n    }\n}\n\n/**\n * A range of values of type `Int`.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic class IntRange(start: Int, endInclusive: Int) : IntProgression(start, endInclusive, 1), ClosedRange<Int>, OpenEndRange<Int> {\n    override val start: Int get() = first\n    override val endInclusive: Int get() = last\n    \n    @Deprecated(\"Can throw an exception when it's impossible to represent the value with Int type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.\")\n    @SinceKotlin(\"1.7\")\n    @ExperimentalStdlibApi\n    override val endExclusive: Int get() {\n        if (last == Int.MAX_VALUE) error(\"Cannot return the exclusive upper bound of a range that includes MAX_VALUE.\")\n        return last + 1\n    }\n\n    override fun contains(value: Int): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * first + last)\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Int. */\n        public val EMPTY: IntRange = IntRange(1, 0)\n    }\n}\n\n/**\n * A range of values of type `Long`.\n */\n@OptIn(ExperimentalStdlibApi::class)\npublic class LongRange(start: Long, endInclusive: Long) : LongProgression(start, endInclusive, 1), ClosedRange<Long>, OpenEndRange<Long> {\n    override val start: Long get() = first\n    override val endInclusive: Long get() = last\n    \n    @Deprecated(\"Can throw an exception when it's impossible to represent the value with Long type, for example, when the range includes MAX_VALUE. It's recommended to use 'endInclusive' property that doesn't throw.\")\n    @SinceKotlin(\"1.7\")\n    @ExperimentalStdlibApi\n    override val endExclusive: Long get() {\n        if (last == Long.MAX_VALUE) error(\"Cannot return the exclusive upper bound of a range that includes MAX_VALUE.\")\n        return last + 1\n    }\n\n    override fun contains(value: Long): Boolean = first <= value && value <= last\n\n    /** \n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    override fun isEmpty(): Boolean = first > last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongRange && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))).toInt()\n\n    override fun toString(): String = \"$first..$last\"\n\n    companion object {\n        /** An empty range of values of type Long. */\n        public val EMPTY: LongRange = LongRange(1, 0)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"PLATFORM_CLASS_MAPPED_TO_KOTLIN\")\n\npackage kotlin.text\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(): Byte? = toByteOrNull(radix = 10)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toByteOrNull(radix: Int): Byte? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Byte.MIN_VALUE || int > Byte.MAX_VALUE) return null\n    return int.toByte()\n}\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(): Short? = toShortOrNull(radix = 10)\n\n/**\n * Parses the string as a [Short] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toShortOrNull(radix: Int): Short? {\n    val int = this.toIntOrNull(radix) ?: return null\n    if (int < Short.MIN_VALUE || int > Short.MAX_VALUE) return null\n    return int.toShort()\n}\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(): Int? = toIntOrNull(radix = 10)\n\n/**\n * Parses the string as an [Int] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Int\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Int.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Int.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Int.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Int.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(): Long? = toLongOrNull(radix = 10)\n\n/**\n * Parses the string as a [Long] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\n@SinceKotlin(\"1.1\")\npublic fun String.toLongOrNull(radix: Int): Long? {\n    checkRadix(radix)\n\n    val length = this.length\n    if (length == 0) return null\n\n    val start: Int\n    val isNegative: Boolean\n    val limit: Long\n\n    val firstChar = this[0]\n    if (firstChar < '0') {  // Possible leading sign\n        if (length == 1) return null  // non-digit (possible sign) only, no digits after\n\n        start = 1\n\n        if (firstChar == '-') {\n            isNegative = true\n            limit = Long.MIN_VALUE\n        } else if (firstChar == '+') {\n            isNegative = false\n            limit = -Long.MAX_VALUE\n        } else\n            return null\n    } else {\n        start = 0\n        isNegative = false\n        limit = -Long.MAX_VALUE\n    }\n\n\n    val limitForMaxRadix = (-Long.MAX_VALUE) / 36\n\n    var limitBeforeMul = limitForMaxRadix\n    var result = 0L\n    for (i in start until length) {\n        val digit = digitOf(this[i], radix)\n\n        if (digit < 0) return null\n        if (result < limitBeforeMul) {\n            if (limitBeforeMul == limitForMaxRadix) {\n                limitBeforeMul = limit / radix\n\n                if (result < limitBeforeMul) {\n                    return null\n                }\n            } else {\n                return null\n            }\n        }\n\n        result *= radix\n\n        if (result < limit + digit) return null\n\n        result -= digit\n    }\n\n    return if (isNegative) result else -result\n}\n\n\ninternal fun numberFormatError(input: String): Nothing = throw NumberFormatException(\"Invalid number format: '$input'\")\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.contracts.*\nimport kotlin.jvm.JvmInline\nimport kotlin.math.*\n\n/**\n * Represents the amount of time one instant of time is away from another instant.\n *\n * A negative duration is possible in a situation when the second instant is earlier than the first one.\n *\n * The type can store duration values up to ±146 years with nanosecond precision,\n * and up to ±146 million years with millisecond precision.\n * If a duration-returning operation provided in `kotlin.time` produces a duration value that doesn't fit into the above range,\n * the returned `Duration` is infinite.\n *\n * An infinite duration value [Duration.INFINITE] can be used to represent infinite timeouts.\n *\n * To construct a duration use either the extension function [toDuration],\n * or the extension properties [hours], [minutes], [seconds], and so on,\n * available on [Int], [Long], and [Double] numeric types.\n *\n * To get the value of this duration expressed in a particular [duration units][DurationUnit]\n * use the functions [toInt], [toLong], and [toDouble]\n * or the properties [inWholeHours], [inWholeMinutes], [inWholeSeconds], [inWholeNanoseconds], and so on.\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\n@JvmInline\npublic value class Duration internal constructor(private val rawValue: Long) : Comparable<Duration> {\n\n    private val value: Long get() = rawValue shr 1\n    private inline val unitDiscriminator: Int get() = rawValue.toInt() and 1\n    private fun isInNanos() = unitDiscriminator == 0\n    private fun isInMillis() = unitDiscriminator == 1\n    private val storageUnit get() = if (isInNanos()) DurationUnit.NANOSECONDS else DurationUnit.MILLISECONDS\n\n    init {\n        if (durationAssertionsEnabled) {\n            if (isInNanos()) {\n                if (value !in -MAX_NANOS..MAX_NANOS) throw AssertionError(\"$value ns is out of nanoseconds range\")\n            } else {\n                if (value !in -MAX_MILLIS..MAX_MILLIS) throw AssertionError(\"$value ms is out of milliseconds range\")\n                if (value in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) throw AssertionError(\"$value ms is denormalized\")\n            }\n        }\n    }\n\n    companion object {\n        /** The duration equal to exactly 0 seconds. */\n        public val ZERO: Duration = Duration(0L)\n\n        /** The duration whose value is positive infinity. It is useful for representing timeouts that should never expire. */\n        public val INFINITE: Duration = durationOfMillis(MAX_MILLIS)\n        internal val NEG_INFINITE: Duration = durationOfMillis(-MAX_MILLIS)\n\n        /** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n        @ExperimentalTime\n        public fun convert(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double =\n            convertDurationUnit(value, sourceUnit, targetUnit)\n\n        // Duration construction extension properties in Duration companion scope\n\n        /** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of nanoseconds.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n\n        /** Returns a [Duration] equal to this [Int] number of microseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] equal to this [Long] number of microseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of microseconds.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n\n        /** Returns a [Duration] equal to this [Int] number of milliseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] equal to this [Long] number of milliseconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of milliseconds.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n\n        /** Returns a [Duration] equal to this [Int] number of seconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] equal to this [Long] number of seconds. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of seconds.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n\n        /** Returns a [Duration] equal to this [Int] number of minutes. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] equal to this [Long] number of minutes. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of minutes.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n\n        /** Returns a [Duration] equal to this [Int] number of hours. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] equal to this [Long] number of hours. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of hours.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n\n        /** Returns a [Duration] equal to this [Int] number of days. */\n        @kotlin.internal.InlineOnly\n        public inline val Int.days get() = toDuration(DurationUnit.DAYS)\n\n        /** Returns a [Duration] equal to this [Long] number of days. */\n        @kotlin.internal.InlineOnly\n        public inline val Long.days get() = toDuration(DurationUnit.DAYS)\n\n        /**\n         * Returns a [Duration] equal to this [Double] number of days.\n         *\n         * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n         *\n         * @throws IllegalArgumentException if this [Double] value is `NaN`.\n         */\n        @kotlin.internal.InlineOnly\n        public inline val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n        // deprecated static factory functions\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun nanoseconds(value: Int): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of nanoseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun nanoseconds(value: Long): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of nanoseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun nanoseconds(value: Double): Duration = value.toDuration(DurationUnit.NANOSECONDS)\n\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun microseconds(value: Int): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of microseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun microseconds(value: Long): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of microseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun microseconds(value: Double): Duration = value.toDuration(DurationUnit.MICROSECONDS)\n\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun milliseconds(value: Int): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of milliseconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun milliseconds(value: Long): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of milliseconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun milliseconds(value: Double): Duration = value.toDuration(DurationUnit.MILLISECONDS)\n\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun seconds(value: Int): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /** Returns a [Duration] representing the specified [value] number of seconds. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun seconds(value: Long): Duration = value.toDuration(DurationUnit.SECONDS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of seconds.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"value.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun seconds(value: Double): Duration = value.toDuration(DurationUnit.SECONDS)\n\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"value.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun minutes(value: Int): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /** Returns a [Duration] representing the specified [value] number of minutes. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"value.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun minutes(value: Long): Duration = value.toDuration(DurationUnit.MINUTES)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of minutes.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"value.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun minutes(value: Double): Duration = value.toDuration(DurationUnit.MINUTES)\n\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"value.hours\", \"kotlin.time.Duration.Companion.hours\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun hours(value: Int): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /** Returns a [Duration] representing the specified [value] number of hours. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"value.hours\", \"kotlin.time.Duration.Companion.hours\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun hours(value: Long): Duration = value.toDuration(DurationUnit.HOURS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of hours.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"value.hours\", \"kotlin.time.Duration.Companion.hours\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun hours(value: Double): Duration = value.toDuration(DurationUnit.HOURS)\n\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Int.days' extension property from Duration.Companion instead.\", ReplaceWith(\"value.days\", \"kotlin.time.Duration.Companion.days\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun days(value: Int): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /** Returns a [Duration] representing the specified [value] number of days. */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Long.days' extension property from Duration.Companion instead.\", ReplaceWith(\"value.days\", \"kotlin.time.Duration.Companion.days\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun days(value: Long): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /**\n         * Returns a [Duration] representing the specified [value] number of days.\n         *\n         * @throws IllegalArgumentException if the provided `Double` [value] is `NaN`.\n         */\n        @SinceKotlin(\"1.5\")\n        @ExperimentalTime\n        @Deprecated(\"Use 'Double.days' extension property from Duration.Companion instead.\", ReplaceWith(\"value.days\", \"kotlin.time.Duration.Companion.days\"))\n        @DeprecatedSinceKotlin(warningSince = \"1.6\")\n        public fun days(value: Double): Duration = value.toDuration(DurationUnit.DAYS)\n\n        /**\n         * Parses a string that represents a duration and returns the parsed [Duration] value.\n         *\n         * The following formats are accepted:\n         *\n         * - ISO-8601 Duration format, e.g. `P1DT2H3M4.058S`, see [toIsoString] and [parseIsoString].\n         * - The format of string returned by the default [Duration.toString] and `toString` in a specific unit,\n         *   e.g. `10s`, `1h 30m` or `-(1h 30m)`.\n         *\n         * @throws IllegalArgumentException if the string doesn't represent a duration in any of the supported formats.\n         * @sample samples.time.Durations.parse\n         */\n        public fun parse(value: String): Duration = try {\n            parseDuration(value, strictIso = false)\n        } catch (e: IllegalArgumentException) {\n            throw IllegalArgumentException(\"Invalid duration string format: '$value'.\", e)\n        }\n\n        /**\n         * Parses a string that represents a duration in a restricted ISO-8601 composite representation\n         * and returns the parsed [Duration] value.\n         * Composite representation is a relaxed version of ISO-8601 duration format that supports\n         * negative durations and negative values of individual components.\n         *\n         * The following restrictions are imposed:\n         *\n         * - The only allowed non-time designator is days (`D`). `Y` (years), `W` (weeks), and `M` (months) are not supported.\n         * - Day is considered to be exactly 24 hours (24-hour clock time scale).\n         * - Alternative week-based representation `[\"P\"][number][\"W\"]` is not supported.\n         *\n         * @throws IllegalArgumentException if the string doesn't represent a duration in ISO-8601 format.\n         * @sample samples.time.Durations.parseIsoString\n         */\n        public fun parseIsoString(value: String): Duration = try {\n            parseDuration(value, strictIso = true)\n        } catch (e: IllegalArgumentException) {\n            throw IllegalArgumentException(\"Invalid ISO duration string format: '$value'.\", e)\n        }\n\n        /**\n         * Parses a string that represents a duration and returns the parsed [Duration] value,\n         * or `null` if the string doesn't represent a duration in any of the supported formats.\n         *\n         * The following formats are accepted:\n         *\n         * - Restricted ISO-8601 duration composite representation, e.g. `P1DT2H3M4.058S`, see [toIsoString] and [parseIsoString].\n         * - The format of string returned by the default [Duration.toString] and `toString` in a specific unit,\n         *   e.g. `10s`, `1h 30m` or `-(1h 30m)`.\n         *   @sample samples.time.Durations.parse\n         */\n        public fun parseOrNull(value: String): Duration? = try {\n            parseDuration(value, strictIso = false)\n        } catch (e: IllegalArgumentException) {\n            null\n        }\n\n        /**\n         * Parses a string that represents a duration in restricted ISO-8601 composite representation\n         * and returns the parsed [Duration] value or `null` if the string doesn't represent a duration in the format\n         * acceptable by [parseIsoString].\n         *\n         * @sample samples.time.Durations.parseIsoString\n         */\n        public fun parseIsoStringOrNull(value: String): Duration? = try {\n            parseDuration(value, strictIso = true)\n        } catch (e: IllegalArgumentException) {\n            null\n        }\n    }\n\n    // arithmetic operators\n\n    /** Returns the negative of this value. */\n    public operator fun unaryMinus(): Duration = durationOf(-value, unitDiscriminator)\n\n    /**\n     * Returns a duration whose value is the sum of this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when adding infinite durations of different sign.\n     */\n    public operator fun plus(other: Duration): Duration {\n        when {\n            this.isInfinite() -> {\n                if (other.isFinite() || (this.rawValue xor other.rawValue >= 0))\n                    return this\n                else\n                    throw IllegalArgumentException(\"Summing infinite durations of different signs yields an undefined result.\")\n            }\n            other.isInfinite() -> return other\n        }\n\n        return when {\n            this.unitDiscriminator == other.unitDiscriminator -> {\n                val result = this.value + other.value // never overflows long, but can overflow long63\n                when {\n                    isInNanos() ->\n                        durationOfNanosNormalized(result)\n                    else ->\n                        durationOfMillisNormalized(result)\n                }\n            }\n            this.isInMillis() ->\n                addValuesMixedRanges(this.value, other.value)\n            else ->\n                addValuesMixedRanges(other.value, this.value)\n        }\n    }\n\n    private fun addValuesMixedRanges(thisMillis: Long, otherNanos: Long): Duration {\n        val otherMillis = nanosToMillis(otherNanos)\n        val resultMillis = thisMillis + otherMillis\n        return if (resultMillis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n            val otherNanoRemainder = otherNanos - millisToNanos(otherMillis)\n            durationOfNanos(millisToNanos(resultMillis) + otherNanoRemainder)\n        } else {\n            durationOfMillis(resultMillis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n        }\n    }\n\n    /**\n     * Returns a duration whose value is the difference between this and [other] duration values.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when subtracting infinite durations of the same sign.\n     */\n    public operator fun minus(other: Duration): Duration = this + (-other)\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Int): Duration {\n        if (isInfinite()) {\n            return when {\n                scale == 0 -> throw IllegalArgumentException(\"Multiplying infinite duration by zero yields an undefined result.\")\n                scale > 0 -> this\n                else -> -this\n            }\n        }\n        if (scale == 0) return ZERO\n\n        val value = value\n        val result = value * scale\n        return if (isInNanos()) {\n            if (value in (MAX_NANOS / Int.MIN_VALUE)..(-MAX_NANOS / Int.MIN_VALUE)) {\n                // can't overflow nanos range for any scale\n                durationOfNanos(result)\n            } else {\n                if (result / scale == value) {\n                    durationOfNanosNormalized(result)\n                } else {\n                    val millis = nanosToMillis(value)\n                    val remNanos = value - millisToNanos(millis)\n                    val resultMillis = millis * scale\n                    val totalMillis = resultMillis + nanosToMillis(remNanos * scale)\n                    if (resultMillis / scale == millis && totalMillis xor resultMillis >= 0) {\n                        durationOfMillis(totalMillis.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n                    } else {\n                        if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n                    }\n                }\n            }\n        } else {\n            if (result / scale == value) {\n                durationOfMillis(result.coerceIn(-MAX_MILLIS..MAX_MILLIS))\n            } else {\n                if (value.sign * scale.sign > 0) INFINITE else NEG_INFINITE\n            }\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value multiplied by the given [scale] number.\n     *\n     * The operation may involve rounding when the result cannot be represented exactly with a [Double] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when multiplying an infinite duration by zero.\n     */\n    public operator fun times(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale) {\n            return times(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) * scale\n        return result.toDuration(unit)\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing zero duration by zero.\n     */\n    public operator fun div(scale: Int): Duration {\n        if (scale == 0) {\n            return when {\n                isPositive() -> INFINITE\n                isNegative() -> NEG_INFINITE\n                else -> throw IllegalArgumentException(\"Dividing zero duration by zero yields an undefined result.\")\n            }\n        }\n        if (isInNanos()) {\n            return durationOfNanos(value / scale)\n        } else {\n            if (isInfinite())\n                return this * scale.sign\n\n            val result = value / scale\n\n            if (result in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n                val rem = millisToNanos(value - (result * scale)) / scale\n                return durationOfNanos(millisToNanos(result) + rem)\n            }\n            return durationOfMillis(result)\n        }\n    }\n\n    /**\n     * Returns a duration whose value is this duration value divided by the given [scale] number.\n     *\n     * @throws IllegalArgumentException if the operation results in an undefined value for the given arguments,\n     * e.g. when dividing an infinite duration by infinity or zero duration by zero.\n     */\n    public operator fun div(scale: Double): Duration {\n        val intScale = scale.roundToInt()\n        if (intScale.toDouble() == scale && intScale != 0) {\n            return div(intScale)\n        }\n\n        val unit = storageUnit\n        val result = toDouble(unit) / scale\n        return result.toDuration(unit)\n    }\n\n    /** Returns a number that is the ratio of this and [other] duration values. */\n    public operator fun div(other: Duration): Double {\n        val coarserUnit = maxOf(this.storageUnit, other.storageUnit)\n        return this.toDouble(coarserUnit) / other.toDouble(coarserUnit)\n    }\n\n    /** Returns true, if the duration value is less than zero. */\n    public fun isNegative(): Boolean = rawValue < 0\n\n    /** Returns true, if the duration value is greater than zero. */\n    public fun isPositive(): Boolean = rawValue > 0\n\n    /** Returns true, if the duration value is infinite. */\n    public fun isInfinite(): Boolean = rawValue == INFINITE.rawValue || rawValue == NEG_INFINITE.rawValue\n\n    /** Returns true, if the duration value is finite. */\n    public fun isFinite(): Boolean = !isInfinite()\n\n    /** Returns the absolute value of this value. The returned value is always non-negative. */\n    public val absoluteValue: Duration get() = if (isNegative()) -this else this\n\n    override fun compareTo(other: Duration): Int {\n        val compareBits = this.rawValue xor other.rawValue\n        if (compareBits < 0 || compareBits.toInt() and 1 == 0) // different signs or same sign/same range\n            return this.rawValue.compareTo(other.rawValue)\n        // same sign/different ranges\n        val r = this.unitDiscriminator - other.unitDiscriminator // compare ranges\n        return if (isNegative()) -r else r\n    }\n\n\n    // splitting to components\n\n    /**\n     * Splits this duration into days, hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration, and its absolute value is less than 24;\n     * - `days` represents the whole number of days in this duration.\n     *\n     *   Infinite durations are represented as either [Long.MAX_VALUE] days, or [Long.MIN_VALUE] days (depending on the sign of infinity),\n     *   and zeroes in the lower components.\n     */\n    public inline fun <T> toComponents(action: (days: Long, hours: Int, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeDays, hoursComponent, minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into hours, minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration, and its absolute value is less than 60;\n     * - `hours` represents the whole number of hours in this duration.\n     *\n     *   Infinite durations are represented as either [Long.MAX_VALUE] hours, or [Long.MIN_VALUE] hours (depending on the sign of infinity),\n     *   and zeroes in the lower components.\n     */\n    public inline fun <T> toComponents(action: (hours: Long, minutes: Int, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeHours, minutesComponent, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into minutes, seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration, and its absolute value is less than 60;\n     * - `minutes` represents the whole number of minutes in this duration.\n     *\n     *   Infinite durations are represented as either [Long.MAX_VALUE] minutes, or [Long.MIN_VALUE] minutes (depending on the sign of infinity),\n     *   and zeroes in the lower components.\n     */\n    public inline fun <T> toComponents(action: (minutes: Long, seconds: Int, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeMinutes, secondsComponent, nanosecondsComponent)\n    }\n\n    /**\n     * Splits this duration into seconds, and nanoseconds and executes the given [action] with these components.\n     * The result of [action] is returned as the result of this function.\n     *\n     * - `nanoseconds` represents the whole number of nanoseconds in this duration, and its absolute value is less than 1_000_000_000;\n     * - `seconds` represents the whole number of seconds in this duration.\n     *\n     *   Infinite durations are represented as either [Long.MAX_VALUE] seconds, or [Long.MIN_VALUE] seconds (depending on the sign of infinity),\n     *   and zero nanoseconds.\n     */\n    public inline fun <T> toComponents(action: (seconds: Long, nanoseconds: Int) -> T): T {\n        contract { callsInPlace(action, InvocationKind.EXACTLY_ONCE) }\n        return action(inWholeSeconds, nanosecondsComponent)\n    }\n\n    @PublishedApi\n    internal val hoursComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeHours % 24).toInt()\n\n    @PublishedApi\n    internal val minutesComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeMinutes % 60).toInt()\n\n    @PublishedApi\n    internal val secondsComponent: Int\n        get() = if (isInfinite()) 0 else (inWholeSeconds % 60).toInt()\n\n    @PublishedApi\n    internal val nanosecondsComponent: Int\n        get() = when {\n            isInfinite() -> 0\n            isInMillis() -> millisToNanos(value % 1_000).toInt()\n            else -> (value % 1_000_000_000).toInt()\n        }\n\n\n    // conversion to units\n\n    /**\n     * Returns the value of this duration expressed as a [Double] number of the specified [unit].\n     *\n     * The operation may involve rounding when the result cannot be represented exactly with a [Double] number.\n     *\n     * An infinite duration value is converted either to [Double.POSITIVE_INFINITY] or [Double.NEGATIVE_INFINITY] depending on its sign.\n     */\n    public fun toDouble(unit: DurationUnit): Double {\n        return when (rawValue) {\n            INFINITE.rawValue -> Double.POSITIVE_INFINITY\n            NEG_INFINITE.rawValue -> Double.NEGATIVE_INFINITY\n            else -> {\n                // TODO: whether it's ok to convert to Double before scaling\n                convertDurationUnit(value.toDouble(), storageUnit, unit)\n            }\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public fun toLong(unit: DurationUnit): Long {\n        return when (rawValue) {\n            INFINITE.rawValue -> Long.MAX_VALUE\n            NEG_INFINITE.rawValue -> Long.MIN_VALUE\n            else -> convertDurationUnit(value, storageUnit, unit)\n        }\n    }\n\n    /**\n     * Returns the value of this duration expressed as an [Int] number of the specified [unit].\n     *\n     * If the result doesn't fit in the range of [Int] type, it is coerced into that range:\n     * - [Int.MIN_VALUE] is returned if it's less than `Int.MIN_VALUE`,\n     * - [Int.MAX_VALUE] is returned if it's greater than `Int.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Int.MAX_VALUE] or [Int.MIN_VALUE] depending on its sign.\n     */\n    public fun toInt(unit: DurationUnit): Int =\n        toLong(unit).coerceIn(Int.MIN_VALUE.toLong(), Int.MAX_VALUE.toLong()).toInt()\n\n    /** The value of this duration expressed as a [Double] number of days. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeDays property instead or convert toDouble(DAYS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.DAYS)\"))\n    public val inDays: Double get() = toDouble(DurationUnit.DAYS)\n\n    /** The value of this duration expressed as a [Double] number of hours. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeHours property instead or convert toDouble(HOURS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.HOURS)\"))\n    public val inHours: Double get() = toDouble(DurationUnit.HOURS)\n\n    /** The value of this duration expressed as a [Double] number of minutes. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeMinutes property instead or convert toDouble(MINUTES) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MINUTES)\"))\n    public val inMinutes: Double get() = toDouble(DurationUnit.MINUTES)\n\n    /** The value of this duration expressed as a [Double] number of seconds. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeSeconds property instead or convert toDouble(SECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.SECONDS)\"))\n    public val inSeconds: Double get() = toDouble(DurationUnit.SECONDS)\n\n    /** The value of this duration expressed as a [Double] number of milliseconds. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeMilliseconds property instead or convert toDouble(MILLISECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MILLISECONDS)\"))\n    public val inMilliseconds: Double get() = toDouble(DurationUnit.MILLISECONDS)\n\n    /** The value of this duration expressed as a [Double] number of microseconds. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeMicroseconds property instead or convert toDouble(MICROSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.MICROSECONDS)\"))\n    public val inMicroseconds: Double get() = toDouble(DurationUnit.MICROSECONDS)\n\n    /** The value of this duration expressed as a [Double] number of nanoseconds. */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeNanoseconds property instead or convert toDouble(NANOSECONDS) if a double value is required.\", ReplaceWith(\"toDouble(DurationUnit.NANOSECONDS)\"))\n    public val inNanoseconds: Double get() = toDouble(DurationUnit.NANOSECONDS)\n\n\n    /**\n     * The value of this duration expressed as a [Long] number of days.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeDays: Long\n        get() = toLong(DurationUnit.DAYS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of hours.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeHours: Long\n        get() = toLong(DurationUnit.HOURS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of minutes.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeMinutes: Long\n        get() = toLong(DurationUnit.MINUTES)\n\n    /**\n     * The value of this duration expressed as a [Long] number of seconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeSeconds: Long\n        get() = toLong(DurationUnit.SECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeMilliseconds: Long\n        get() {\n            return if (isInMillis() && isFinite()) value else toLong(DurationUnit.MILLISECONDS)\n        }\n\n    /**\n     * The value of this duration expressed as a [Long] number of microseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeMicroseconds: Long\n        get() = toLong(DurationUnit.MICROSECONDS)\n\n    /**\n     * The value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the result doesn't fit in the range of [Long] type, it is coerced into that range:\n     * - [Long.MIN_VALUE] is returned if it's less than `Long.MIN_VALUE`,\n     * - [Long.MAX_VALUE] is returned if it's greater than `Long.MAX_VALUE`.\n     *\n     * An infinite duration value is converted either to [Long.MAX_VALUE] or [Long.MIN_VALUE] depending on its sign.\n     */\n    public val inWholeNanoseconds: Long\n        get() {\n            val value = value\n            return when {\n                isInNanos() -> value\n                value > Long.MAX_VALUE / NANOS_IN_MILLIS -> Long.MAX_VALUE\n                value < Long.MIN_VALUE / NANOS_IN_MILLIS -> Long.MIN_VALUE\n                else -> millisToNanos(value)\n            }\n        }\n\n    // shortcuts\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of nanoseconds.\n     *\n     * If the value doesn't fit in the range of [Long] type, it is coerced into that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of nanoseconds is approximately ±292 years.\n     */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeNanoseconds property instead.\", ReplaceWith(\"this.inWholeNanoseconds\"))\n    public fun toLongNanoseconds(): Long = inWholeNanoseconds\n\n    /**\n     * Returns the value of this duration expressed as a [Long] number of milliseconds.\n     *\n     * The value is coerced to the range of [Long] type, if it doesn't fit in that range, see the conversion [Double.toLong] for details.\n     *\n     * The range of durations that can be expressed as a `Long` number of milliseconds is approximately ±292 million years.\n     */\n    @ExperimentalTime\n    @Deprecated(\"Use inWholeMilliseconds property instead.\", ReplaceWith(\"this.inWholeMilliseconds\"))\n    public fun toLongMilliseconds(): Long = inWholeMilliseconds\n\n    /**\n     * Returns a string representation of this duration value\n     * expressed as a combination of numeric components, each in its own unit.\n     *\n     * Each component is a number followed by the unit abbreviated name: `d`, `h`, `m`, `s`:\n     * `5h`, `1d 12h`, `1h 0m 30.340s`.\n     * The last component, usually seconds, can be a number with a fractional part.\n     *\n     * If the duration is less than a second, it is represented as a single number\n     * with one of sub-second units: `ms` (milliseconds), `us` (microseconds), or `ns` (nanoseconds):\n     * `140.884ms`, `500us`, `24ns`.\n     *\n     * A negative duration is prefixed with `-` sign and, if it consists of multiple components, surrounded with parentheses:\n     * `-12m` and `-(1h 30m)`.\n     *\n     * Special cases:\n     *  - an infinite duration is formatted as `\"Infinity\"` or `\"-Infinity\"` without a unit.\n     *\n     * It's recommended to use [toIsoString] that uses more strict ISO-8601 format instead of this `toString`\n     * when you want to convert a duration to a string in cases of serialization, interchange, etc.\n     *\n     * @sample samples.time.Durations.toStringDefault\n     */\n    override fun toString(): String = when (rawValue) {\n        0L -> \"0s\"\n        INFINITE.rawValue -> \"Infinity\"\n        NEG_INFINITE.rawValue -> \"-Infinity\"\n        else -> {\n            val isNegative = isNegative()\n            buildString {\n                if (isNegative) append('-')\n                absoluteValue.toComponents { days, hours, minutes, seconds, nanoseconds ->\n                    val hasDays = days != 0L\n                    val hasHours = hours != 0\n                    val hasMinutes = minutes != 0\n                    val hasSeconds = seconds != 0 || nanoseconds != 0\n                    var components = 0\n                    if (hasDays) {\n                        append(days).append('d')\n                        components++\n                    }\n                    if (hasHours || (hasDays && (hasMinutes || hasSeconds))) {\n                        if (components++ > 0) append(' ')\n                        append(hours).append('h')\n                    }\n                    if (hasMinutes || (hasSeconds && (hasHours || hasDays))) {\n                        if (components++ > 0) append(' ')\n                        append(minutes).append('m')\n                    }\n                    if (hasSeconds) {\n                        if (components++ > 0) append(' ')\n                        when {\n                            seconds != 0 || hasDays || hasHours || hasMinutes ->\n                                appendFractional(seconds, nanoseconds, 9, \"s\", isoZeroes = false)\n                            nanoseconds >= 1_000_000 ->\n                                appendFractional(nanoseconds / 1_000_000, nanoseconds % 1_000_000, 6, \"ms\", isoZeroes = false)\n                            nanoseconds >= 1_000 ->\n                                appendFractional(nanoseconds / 1_000, nanoseconds % 1_000, 3, \"us\", isoZeroes = false)\n                            else ->\n                                append(nanoseconds).append(\"ns\")\n                        }\n                    }\n                    if (isNegative && components > 1) insert(1, '(').append(')')\n                }\n            }\n        }\n    }\n\n    private fun StringBuilder.appendFractional(whole: Int, fractional: Int, fractionalSize: Int, unit: String, isoZeroes: Boolean) {\n        append(whole)\n        if (fractional != 0) {\n            append('.')\n            val fracString = fractional.toString().padStart(fractionalSize, '0')\n            val nonZeroDigits = fracString.indexOfLast { it != '0' } + 1\n            when {\n                !isoZeroes && nonZeroDigits < 3 -> appendRange(fracString, 0, nonZeroDigits)\n                else -> appendRange(fracString, 0, ((nonZeroDigits + 2) / 3) * 3)\n            }\n        }\n        append(unit)\n    }\n\n    /**\n     * Returns a string representation of this duration value expressed in the given [unit]\n     * and formatted with the specified [decimals] number of digits after decimal point.\n     *\n     * Special cases:\n     *  - an infinite duration is formatted as `\"Infinity\"` or `\"-Infinity\"` without a unit.\n     *\n     * @param decimals the number of digits after decimal point to show. The value must be non-negative.\n     * No more than 12 decimals will be shown, even if a larger number is requested.\n     *\n     * @return the value of duration in the specified [unit] followed by that unit abbreviated name: `d`, `h`, `m`, `s`, `ms`, `us`, or `ns`.\n     *\n     * @throws IllegalArgumentException if [decimals] is less than zero.\n     *\n     * @sample samples.time.Durations.toStringDecimals\n     */\n    public fun toString(unit: DurationUnit, decimals: Int = 0): String {\n        require(decimals >= 0) { \"decimals must be not negative, but was $decimals\" }\n        val number = toDouble(unit)\n        if (number.isInfinite()) return number.toString()\n        return formatToExactDecimals(number, decimals.coerceAtMost(12)) + unit.shortName()\n    }\n\n\n    /**\n     * Returns an ISO-8601 based string representation of this duration.\n     *\n     * The returned value is presented in the format `PThHmMs.fS`, where `h`, `m`, `s` are the integer components of this duration (see [toComponents])\n     * and `f` is a fractional part of second. Depending on the roundness of the value the fractional part can be formatted with either\n     * 0, 3, 6, or 9 decimal digits.\n     *\n     * The infinite duration is represented as `\"PT9999999999999H\"` which is larger than any possible finite duration in Kotlin.\n     *\n     * Negative durations are indicated with the sign `-` in the beginning of the returned string, for example, `\"-PT5M30S\"`.\n     *\n     * @sample samples.time.Durations.toIsoString\n     */\n    public fun toIsoString(): String = buildString {\n        if (isNegative()) append('-')\n        append(\"PT\")\n        this@Duration.absoluteValue.toComponents { hours, minutes, seconds, nanoseconds ->\n            @Suppress(\"NAME_SHADOWING\")\n            var hours = hours\n            if (isInfinite()) {\n                // use large enough value instead of Long.MAX_VALUE\n                hours = 9_999_999_999_999\n            }\n            val hasHours = hours != 0L\n            val hasSeconds = seconds != 0 || nanoseconds != 0\n            val hasMinutes = minutes != 0 || (hasSeconds && hasHours)\n            if (hasHours) {\n                append(hours).append('H')\n            }\n            if (hasMinutes) {\n                append(minutes).append('M')\n            }\n            if (hasSeconds || (!hasHours && !hasMinutes)) {\n                appendFractional(seconds, nanoseconds, 9, \"S\", isoZeroes = true)\n            }\n        }\n    }\n\n}\n\n// constructing from number of units\n// extension functions\n\n/** Returns a [Duration] equal to this [Int] number of the specified [unit]. */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\npublic fun Int.toDuration(unit: DurationUnit): Duration {\n    return if (unit <= DurationUnit.SECONDS) {\n        durationOfNanos(convertDurationUnitOverflow(this.toLong(), unit, DurationUnit.NANOSECONDS))\n    } else\n        toLong().toDuration(unit)\n}\n\n/** Returns a [Duration] equal to this [Long] number of the specified [unit]. */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\npublic fun Long.toDuration(unit: DurationUnit): Duration {\n    val maxNsInUnit = convertDurationUnitOverflow(MAX_NANOS, DurationUnit.NANOSECONDS, unit)\n    if (this in -maxNsInUnit..maxNsInUnit) {\n        return durationOfNanos(convertDurationUnitOverflow(this, unit, DurationUnit.NANOSECONDS))\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS)\n        return durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n}\n\n/**\n * Returns a [Duration] equal to this [Double] number of the specified [unit].\n *\n * Depending on its magnitude, the value is rounded to an integer number of nanoseconds or milliseconds.\n *\n * @throws IllegalArgumentException if this `Double` value is `NaN`.\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\npublic fun Double.toDuration(unit: DurationUnit): Duration {\n    val valueInNs = convertDurationUnit(this, unit, DurationUnit.NANOSECONDS)\n    require(!valueInNs.isNaN()) { \"Duration value cannot be NaN.\" }\n    val nanos = valueInNs.roundToLong()\n    return if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        val millis = convertDurationUnit(this, unit, DurationUnit.MILLISECONDS).roundToLong()\n        durationOfMillisNormalized(millis)\n    }\n}\n\n// constructing from number of units\n// deprecated extension properties\n\n/** Returns a [Duration] equal to this [Int] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of nanoseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of nanoseconds.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.nanoseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.nanoseconds\", \"kotlin.time.Duration.Companion.nanoseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.nanoseconds get() = toDuration(DurationUnit.NANOSECONDS)\n\n\n/** Returns a [Duration] equal to this [Int] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of microseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of microseconds.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.microseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.microseconds\", \"kotlin.time.Duration.Companion.microseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.microseconds get() = toDuration(DurationUnit.MICROSECONDS)\n\n\n/** Returns a [Duration] equal to this [Int] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of milliseconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of milliseconds.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.milliseconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.milliseconds\", \"kotlin.time.Duration.Companion.milliseconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.milliseconds get() = toDuration(DurationUnit.MILLISECONDS)\n\n\n/** Returns a [Duration] equal to this [Int] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/** Returns a [Duration] equal to this [Long] number of seconds. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.seconds get() = toDuration(DurationUnit.SECONDS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of seconds.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.seconds' extension property from Duration.Companion instead.\", ReplaceWith(\"this.seconds\", \"kotlin.time.Duration.Companion.seconds\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.seconds get() = toDuration(DurationUnit.SECONDS)\n\n\n/** Returns a [Duration] equal to this [Int] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"this.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/** Returns a [Duration] equal to this [Long] number of minutes. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"this.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.minutes get() = toDuration(DurationUnit.MINUTES)\n\n/**\n * Returns a [Duration] equal to this [Double] number of minutes.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.minutes' extension property from Duration.Companion instead.\", ReplaceWith(\"this.minutes\", \"kotlin.time.Duration.Companion.minutes\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.minutes get() = toDuration(DurationUnit.MINUTES)\n\n\n/** Returns a [Duration] equal to this [Int] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"this.hours\", \"kotlin.time.Duration.Companion.hours\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.hours get() = toDuration(DurationUnit.HOURS)\n\n/** Returns a [Duration] equal to this [Long] number of hours. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"this.hours\", \"kotlin.time.Duration.Companion.hours\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.hours get() = toDuration(DurationUnit.HOURS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of hours.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.hours' extension property from Duration.Companion instead.\", ReplaceWith(\"this.hours\", \"kotlin.time.Duration.Companion.hours\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.hours get() = toDuration(DurationUnit.HOURS)\n\n\n/** Returns a [Duration] equal to this [Int] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Int.days' extension property from Duration.Companion instead.\", ReplaceWith(\"this.days\", \"kotlin.time.Duration.Companion.days\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Int.days get() = toDuration(DurationUnit.DAYS)\n\n/** Returns a [Duration] equal to this [Long] number of days. */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Long.days' extension property from Duration.Companion instead.\", ReplaceWith(\"this.days\", \"kotlin.time.Duration.Companion.days\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Long.days get() = toDuration(DurationUnit.DAYS)\n\n/**\n * Returns a [Duration] equal to this [Double] number of days.\n *\n * @throws IllegalArgumentException if this [Double] value is `NaN`.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalTime\n@Deprecated(\"Use 'Double.days' extension property from Duration.Companion instead.\", ReplaceWith(\"this.days\", \"kotlin.time.Duration.Companion.days\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic val Double.days get() = toDuration(DurationUnit.DAYS)\n\n\n/** Returns a duration whose value is the specified [duration] value multiplied by this number. */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\n@kotlin.internal.InlineOnly\npublic inline operator fun Int.times(duration: Duration): Duration = duration * this\n\n/**\n * Returns a duration whose value is the specified [duration] value multiplied by this number.\n *\n * The operation may involve rounding when the result cannot be represented exactly with a [Double] number.\n *\n * @throws IllegalArgumentException if the operation results in a `NaN` value.\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\n@kotlin.internal.InlineOnly\npublic inline operator fun Double.times(duration: Duration): Duration = duration * this\n\n\n\nprivate fun parseDuration(value: String, strictIso: Boolean): Duration {\n    var length = value.length\n    if (length == 0) throw IllegalArgumentException(\"The string is empty\")\n    var index = 0\n    var result = Duration.ZERO\n    val infinityString = \"Infinity\"\n    when (value[index]) {\n        '+', '-' -> index++\n    }\n    val hasSign = index > 0\n    val isNegative = hasSign && value.startsWith('-')\n    when {\n        length <= index ->\n            throw IllegalArgumentException(\"No components\")\n        value[index] == 'P' -> {\n            if (++index == length) throw IllegalArgumentException()\n            val nonDigitSymbols = \"+-.\"\n            var isTimeComponent = false\n            var prevUnit: DurationUnit? = null\n            while (index < length) {\n                if (value[index] == 'T') {\n                    if (isTimeComponent || ++index == length) throw IllegalArgumentException()\n                    isTimeComponent = true\n                    continue\n                }\n                val component = value.substringWhile(index) { it in '0'..'9' || it in nonDigitSymbols }\n                if (component.isEmpty()) throw IllegalArgumentException()\n                index += component.length\n                val unitChar = value.getOrElse(index) { throw IllegalArgumentException(\"Missing unit for value $component\") }\n                index++\n                val unit = durationUnitByIsoChar(unitChar, isTimeComponent)\n                if (prevUnit != null && prevUnit <= unit) throw IllegalArgumentException(\"Unexpected order of duration components\")\n                prevUnit = unit\n                val dotIndex = component.indexOf('.')\n                if (unit == DurationUnit.SECONDS && dotIndex > 0) {\n                    val whole = component.substring(0, dotIndex)\n                    result += parseOverLongIsoComponent(whole).toDuration(unit)\n                    result += component.substring(dotIndex).toDouble().toDuration(unit)\n                } else {\n                    result += parseOverLongIsoComponent(component).toDuration(unit)\n                }\n            }\n        }\n        strictIso ->\n            throw IllegalArgumentException()\n        value.regionMatches(index, infinityString, 0, length = maxOf(length - index, infinityString.length), ignoreCase = true) -> {\n            result = Duration.INFINITE\n        }\n        else -> {\n            // parse default string format\n            var prevUnit: DurationUnit? = null\n            var afterFirst = false\n            var allowSpaces = !hasSign\n            if (hasSign && value[index] == '(' && value.last() == ')') {\n                allowSpaces = true\n                if (++index == --length) throw IllegalArgumentException(\"No components\")\n            }\n            while (index < length) {\n                if (afterFirst && allowSpaces) {\n                    index = value.skipWhile(index) { it == ' ' }\n                }\n                afterFirst = true\n                val component = value.substringWhile(index) { it in '0'..'9' || it == '.' }\n                if (component.isEmpty()) throw IllegalArgumentException()\n                index += component.length\n                val unitName = value.substringWhile(index) { it in 'a'..'z' }\n                index += unitName.length\n                val unit = durationUnitByShortName(unitName)\n                if (prevUnit != null && prevUnit <= unit) throw IllegalArgumentException(\"Unexpected order of duration components\")\n                prevUnit = unit\n                val dotIndex = component.indexOf('.')\n                if (dotIndex > 0) {\n                    val whole = component.substring(0, dotIndex)\n                    result += whole.toLong().toDuration(unit)\n                    result += component.substring(dotIndex).toDouble().toDuration(unit)\n                    if (index < length) throw IllegalArgumentException(\"Fractional component must be last\")\n                } else {\n                    result += component.toLong().toDuration(unit)\n                }\n            }\n        }\n    }\n    return if (isNegative) -result else result\n}\n\n\nprivate fun parseOverLongIsoComponent(value: String): Long {\n    val length = value.length\n    var startIndex = 0\n    if (length > 0 && value[0] in \"+-\") startIndex++\n    if ((length - startIndex) > 16 && (startIndex..value.lastIndex).all { value[it] in '0'..'9' }) {\n        // all chars are digits, but more than ceiling(log10(MAX_MILLIS / 1000)) of them\n        return if (value[0] == '-') Long.MIN_VALUE else Long.MAX_VALUE\n    }\n    // TODO: replace with just toLong after min JDK becomes 8\n    return if (value.startsWith(\"+\")) value.drop(1).toLong() else value.toLong()\n}\n\n\n\nprivate inline fun String.substringWhile(startIndex: Int, predicate: (Char) -> Boolean): String =\n    substring(startIndex, skipWhile(startIndex, predicate))\n\nprivate inline fun String.skipWhile(startIndex: Int, predicate: (Char) -> Boolean): Int {\n    var i = startIndex\n    while (i < length && predicate(this[i])) i++\n    return i\n}\n\n\n\n\n\n// The ranges are chosen so that they are:\n// - symmetric relative to zero: this greatly simplifies operations with sign, e.g. unaryMinus and minus.\n// - non-overlapping, but adjacent: the first value that doesn't fit in nanos range, can be exactly represented in millis.\n\ninternal const val NANOS_IN_MILLIS = 1_000_000\n// maximum number duration can store in nanosecond range\ninternal const val MAX_NANOS = Long.MAX_VALUE / 2 / NANOS_IN_MILLIS * NANOS_IN_MILLIS - 1 // ends in ..._999_999\n// maximum number duration can store in millisecond range, also encodes an infinite value\ninternal const val MAX_MILLIS = Long.MAX_VALUE / 2\n// MAX_NANOS expressed in milliseconds\nprivate const val MAX_NANOS_IN_MILLIS = MAX_NANOS / NANOS_IN_MILLIS\n\nprivate fun nanosToMillis(nanos: Long): Long = nanos / NANOS_IN_MILLIS\nprivate fun millisToNanos(millis: Long): Long = millis * NANOS_IN_MILLIS\n\nprivate fun durationOfNanos(normalNanos: Long) = Duration(normalNanos shl 1)\nprivate fun durationOfMillis(normalMillis: Long) = Duration((normalMillis shl 1) + 1)\nprivate fun durationOf(normalValue: Long, unitDiscriminator: Int) = Duration((normalValue shl 1) + unitDiscriminator)\nprivate fun durationOfNanosNormalized(nanos: Long) =\n    if (nanos in -MAX_NANOS..MAX_NANOS) {\n        durationOfNanos(nanos)\n    } else {\n        durationOfMillis(nanosToMillis(nanos))\n    }\n\nprivate fun durationOfMillisNormalized(millis: Long) =\n    if (millis in -MAX_NANOS_IN_MILLIS..MAX_NANOS_IN_MILLIS) {\n        durationOfNanos(millisToNanos(millis))\n    } else {\n        durationOfMillis(millis.coerceIn(-MAX_MILLIS, MAX_MILLIS))\n    }\n\ninternal expect val durationAssertionsEnabled: Boolean\n\ninternal expect fun formatToExactDecimals(value: Double, decimals: Int): String\ninternal expect fun formatUpToDecimals(value: Double, decimals: Int): String\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\nimport kotlin.random.Random\n\n/**\n * Given an [iterator] function constructs a [Sequence] that returns values through the [Iterator]\n * provided by that function.\n * The values are evaluated lazily, and the sequence is potentially infinite.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence(crossinline iterator: () -> Iterator<T>): Sequence<T> = object : Sequence<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * Creates a sequence that returns all elements from this iterator. The sequence is constrained to be iterated only once.\n *\n * @sample samples.collections.Sequences.Building.sequenceFromIterator\n */\npublic fun <T> Iterator<T>.asSequence(): Sequence<T> = Sequence { this }.constrainOnce()\n\n/**\n * Creates a sequence that returns the specified values.\n *\n * @sample samples.collections.Sequences.Building.sequenceOfValues\n */\npublic fun <T> sequenceOf(vararg elements: T): Sequence<T> = if (elements.isEmpty()) emptySequence() else elements.asSequence()\n\n/**\n * Returns an empty sequence.\n */\npublic fun <T> emptySequence(): Sequence<T> = EmptySequence\n\nprivate object EmptySequence : Sequence<Nothing>, DropTakeSequence<Nothing> {\n    override fun iterator(): Iterator<Nothing> = EmptyIterator\n    override fun drop(n: Int) = EmptySequence\n    override fun take(n: Int) = EmptySequence\n}\n\n/**\n * Returns this sequence if it's not `null` and the empty sequence otherwise.\n * @sample samples.collections.Sequences.Usage.sequenceOrEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>?.orEmpty(): Sequence<T> = this ?: emptySequence()\n\n\n/**\n * Returns a sequence that iterates through the elements either of this sequence\n * or, if this sequence turns out to be empty, of the sequence returned by [defaultValue] function.\n *\n * @sample samples.collections.Sequences.Usage.sequenceIfEmpty\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Sequence<T>.ifEmpty(defaultValue: () -> Sequence<T>): Sequence<T> = sequence {\n    val iterator = this@ifEmpty.iterator()\n    if (iterator.hasNext()) {\n        yieldAll(iterator)\n    } else {\n        yieldAll(defaultValue())\n    }\n}\n\n/**\n * Returns a sequence of all elements from all sequences in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfSequences\n */\npublic fun <T> Sequence<Sequence<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\n/**\n * Returns a sequence of all elements from all iterables in this sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * @sample samples.collections.Sequences.Transformations.flattenSequenceOfLists\n */\n@kotlin.jvm.JvmName(\"flattenSequenceOfIterable\")\npublic fun <T> Sequence<Iterable<T>>.flatten(): Sequence<T> = flatten { it.iterator() }\n\nprivate fun <T, R> Sequence<T>.flatten(iterator: (T) -> Iterator<R>): Sequence<R> {\n    if (this is TransformingSequence<*, *>) {\n        return (this as TransformingSequence<*, T>).flatten(iterator)\n    }\n    return FlatteningSequence(this, { it }, iterator)\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this sequence,\n * *second* list is built from the second values of each pair from this sequence.\n *\n * The operation is _terminal_.\n *\n * @sample samples.collections.Sequences.Transformations.unzip\n */\npublic fun <T, R> Sequence<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val listT = ArrayList<T>()\n    val listR = ArrayList<R>()\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(): Sequence<T> = shuffled(Random)\n\n/**\n * Returns a sequence that yields elements of this sequence randomly shuffled\n * using the specified [random] instance as the source of randomness.\n *\n * Note that every iteration of the sequence returns elements in a different order.\n *\n * The operation is _intermediate_ and _stateful_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.shuffled(random: Random): Sequence<T> = sequence<T> {\n    val buffer = toMutableList()\n    while (buffer.isNotEmpty()) {\n        val j = random.nextInt(buffer.size)\n        val last = buffer.removeLast()\n        val value = if (j < buffer.size) buffer.set(j, last) else last\n        yield(value)\n    }\n}\n\n\n/**\n * A sequence that returns the values from the underlying [sequence] that either match or do not match\n * the specified [predicate].\n *\n * @param sendWhen If `true`, values for which the predicate returns `true` are returned. Otherwise,\n * values for which the predicate returns `false` are returned\n */\ninternal class FilteringSequence<T>(\n    private val sequence: Sequence<T>,\n    private val sendWhen: Boolean = true,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item) == sendWhen) {\n                    nextItem = item\n                    nextState = 1\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem\n            nextItem = null\n            nextState = -1\n            @Suppress(\"UNCHECKED_CAST\")\n            return result as T\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence].\n */\n\ninternal class TransformingSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        override fun next(): R {\n            return transformer(iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n\n    internal fun <E> flatten(iterator: (R) -> Iterator<E>): Sequence<E> {\n        return FlatteningSequence<T, R, E>(sequence, transformer, iterator)\n    }\n}\n\n/**\n * A sequence which returns the results of applying the given [transformer] function to the values\n * in the underlying [sequence], where the transformer function takes the index of the value in the underlying\n * sequence along with the value itself.\n */\ninternal class TransformingIndexedSequence<T, R>\nconstructor(private val sequence: Sequence<T>, private val transformer: (Int, T) -> R) : Sequence<R> {\n    override fun iterator(): Iterator<R> = object : Iterator<R> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): R {\n            return transformer(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which combines values from the underlying [sequence] with their indices and returns them as\n * [IndexedValue] objects.\n */\ninternal class IndexingSequence<T>\nconstructor(private val sequence: Sequence<T>) : Sequence<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = object : Iterator<IndexedValue<T>> {\n        val iterator = sequence.iterator()\n        var index = 0\n        override fun next(): IndexedValue<T> {\n            return IndexedValue(checkIndexOverflow(index++), iterator.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence which takes the values from two parallel underlying sequences, passes them to the given\n * [transform] function and returns the values returned by that function. The sequence stops returning\n * values as soon as one of the underlying sequences stops returning values.\n */\ninternal class MergingSequence<T1, T2, V>\nconstructor(\n    private val sequence1: Sequence<T1>,\n    private val sequence2: Sequence<T2>,\n    private val transform: (T1, T2) -> V\n) : Sequence<V> {\n    override fun iterator(): Iterator<V> = object : Iterator<V> {\n        val iterator1 = sequence1.iterator()\n        val iterator2 = sequence2.iterator()\n        override fun next(): V {\n            return transform(iterator1.next(), iterator2.next())\n        }\n\n        override fun hasNext(): Boolean {\n            return iterator1.hasNext() && iterator2.hasNext()\n        }\n    }\n}\n\ninternal class FlatteningSequence<T, R, E>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val transformer: (T) -> R,\n    private val iterator: (R) -> Iterator<E>\n) : Sequence<E> {\n    override fun iterator(): Iterator<E> = object : Iterator<E> {\n        val iterator = sequence.iterator()\n        var itemIterator: Iterator<E>? = null\n\n        override fun next(): E {\n            if (!ensureItemIterator())\n                throw NoSuchElementException()\n            return itemIterator!!.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return ensureItemIterator()\n        }\n\n        private fun ensureItemIterator(): Boolean {\n            if (itemIterator?.hasNext() == false)\n                itemIterator = null\n\n            while (itemIterator == null) {\n                if (!iterator.hasNext()) {\n                    return false\n                } else {\n                    val element = iterator.next()\n                    val nextItemIterator = iterator(transformer(element))\n                    if (nextItemIterator.hasNext()) {\n                        itemIterator = nextItemIterator\n                        return true\n                    }\n                }\n            }\n            return true\n        }\n    }\n}\n\ninternal fun <T, C, R> flatMapIndexed(source: Sequence<T>, transform: (Int, T) -> C, iterator: (C) -> Iterator<R>): Sequence<R> =\n    sequence {\n        var index = 0\n        for (element in source) {\n            val result = transform(checkIndexOverflow(index++), element)\n            yieldAll(iterator(result))\n        }\n    }\n\n/**\n * A sequence that supports drop(n) and take(n) operations\n */\ninternal interface DropTakeSequence<T> : Sequence<T> {\n    fun drop(n: Int): Sequence<T>\n    fun take(n: Int): Sequence<T>\n}\n\n/**\n * A sequence that skips [startIndex] values from the underlying [sequence]\n * and stops returning values right before [endIndex], i.e. stops at `endIndex - 1`\n */\ninternal class SubSequence<T>(\n    private val sequence: Sequence<T>,\n    private val startIndex: Int,\n    private val endIndex: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(startIndex >= 0) { \"startIndex should be non-negative, but is $startIndex\" }\n        require(endIndex >= 0) { \"endIndex should be non-negative, but is $endIndex\" }\n        require(endIndex >= startIndex) { \"endIndex should be not less than startIndex, but was $endIndex < $startIndex\" }\n    }\n\n    private val count: Int get() = endIndex - startIndex\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, startIndex + n, endIndex)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else SubSequence(sequence, startIndex, startIndex + n)\n\n    override fun iterator() = object : Iterator<T> {\n\n        val iterator = sequence.iterator()\n        var position = 0\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (position < startIndex && iterator.hasNext()) {\n                iterator.next()\n                position++\n            }\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return (position < endIndex) && iterator.hasNext()\n        }\n\n        override fun next(): T {\n            drop()\n            if (position >= endIndex)\n                throw NoSuchElementException()\n            position++\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * A sequence that returns at most [count] values from the underlying [sequence], and stops returning values\n * as soon as that count is reached.\n */\ninternal class TakeSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = if (n >= count) emptySequence() else SubSequence(sequence, n, count)\n    override fun take(n: Int): Sequence<T> = if (n >= count) this else TakeSequence(sequence, n)\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var left = count\n        val iterator = sequence.iterator()\n\n        override fun next(): T {\n            if (left == 0)\n                throw NoSuchElementException()\n            left--\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            return left > 0 && iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that returns values from the underlying [sequence] while the [predicate] function returns\n * `true`, and stops returning values once the function returns `false` for the next element.\n */\ninternal class TakeWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var nextItem: T? = null\n\n        private fun calcNext() {\n            if (iterator.hasNext()) {\n                val item = iterator.next()\n                if (predicate(item)) {\n                    nextState = 1\n                    nextItem = item\n                    return\n                }\n            }\n            nextState = 0\n        }\n\n        override fun next(): T {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            if (nextState == 0)\n                throw NoSuchElementException()\n            @Suppress(\"UNCHECKED_CAST\")\n            val result = nextItem as T\n\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext() // will change nextState\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * A sequence that skips the specified number of values from the underlying [sequence] and returns\n * all values after that.\n */\ninternal class DropSequence<T>(\n    private val sequence: Sequence<T>,\n    private val count: Int\n) : Sequence<T>, DropTakeSequence<T> {\n    init {\n        require(count >= 0) { \"count must be non-negative, but was $count.\" }\n    }\n\n    override fun drop(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) DropSequence(this, n) else DropSequence(sequence, n1) }\n    override fun take(n: Int): Sequence<T> = (count + n).let { n1 -> if (n1 < 0) TakeSequence(this, n) else SubSequence(sequence, count, n1) }\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var left = count\n\n        // Shouldn't be called from constructor to avoid premature iteration\n        private fun drop() {\n            while (left > 0 && iterator.hasNext()) {\n                iterator.next()\n                left--\n            }\n        }\n\n        override fun next(): T {\n            drop()\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            drop()\n            return iterator.hasNext()\n        }\n    }\n}\n\n/**\n * A sequence that skips the values from the underlying [sequence] while the given [predicate] returns `true` and returns\n * all values after that.\n */\ninternal class DropWhileSequence<T>\nconstructor(\n    private val sequence: Sequence<T>,\n    private val predicate: (T) -> Boolean\n) : Sequence<T> {\n\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        val iterator = sequence.iterator()\n        var dropState: Int = -1 // -1 for not dropping, 1 for nextItem, 0 for normal iteration\n        var nextItem: T? = null\n\n        private fun drop() {\n            while (iterator.hasNext()) {\n                val item = iterator.next()\n                if (!predicate(item)) {\n                    nextItem = item\n                    dropState = 1\n                    return\n                }\n            }\n            dropState = 0\n        }\n\n        override fun next(): T {\n            if (dropState == -1)\n                drop()\n\n            if (dropState == 1) {\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextItem as T\n                nextItem = null\n                dropState = 0\n                return result\n            }\n            return iterator.next()\n        }\n\n        override fun hasNext(): Boolean {\n            if (dropState == -1)\n                drop()\n            return dropState == 1 || iterator.hasNext()\n        }\n    }\n}\n\ninternal class DistinctSequence<T, K>(private val source: Sequence<T>, private val keySelector: (T) -> K) : Sequence<T> {\n    override fun iterator(): Iterator<T> = DistinctIterator(source.iterator(), keySelector)\n}\n\nprivate class DistinctIterator<T, K>(private val source: Iterator<T>, private val keySelector: (T) -> K) : AbstractIterator<T>() {\n    private val observed = HashSet<K>()\n\n    override fun computeNext() {\n        while (source.hasNext()) {\n            val next = source.next()\n            val key = keySelector(next)\n\n            if (observed.add(key)) {\n                setNext(next)\n                return\n            }\n        }\n\n        done()\n    }\n}\n\n\nprivate class GeneratorSequence<T : Any>(private val getInitialValue: () -> T?, private val getNextValue: (T) -> T?) : Sequence<T> {\n    override fun iterator(): Iterator<T> = object : Iterator<T> {\n        var nextItem: T? = null\n        var nextState: Int = -2 // -2 for initial unknown, -1 for next unknown, 0 for done, 1 for continue\n\n        private fun calcNext() {\n            nextItem = if (nextState == -2) getInitialValue() else getNextValue(nextItem!!)\n            nextState = if (nextItem == null) 0 else 1\n        }\n\n        override fun next(): T {\n            if (nextState < 0)\n                calcNext()\n\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as T\n            // Do not clean nextItem (to avoid keeping reference on yielded instance) -- need to keep state for getNextValue\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState < 0)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a wrapper sequence that provides values of this sequence, but ensures it can be iterated only one time.\n *\n * The operation is _intermediate_ and _stateless_.\n *\n * [IllegalStateException] is thrown on iterating the returned sequence for the second time and the following times.\n *\n */\npublic fun <T> Sequence<T>.constrainOnce(): Sequence<T> {\n    // as? does not work in js\n    //return this as? ConstrainedOnceSequence<T> ?: ConstrainedOnceSequence(this)\n    return if (this is ConstrainedOnceSequence<T>) this else ConstrainedOnceSequence(this)\n}\n\n\n/**\n * Returns a sequence which invokes the function to calculate the next value on each iteration until the function returns `null`.\n *\n * The returned sequence is constrained to be iterated only once.\n *\n * @see constrainOnce\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequence\n */\npublic fun <T : Any> generateSequence(nextFunction: () -> T?): Sequence<T> {\n    return GeneratorSequence(nextFunction, { nextFunction() }).constrainOnce()\n}\n\n/**\n * Returns a sequence defined by the starting value [seed] and the function [nextFunction],\n * which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seed] is `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times, each time starting with [seed].\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithSeed\n */\n@kotlin.internal.LowPriorityInOverloadResolution\npublic fun <T : Any> generateSequence(seed: T?, nextFunction: (T) -> T?): Sequence<T> =\n    if (seed == null)\n        EmptySequence\n    else\n        GeneratorSequence({ seed }, nextFunction)\n\n/**\n * Returns a sequence defined by the function [seedFunction], which is invoked to produce the starting value,\n * and the [nextFunction], which is invoked to calculate the next value based on the previous one on each iteration.\n *\n * The sequence produces values until it encounters first `null` value.\n * If [seedFunction] returns `null`, an empty sequence is produced.\n *\n * The sequence can be iterated multiple times.\n *\n * @see kotlin.sequences.sequence\n *\n * @sample samples.collections.Sequences.Building.generateSequenceWithLazySeed\n */\npublic fun <T : Any> generateSequence(seedFunction: () -> T?, nextFunction: (T) -> T?): Sequence<T> =\n    GeneratorSequence(seedFunction, nextFunction)\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns 1st *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 1.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 2.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 3.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 4.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the list.\n * \n * Throws an [IndexOutOfBoundsException] if the size of this list is less than 5.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element.\n * \n * @throws NoSuchElementException if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the collection was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this collection in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Iterable<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * \n * @throws NoSuchElementException if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this collection, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.randomOrNull(): T? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness, or `null` if this collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> Collection<T>.randomOrNull(random: Random): T? {\n    if (isEmpty())\n        return null\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count >= n) list.add(item) else ++count\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        list.add(item)\n        if (++count == n)\n            break\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Randomly shuffles elements in this list in-place using the specified [random] instance as the source of randomness.\n * \n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> MutableList<T>.shuffle(random: Random): Unit {\n    for (i in lastIndex downTo 1) {\n        val j = random.nextInt(i + 1)\n        this[j] = this.set(i, this[j])\n    }\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequence\")\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Sequence<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapSequenceTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each element of the original collection\n * into an [IndexedValue] containing the index of that element and the element itself.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * Among equal elements of the given collection, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given collection with equal keys, only the first one will be present in the resulting list.\n * The elements in the resulting list are in the same order as they were in the source collection.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this collection and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n * \n * To get a set containing all elements that are contained at least in one of these collections use [union].\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n * \n * To get a set containing all elements that are contained in both collections use [intersect].\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns the specified [initial] value if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns the specified [initial] value if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Double>.max(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Float>.max(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Iterable<T>.max(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Double>.min(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Iterable<Float>.min(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Iterable<T>.min(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the collection is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection.\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the collection or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Iterable<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic fun Iterable<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Iterable<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the collection is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Iterable<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element,\n * and returns the collection itself afterwards.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, C : Iterable<T>> C.onEachIndexed(action: (index: Int, T) -> Unit): C {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Throws an exception if this collection is empty. If the collection can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the collection is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Throws an exception if this list is empty. If the list can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes the index of an element, the element itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> List<T>.reduceRightIndexedOrNull(operation: (index: Int, T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last element and applying [operation] from right to left\n * to each element and current accumulator value.\n * \n * Returns `null` if the list is empty.\n * \n * @param [operation] function that takes an element and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> List<T>.reduceRightOrNull(operation: (T, acc: S) -> S): S? {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        return null\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFold(initial: R, operation: (acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R> Iterable<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    val estimatedSize = collectionSizeOrDefault(9)\n    if (estimatedSize == 0) return listOf(initial)\n    val result = ArrayList<R>(estimatedSize + 1).apply { add(initial) }\n    var index = 0\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(index++, accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Iterable<T>.runningReduce(operation: (acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with the first element of this collection.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Iterable<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): List<S> {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return emptyList()\n    var accumulator: S = iterator.next()\n    val result = ArrayList<S>(collectionSizeOrDefault(10)).apply { add(accumulator) }\n    var index = 1\n    while (iterator.hasNext()) {\n        accumulator = operation(index++, accumulator, iterator.next())\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scan(initial: R, operation: (acc: R, T) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original collection and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <T, R> Iterable<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * Before Kotlin 1.6, the [elements] array may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.convertToSetForSetOperation()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * Before Kotlin 1.6, the [elements] collection may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * Before Kotlin 1.6, the [elements] sequence may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.convertToSetForSetOperation()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n * \n * @sample samples.collections.Iterables.Operations.partition\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<List<T>>(resultCapacity)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n        val result = ArrayList<R>(resultCapacity)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index in 0 until thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (!partialWindows && windowSize < size) break\n            window.move(index, index + windowSize)\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n/**\n * Given an [iterator] function constructs an [Iterable] instance that returns values through the [Iterator]\n * provided by that function.\n * @sample samples.collections.Iterables.Building.iterable\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable(crossinline iterator: () -> Iterator<T>): Iterable<T> = object : Iterable<T> {\n    override fun iterator(): Iterator<T> = iterator()\n}\n\n/**\n * A wrapper over another [Iterable] (or any other object that can produce an [Iterator]) that returns\n * an indexing iterator.\n */\ninternal class IndexingIterable<out T>(private val iteratorFactory: () -> Iterator<T>) : Iterable<IndexedValue<T>> {\n    override fun iterator(): Iterator<IndexedValue<T>> = IndexingIterator(iteratorFactory())\n}\n\n\n/**\n * Returns the size of this iterable if it is known, or `null` otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrNull(): Int? = if (this is Collection<*>) this.size else null\n\n/**\n * Returns the size of this iterable if it is known, or the specified [default] value otherwise.\n */\n@PublishedApi\ninternal fun <T> Iterable<T>.collectionSizeOrDefault(default: Int): Int = if (this is Collection<*>) this.size else default\n\n\n/**\n * Returns a single list of all elements from all collections in the given collection.\n * @sample samples.collections.Iterables.Operations.flattenIterable\n */\npublic fun <T> Iterable<Iterable<T>>.flatten(): List<T> {\n    val result = ArrayList<T>()\n    for (element in this) {\n        result.addAll(element)\n    }\n    return result\n}\n\n/**\n * Returns a pair of lists, where\n * *first* list is built from the first values of each pair from this collection,\n * *second* list is built from the second values of each pair from this collection.\n * @sample samples.collections.Iterables.Operations.unzipIterable\n */\npublic fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>> {\n    val expectedSize = collectionSizeOrDefault(10)\n    val listT = ArrayList<T>(expectedSize)\n    val listR = ArrayList<R>(expectedSize)\n    for (pair in this) {\n        listT.add(pair.first)\n        listR.add(pair.second)\n    }\n    return listT to listR\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n\npackage kotlin.sequences\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns `true` if [element] is found in the sequence.\n *\n * The operation is _terminal_.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.contains(element: T): Boolean {\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Sequence<T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Sequence doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Sequence<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Sequence<T>.elementAtOrNull(index: Int): T? {\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\npublic fun <T> Sequence<T>.first(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOf(transform: (T) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to elements of this sequence in iteration order,\n * or `null` if no non-null value was produced.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Any> Sequence<T>.firstNotNullOfOrNull(transform: (T) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.firstOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    return iterator.next()\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns first index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.indexOf(element: T): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the sequence does not contain such element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.last(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if no such element is found.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns last index of [element], or -1 if the sequence does not contain element.\n *\n * The operation is _terminal_.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Sequence<T>.lastIndexOf(element: T): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns the last element, or `null` if the sequence is empty.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic fun <T> Sequence<T>.lastOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    var last = iterator.next()\n    while (iterator.hasNext())\n        last = iterator.next()\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Elements.last\n */\npublic inline fun <T> Sequence<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the single element, or throws an exception if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.single(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        throw NoSuchElementException(\"Sequence is empty.\")\n    val single = iterator.next()\n    if (iterator.hasNext())\n        throw IllegalArgumentException(\"Sequence has more than one element.\")\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Sequence contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the sequence is empty or has more than one element.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.singleOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext())\n        return null\n    val single = iterator.next()\n    if (iterator.hasNext())\n        return null\n    return single\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a sequence containing all elements except first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.drop(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> this\n        this is DropTakeSequence -> this.drop(n)\n        else -> DropSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing all elements except first elements that satisfy the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Sequence<T>.dropWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return DropWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filter(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, true, predicate)\n}\n\n/**\n * Returns a sequence containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic fun <T> Sequence<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): Sequence<T> {\n    // TODO: Rewrite with generalized MapFilterIndexingSequence\n    return TransformingSequence(FilteringSequence(IndexingSequence(this), true, { predicate(it.index, it.value) }), { it.value })\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements that are instances of specified type parameter R.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstance\n */\npublic inline fun <reified R> Sequence<*>.filterIsInstance(): Sequence<@kotlin.internal.NoInfer R> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filter { it is R } as Sequence<R>\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterIsInstanceTo\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Sequence<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing all elements not matching the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filter\n */\npublic fun <T> Sequence<T>.filterNot(predicate: (T) -> Boolean): Sequence<T> {\n    return FilteringSequence(this, false, predicate)\n}\n\n/**\n * Returns a sequence containing all elements that are not `null`.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNull\n */\npublic fun <T : Any> Sequence<T?>.filterNotNull(): Sequence<T> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return filterNot { it == null } as Sequence<T>\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterNotNullTo\n */\npublic fun <C : MutableCollection<in T>, T : Any> Sequence<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <T, C : MutableCollection<in T>> Sequence<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a sequence containing first [n] elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.take(n: Int): Sequence<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return when {\n        n == 0 -> emptySequence()\n        this is DropTakeSequence -> this.take(n)\n        else -> TakeSequence(this, n)\n    }\n}\n\n/**\n * Returns a sequence containing first elements satisfying the given [predicate].\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Sequence<T>.takeWhile(predicate: (T) -> Boolean): Sequence<T> {\n    return TakeWhileSequence(this, predicate)\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sorted(): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sorted.toMutableList()\n            sortedList.sort()\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Sorting.sortedBy\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedBy(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic inline fun <T, R : Comparable<R>> Sequence<T>.sortedByDescending(crossinline selector: (T) -> R?): Sequence<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T : Comparable<T>> Sequence<T>.sortedDescending(): Sequence<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a sequence that yields elements of this sequence sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic fun <T> Sequence<T>.sortedWith(comparator: Comparator<in T>): Sequence<T> {\n    return object : Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val sortedList = this@sortedWith.toMutableList()\n            sortedList.sortWith(comparator)\n            return sortedList.iterator()\n        }\n    }\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associate\n */\npublic inline fun <T, K, V> Sequence<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    return associateTo(LinkedHashMap<K, V>(), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given sequence indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateBy\n */\npublic inline fun <T, K> Sequence<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    return associateByTo(LinkedHashMap<K, T>(), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByWithValueTransform\n */\npublic inline fun <T, K, V> Sequence<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    return associateByTo(LinkedHashMap<K, V>(), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given sequence\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByTo\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given sequence.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateByToWithValueTransform\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateTo\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Sequence<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given sequence and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Sequence<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>()\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given sequence,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Sequence<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n *\n * The operation is _terminal_.\n */\npublic fun <T, C : MutableCollection<in T>> Sequence<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>())\n}\n\n/**\n * Returns a [List] containing all elements.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toList(): List<T> {\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a new [MutableList] filled with all elements of this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableList(): MutableList<T> {\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toSet(): Set<T> {\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterable\")\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Iterable<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements from results of [transform] function being invoked on each element of original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic fun <T, R> Sequence<T>.flatMap(transform: (T) -> Sequence<R>): Sequence<R> {\n    return FlatteningSequence(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Iterable<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Iterable<R>::iterator)\n}\n\n/**\n * Returns a single sequence of all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequence\")\npublic fun <T, R> Sequence<T>.flatMapIndexed(transform: (index: Int, T) -> Sequence<R>): Sequence<R> {\n    return flatMapIndexed(this, transform, Sequence<R>::iterator)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element\n * and its index in the original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedSequenceTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapIndexedTo(destination: C, transform: (index: Int, T) -> Sequence<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(checkIndexOverflow(index++), element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIterableTo\")\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original sequence, to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.flatMapTo(destination: C, transform: (T) -> Sequence<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Sequence<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original sequence.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Sequence<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original sequence by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original sequence\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Sequence<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Sequence<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.map\n */\npublic fun <T, R> Sequence<T>.map(transform: (T) -> R): Sequence<R> {\n    return TransformingSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R> Sequence<T>.mapIndexed(transform: (index: Int, T) -> R): Sequence<R> {\n    return TransformingIndexedSequence(this, transform)\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original sequence.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T, R : Any> Sequence<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): Sequence<R> {\n    return TransformingIndexedSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a sequence containing only the non-null results of applying the given [transform] function\n * to each element in the original sequence.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic fun <T, R : Any> Sequence<T>.mapNotNull(transform: (T) -> R?): Sequence<R> {\n    return TransformingSequence(this, transform).filterNotNull()\n}\n\n/**\n * Applies the given [transform] function to each element in the original sequence\n * and appends only the non-null results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Sequence<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original sequence\n * and appends the results to the given [destination].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Sequence<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a sequence that wraps each element of the original sequence\n * into an [IndexedValue] containing the index of that element and the element itself.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T> Sequence<T>.withIndex(): Sequence<IndexedValue<T>> {\n    return IndexingSequence(this)\n}\n\n/**\n * Returns a sequence containing only distinct elements from the given sequence.\n * \n * Among equal elements of the given sequence, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T> Sequence<T>.distinct(): Sequence<T> {\n    return this.distinctBy { it }\n}\n\n/**\n * Returns a sequence containing only elements from the given sequence\n * having distinct keys returned by the given [selector] function.\n * \n * Among elements of the given sequence with equal keys, only the first one will be present in the resulting sequence.\n * The elements in the resulting sequence are in the same order as they were in the source sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.distinctAndDistinctBy\n */\npublic fun <T, K> Sequence<T>.distinctBy(selector: (T) -> K): Sequence<T> {\n    return DistinctSequence(this, selector)\n}\n\n/**\n * Returns a new [MutableSet] containing all distinct elements from the given sequence.\n * \n * The returned set preserves the element iteration order of the original sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.toMutableSet(): MutableSet<T> {\n    val set = LinkedHashSet<T>()\n    for (item in this) set.add(item)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Sequence<T>.all(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if sequence has at least one element.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Sequence<T>.any(): Boolean {\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Sequence<T>.any(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this sequence.\n *\n * The operation is _terminal_.\n */\npublic fun <T> Sequence<T>.count(): Int {\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.count(predicate: (T) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns the specified [initial] value if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T, R> Sequence<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _terminal_.\n */\npublic inline fun <T> Sequence<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Sequence<Double>.max(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Sequence<Float>.max(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Sequence<T>.max(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    if (!iterator.hasNext()) return maxElem\n    var maxValue = selector(maxElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    } while (iterator.hasNext())\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.maxOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.maxOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.maxOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.maxOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.maxOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        max = maxOf(max, e)\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.maxOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Sequence<T>.maxWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.maxWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Sequence<Double>.min(): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun Sequence<Float>.min(): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T : Comparable<T>> Sequence<T>.min(): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minBy(selector: (T) -> R): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minByOrNull(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    if (!iterator.hasNext()) return minElem\n    var minValue = selector(minElem)\n    do {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    } while (iterator.hasNext())\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Double): Double {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOf(selector: (T) -> Float): Float {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence.\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOf(selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Double): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minOfOrNull(selector: (T) -> Float): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R : Comparable<R>> Sequence<T>.minOfOrNull(selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence.\n * \n * @throws NoSuchElementException if the sequence is empty.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWith(comparator: Comparator<in R>, selector: (T) -> R): R {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each element in the sequence or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> Sequence<T>.minOfWithOrNull(comparator: Comparator<in R>, selector: (T) -> R): R? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minValue = selector(iterator.next())\n    while (iterator.hasNext()) {\n        val v = selector(iterator.next())\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Double>.minOrNull(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun Sequence<Float>.minOrNull(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        min = minOf(min, e)\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T : Comparable<T>> Sequence<T>.minOrNull(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator].\n *\n * The operation is _terminal_.\n * \n * @throws NoSuchElementException if the sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun <T> Sequence<T>.minWith(comparator: Comparator<in T>): T {\n    val iterator = iterator()\n    if (!iterator.hasNext()) throw NoSuchElementException()\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.minWithOrNull(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the sequence has no elements.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Sequence<T>.none(): Boolean {\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Sequence<T>.none(predicate: (T) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.1\")\npublic fun <T> Sequence<T>.onEach(action: (T) -> Unit): Sequence<T> {\n    return map {\n        action(it)\n        it\n    }\n}\n\n/**\n * Returns a sequence which performs the given [action] on each element of the original sequence as they pass through it.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the action on the element.\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@SinceKotlin(\"1.4\")\npublic fun <T> Sequence<T>.onEachIndexed(action: (index: Int, T) -> Unit): Sequence<T> {\n    return mapIndexed { index, element ->\n        action(index, element)\n        element\n    }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Throws an exception if this sequence is empty. If the sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun <S, T : S> Sequence<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty sequence can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original sequence.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes the index of an element, current accumulator value and the element itself,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S, T : S> Sequence<T>.reduceIndexedOrNull(operation: (index: Int, acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element.\n * \n * Returns `null` if the sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and an element,\n * and calculates the next accumulator value.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <S, T : S> Sequence<T>.reduceOrNull(operation: (acc: S, T) -> S): S? {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) return null\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFold(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var accumulator = initial\n        for (element in this@runningFold) {\n            accumulator = operation(accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic fun <T, R> Sequence<T>.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return sequence {\n        yield(initial)\n        var index = 0\n        var accumulator = initial\n        for (element in this@runningFoldIndexed) {\n            accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n            yield(accumulator)\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes current accumulator value and the element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <S, T : S> Sequence<T>.runningReduce(operation: (acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            while (iterator.hasNext()) {\n                accumulator = operation(accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with the first element of this sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic fun <S, T : S> Sequence<T>.runningReduceIndexed(operation: (index: Int, acc: S, T) -> S): Sequence<S> {\n    return sequence {\n        val iterator = iterator()\n        if (iterator.hasNext()) {\n            var accumulator: S = iterator.next()\n            yield(accumulator)\n            var index = 1\n            while (iterator.hasNext()) {\n                accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n                yield(accumulator)\n            }\n        }\n    }\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes current accumulator value and an element, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scan(initial: R, operation: (acc: R, T) -> R): Sequence<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a sequence containing successive accumulation values generated by applying [operation] from left to right\n * to each element, its index in the original sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting sequence.\n * The [initial] value should also be immutable (or should not be mutated)\n * as it may be passed to [operation] function later because of sequence's lazy nature.\n * \n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T, R> Sequence<T>.scanIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): Sequence<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun <T> Sequence<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the sequence.\n *\n * The operation is _terminal_.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.sumOf(selector: (T) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic fun <T : Any> Sequence<T?>.requireNoNulls(): Sequence<T> {\n    return map { it ?: throw IllegalArgumentException(\"null element found in $this.\") }\n}\n\n/**\n * Splits this sequence into a sequence of lists each not exceeding the given [size].\n * \n * The last list in the resulting sequence may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.chunked(size: Int): Sequence<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this sequence into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have fewer elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this sequence.\n *\n * The operation is _intermediate_ and _stateful_.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.chunked(size: Int, transform: (List<T>) -> R): Sequence<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.minus(element: T): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            var removed = false\n            return this@minus.filter { if (!removed && it == element) { removed = true; false } else true }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] array.\n * \n * Note that the source sequence and the array being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * Before Kotlin 1.6, the [elements] array may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Array<out T>): Sequence<T> {\n    if (elements.isEmpty()) return this\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] collection.\n * \n * Note that the source sequence and the collection being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * Before Kotlin 1.6, the [elements] collection may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n *\n * The operation is _intermediate_ and _stateful_.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Iterable<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of original sequence except the elements contained in the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being subtracted are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n * \n * The operation is _intermediate_ for this sequence and _terminal_ and _stateful_ for the [elements] sequence.\n * \n * Before Kotlin 1.6, the [elements] sequence may have been converted to a [HashSet] to speed up the operation, thus the elements were required to have\n * a correct and stable implementation of `hashCode()` that didn't change between successive invocations.\n * On JVM, you can enable this behavior back with the system property `kotlin.collections.convert_arg_to_set_in_removeAll` set to `true`.\n */\npublic operator fun <T> Sequence<T>.minus(elements: Sequence<T>): Sequence<T> {\n    return object: Sequence<T> {\n        override fun iterator(): Iterator<T> {\n            val other = elements.convertToSetForSetOperation()\n            if (other.isEmpty())\n                return this@minus.iterator()\n            else\n                return this@minus.filterNot { it in other }.iterator()\n        }\n    }\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence without the first occurrence of the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.minusElement(element: T): Sequence<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original sequence into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Sequences.Transformations.partition\n */\npublic inline fun <T> Sequence<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(element: T): Sequence<T> {\n    return sequenceOf(this, sequenceOf(element)).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] array.\n * \n * Note that the source sequence and the array being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Array<out T>): Sequence<T> {\n    return this.plus(elements.asList())\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] collection.\n * \n * Note that the source sequence and the collection being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Iterable<T>): Sequence<T> {\n    return sequenceOf(this, elements.asSequence()).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of original sequence and then all elements of the given [elements] sequence.\n * \n * Note that the source sequence and the sequence being added are iterated only when an `iterator` is requested from\n * the resulting sequence. Changing any of them between successive calls to `iterator` may affect the result.\n *\n * The operation is _intermediate_ and _stateless_.\n */\npublic operator fun <T> Sequence<T>.plus(elements: Sequence<T>): Sequence<T> {\n    return sequenceOf(this, elements).flatten()\n}\n\n/**\n * Returns a sequence containing all elements of the original sequence and then the given [element].\n *\n * The operation is _intermediate_ and _stateless_.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.plusElement(element: T): Sequence<T> {\n    return plus(element)\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this sequence with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<List<T>> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = false)\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this sequence with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have fewer elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): Sequence<R> {\n    return windowedSequence(size, step, partialWindows, reuseBuffer = true).map(transform)\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zip\n */\npublic infix fun <T, R> Sequence<T>.zip(other: Sequence<R>): Sequence<Pair<T, R>> {\n    return MergingSequence(this, other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a sequence of values built from the elements of `this` sequence and the [other] sequence with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The resulting sequence ends as soon as the shortest input sequence ends.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Sequences.Transformations.zipWithTransform\n */\npublic fun <T, R, V> Sequence<T>.zip(other: Sequence<R>, transform: (a: T, b: R) -> V): Sequence<V> {\n    return MergingSequence(this, other, transform)\n}\n\n/**\n * Returns a sequence of pairs of each two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Sequence<T>.zipWithNext(): Sequence<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a sequence containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this sequence.\n * \n * The returned sequence is empty if this sequence contains less than two elements.\n *\n * The operation is _intermediate_ and _stateless_.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Sequence<T>.zipWithNext(transform: (a: T, b: T) -> R): Sequence<R> {\n    return sequence result@ {\n        val iterator = iterator()\n        if (!iterator.hasNext()) return@result\n        var current = iterator.next()\n        while (iterator.hasNext()) {\n            val next = iterator.next()\n            yield(transform(current, next))\n            current = next\n        }\n    }\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Sequence<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n *\n * The operation is _terminal_.\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Sequence<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original sequence returning its elements when being iterated.\n */\npublic fun <T> Sequence<T>.asIterable(): Iterable<T> {\n    return Iterable { this.iterator() }\n}\n\n/**\n * Returns this sequence as a [Sequence].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Sequence<T>.asSequence(): Sequence<T> {\n    return this\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Sequence<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Sequence<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Sequence<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Sequence<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Sequence<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Sequence<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Sequence<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Sequence<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Sequence<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Sequence<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Sequence<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the sequence.\n *\n * The operation is _terminal_.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Sequence<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"PreconditionsKt\")\n\npackage kotlin\n\nimport kotlin.contracts.contract\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    require(value) { \"Failed requirement.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failRequireWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun require(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalArgumentException] if the [value] is null. Otherwise returns the not null value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return requireNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalArgumentException] with the result of calling [lazyMessage] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failRequireNotNullWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> requireNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalArgumentException(message.toString())\n    } else {\n        return value\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean): Unit {\n    contract {\n        returns() implies value\n    }\n    check(value) { \"Check failed.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage] if the [value] is false.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun check(value: Boolean, lazyMessage: () -> Any): Unit {\n    contract {\n        returns() implies value\n    }\n    if (!value) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    }\n}\n\n/**\n * Throws an [IllegalStateException] if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?): T {\n    contract {\n        returns() implies (value != null)\n    }\n    return checkNotNull(value) { \"Required value was null.\" }\n}\n\n/**\n * Throws an [IllegalStateException] with the result of calling [lazyMessage]  if the [value] is null. Otherwise\n * returns the not null value.\n *\n * @sample samples.misc.Preconditions.failCheckWithLazyMessage\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Any> checkNotNull(value: T?, lazyMessage: () -> Any): T {\n    contract {\n        returns() implies (value != null)\n    }\n\n    if (value == null) {\n        val message = lazyMessage()\n        throw IllegalStateException(message.toString())\n    } else {\n        return value\n    }\n}\n\n\n/**\n * Throws an [IllegalStateException] with the given [message].\n *\n * @sample samples.misc.Preconditions.failWithError\n */\n@kotlin.internal.InlineOnly\npublic inline fun error(message: Any): Nothing = throw IllegalStateException(message.toString())\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic expect fun CharSequence.elementAt(index: Int): Char\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.collections.Collections.Elements.find\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the first character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or throws [NoSuchElementException] if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOf(transform: (Char) -> R?): R {\n    return firstNotNullOfOrNull(transform) ?: throw NoSuchElementException(\"No element of the char sequence was transformed to a non-null value.\")\n}\n\n/**\n * Returns the first non-null value produced by [transform] function being applied to characters of this char sequence in iteration order,\n * or `null` if no non-null value was produced.\n * \n * @sample samples.collections.Collections.Transformations.firstNotNullOf\n */\n@SinceKotlin(\"1.5\")\n@kotlin.internal.InlineOnly\npublic inline fun <R : Any> CharSequence.firstNotNullOfOrNull(transform: (Char) -> R?): R? {\n    for (element in this) {\n        val result = transform(element)\n        if (result != null) {\n            return result\n        }\n    }\n    return null\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.getOrNull\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * \n * @throws NoSuchElementException if no such character is found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n * \n * @sample samples.text.Strings.last\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n * \n * @sample samples.text.Strings.last\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns a random character from this char sequence, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.randomOrNull(): Char? {\n    return randomOrNull(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness, or `null` if this char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun CharSequence.randomOrNull(random: Random): Char? {\n    if (isEmpty())\n        return null\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * \n * @sample samples.text.Strings.filter\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexed\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n * \n * @sample samples.collections.Collections.Filtering.filterIndexedTo\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n * \n * @sample samples.text.Strings.filterNot\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * \n * @sample samples.collections.Collections.Filtering.filterTo\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @throws IllegalArgumentException if [n] is negative.\n * \n * @sample samples.text.Strings.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.text.Strings.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associate\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateBy\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateByWithValueTransform\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByTo\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateByToWithValueTransform\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * @sample samples.text.Strings.associateTo\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length.coerceAtMost(128)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n * \n * @sample samples.text.Strings.associateWithTo\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a new [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a new [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length.coerceAtMost(128))))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMap\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.flatMapIndexed\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterable\")\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.flatMapIndexed(transform: (index: Int, Char) -> Iterable<R>): List<R> {\n    return flatMapIndexedTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character\n * and its index in the original char sequence, to the given [destination].\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"flatMapIndexedIterableTo\")\n@kotlin.internal.InlineOnly\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapIndexedTo(destination: C, transform: (index: Int, Char) -> Iterable<R>): C {\n    var index = 0\n    for (element in this) {\n        val list = transform(index++, element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.text.Strings.map\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.mapNotNull\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] that wraps each character of the original char sequence\n * into an [IndexedValue] containing the index of that character and the character itself.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns the specified [initial] value if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharSequence.max(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.maxByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return maxElem\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.maxOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        maxValue = maxOf(maxValue, v)\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.maxOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (maxValue < v) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.maxOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var maxValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(maxValue, v) < 0) {\n            maxValue = v\n        }\n    }\n    return maxValue\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxOrNull(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"maxWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.maxWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharSequence.min(): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minByOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minByOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R : Comparable<R>> CharSequence.minByOrNull(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    val lastIndex = this.lastIndex\n    if (lastIndex == 0) return minElem\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Double): Double {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOf(selector: (Char) -> Float): Float {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOf(selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Double): Double? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n * \n * If any of values produced by [selector] function is `NaN`, the returned result is `NaN`.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.minOfOrNull(selector: (Char) -> Float): Float? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        minValue = minOf(minValue, v)\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value among all values produced by [selector] function\n * applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R : Comparable<R>> CharSequence.minOfOrNull(selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (minValue > v) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence.\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWith(comparator: Comparator<in R>, selector: (Char) -> R): R {\n    if (isEmpty()) throw NoSuchElementException()\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest value according to the provided [comparator]\n * among all values produced by [selector] function applied to each character in the char sequence or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.internal.InlineOnly\npublic inline fun <R> CharSequence.minOfWithOrNull(comparator: Comparator<in R>, selector: (Char) -> R): R? {\n    if (isEmpty()) return null\n    var minValue = selector(this[0])\n    for (i in 1..lastIndex) {\n        val v = selector(this[i])\n        if (comparator.compare(minValue, v) > 0) {\n            minValue = v\n        }\n    }\n    return minValue\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minOrNull(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator].\n * \n * @throws NoSuchElementException if the char sequence is empty.\n */\n@SinceKotlin(\"1.7\")\n@kotlin.jvm.JvmName(\"minWithOrThrow\")\n@Suppress(\"CONFLICTING_OVERLOADS\")\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char {\n    if (isEmpty()) throw NoSuchElementException()\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\n@SinceKotlin(\"1.4\")\npublic fun CharSequence.minWithOrNull(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character,\n * and returns the char sequence itself afterwards.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the action on the character.\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <S : CharSequence> S.onEachIndexed(action: (index: Int, Char) -> Unit): S {\n    return apply { forEachIndexed(action) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduce\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, current accumulator value and the character itself,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceIndexedOrNull(operation: (index: Int, acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes current accumulator value and a character,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceOrNull(operation: (acc: Char, Char) -> Char): Char? {\n    if (isEmpty())\n        return null\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Throws an exception if this char sequence is empty. If the char sequence can be empty in an expected way,\n * please use [reduceRightIndexedOrNull] instead. It returns `null` when its receiver is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRight\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes the index of a character, the character itself and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.reduceRightIndexedOrNull(operation: (index: Int, Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the last character and applying [operation] from right to left\n * to each character and current accumulator value.\n * \n * Returns `null` if the char sequence is empty.\n * \n * @param [operation] function that takes a character and current accumulator value,\n * and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.reduceRightOrNull\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun CharSequence.reduceRightOrNull(operation: (Char, acc: Char) -> Char): Char? {\n    var index = lastIndex\n    if (index < 0) return null\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFold(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (element in this) {\n        accumulator = operation(accumulator, element)\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningFold\n */\n@SinceKotlin(\"1.4\")\npublic inline fun <R> CharSequence.runningFoldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    if (isEmpty()) return listOf(initial)\n    val result = ArrayList<R>(length + 1).apply { add(initial) }\n    var accumulator = initial\n    for (index in indices) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduce(operation: (acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with the first character of this char sequence.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.runningReduce\n */\n@SinceKotlin(\"1.4\")\npublic inline fun CharSequence.runningReduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): List<Char> {\n    if (isEmpty()) return emptyList()\n    var accumulator = this[0]\n    val result = ArrayList<Char>(length).apply { add(accumulator) }\n    for (index in 1 until length) {\n        accumulator = operation(index, accumulator, this[index])\n        result.add(accumulator)\n    }\n    return result\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes current accumulator value and a character, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scan(initial: R, operation: (acc: R, Char) -> R): List<R> {\n    return runningFold(initial, operation)\n}\n\n/**\n * Returns a list containing successive accumulation values generated by applying [operation] from left to right\n * to each character, its index in the original char sequence and current accumulator value that starts with [initial] value.\n * \n * Note that `acc` value passed to [operation] function should not be mutated;\n * otherwise it would affect the previous value in resulting list.\n * \n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n * \n * @sample samples.collections.Collections.Aggregates.scan\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic inline fun <R> CharSequence.scanIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): List<R> {\n    return runningFoldIndexed(initial, operation)\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@Deprecated(\"Use sumOf instead.\", ReplaceWith(\"this.sumOf(selector)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfDouble\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Double): Double {\n    var sum: Double = 0.toDouble()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfInt\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Int): Int {\n    var sum: Int = 0.toInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.4\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfLong\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> Long): Long {\n    var sum: Long = 0.toLong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfUInt\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> UInt): UInt {\n    var sum: UInt = 0.toUInt()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\n@SinceKotlin(\"1.5\")\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@kotlin.jvm.JvmName(\"sumOfULong\")\n@WasExperimental(ExperimentalUnsignedTypes::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.sumOf(selector: (Char) -> ULong): ULong {\n    var sum: ULong = 0.toULong()\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have fewer characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n * \n * @sample samples.text.Strings.partition\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val resultCapacity = thisSize / step + if (thisSize % step == 0) 0 else 1\n    val result = ArrayList<R>(resultCapacity)\n    var index = 0\n    while (index in 0 until thisSize) {\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have fewer characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index ->\n        val end = index + size\n        val coercedEnd = if (end < 0 || end > length) length else end\n        transform(subSequence(index, coercedEnd))\n    }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\nimport kotlin.contracts.contract\nimport kotlin.jvm.JvmName\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toUpperCase(): String\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.uppercase(): String\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.toLowerCase(): String\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun String.lowercase(): String\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.capitalize(): String\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun String.decapitalize(): String\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trim(predicate: (Char) -> Boolean): CharSequence {\n    var startIndex = 0\n    var endIndex = length - 1\n    var startFound = false\n\n    while (startIndex <= endIndex) {\n        val index = if (!startFound) startIndex else endIndex\n        val match = predicate(this[index])\n\n        if (!startFound) {\n            if (!match)\n                startFound = true\n            else\n                startIndex += 1\n        } else {\n            if (!match)\n                break\n            else\n                endIndex -= 1\n        }\n    }\n\n    return subSequence(startIndex, endIndex + 1)\n}\n\n/**\n * Returns a string having leading and trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trim(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trim(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimStart(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n\n    return \"\"\n}\n\n/**\n * Returns a string having leading characters matching the [predicate] removed.\n */\npublic inline fun String.trimStart(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimStart(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters matching the [predicate] removed.\n */\npublic inline fun CharSequence.trimEnd(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices.reversed())\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n\n    return \"\"\n}\n\n/**\n * Returns a string having trailing characters matching the [predicate] removed.\n */\npublic inline fun String.trimEnd(predicate: (Char) -> Boolean): String =\n    (this as CharSequence).trimEnd(predicate).toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trim(vararg chars: Char): CharSequence = trim { it in chars }\n\n/**\n * Returns a string having leading and trailing characters from the [chars] array removed.\n */\npublic fun String.trim(vararg chars: Char): String = trim { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading characters from the [chars] array removed.\n */\npublic fun CharSequence.trimStart(vararg chars: Char): CharSequence = trimStart { it in chars }\n\n/**\n * Returns a string having leading characters from the [chars] array removed.\n */\npublic fun String.trimStart(vararg chars: Char): String = trimStart { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having trailing characters from the [chars] array removed.\n */\npublic fun CharSequence.trimEnd(vararg chars: Char): CharSequence = trimEnd { it in chars }\n\n/**\n * Returns a string having trailing characters from the [chars] array removed.\n */\npublic fun String.trimEnd(vararg chars: Char): String = trimEnd { it in chars }\n\n/**\n * Returns a sub sequence of this char sequence having leading and trailing whitespace removed.\n */\npublic fun CharSequence.trim(): CharSequence = trim(Char::isWhitespace)\n\n/**\n * Returns a string having leading and trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trim(): String = (this as CharSequence).trim().toString()\n\n/**\n * Returns a sub sequence of this char sequence having leading whitespace removed.\n */\npublic fun CharSequence.trimStart(): CharSequence = trimStart(Char::isWhitespace)\n\n/**\n * Returns a string having leading whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimStart(): String = (this as CharSequence).trimStart().toString()\n\n/**\n * Returns a sub sequence of this char sequence having trailing whitespace removed.\n */\npublic fun CharSequence.trimEnd(): CharSequence = trimEnd(Char::isWhitespace)\n\n/**\n * Returns a string having trailing whitespace removed.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.trimEnd(): String = (this as CharSequence).trimEnd().toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the beginning\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun CharSequence.padStart(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    sb.append(this)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the beginning with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string prepended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padStart\n */\npublic fun String.padStart(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padStart(length, padChar).toString()\n\n/**\n * Returns a char sequence with content of this char sequence padded at the end\n * to the specified [length] with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a char sequence of length at least [length] consisting of `this` char sequence appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun CharSequence.padEnd(length: Int, padChar: Char = ' '): CharSequence {\n    if (length < 0)\n        throw IllegalArgumentException(\"Desired length $length is less than zero.\")\n    if (length <= this.length)\n        return this.subSequence(0, this.length)\n\n    val sb = StringBuilder(length)\n    sb.append(this)\n    for (i in 1..(length - this.length))\n        sb.append(padChar)\n    return sb\n}\n\n/**\n * Pads the string to the specified [length] at the end with the specified character or space.\n *\n * @param length the desired string length.\n * @param padChar the character to pad string with, if it has length less than the [length] specified. Space is used by default.\n * @return Returns a string of length at least [length] consisting of `this` string appended with [padChar] as many times\n * as are necessary to reach that length.\n * @sample samples.text.Strings.padEnd\n */\npublic fun String.padEnd(length: Int, padChar: Char = ' '): String =\n    (this as CharSequence).padEnd(length, padChar).toString()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty.\n *\n * @sample samples.text.Strings.stringIsNullOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrEmpty(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrEmpty != null)\n    }\n\n    return this == null || this.length == 0\n}\n\n/**\n * Returns `true` if this char sequence is empty (contains no characters).\n *\n * @sample samples.text.Strings.stringIsEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isEmpty(): Boolean = length == 0\n\n/**\n * Returns `true` if this char sequence is not empty.\n *\n * @sample samples.text.Strings.stringIsNotEmpty\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotEmpty(): Boolean = length > 0\n\n// implemented differently in JVM and JS\n//public fun String.isBlank(): Boolean = length() == 0 || all { it.isWhitespace() }\n\n\n/**\n * Returns `true` if this char sequence is not empty and contains some characters except of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNotBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.isNotBlank(): Boolean = !isBlank()\n\n/**\n * Returns `true` if this nullable char sequence is either `null` or empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsNullOrBlank\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence?.isNullOrBlank(): Boolean {\n    contract {\n        returns(false) implies (this@isNullOrBlank != null)\n    }\n\n    return this == null || this.isBlank()\n}\n\n/**\n * Iterator for characters of the given char sequence.\n */\npublic operator fun CharSequence.iterator(): CharIterator = object : CharIterator() {\n    private var index = 0\n\n    public override fun nextChar(): Char = get(index++)\n\n    public override fun hasNext(): Boolean = index < length\n}\n\n/** Returns the string if it is not `null`, or the empty string otherwise. */\n@kotlin.internal.InlineOnly\npublic inline fun String?.orEmpty(): String = this ?: \"\"\n\n/**\n * Returns this char sequence if it's not empty\n * or the result of calling [defaultValue] function if the char sequence is empty.\n *\n * @sample samples.text.Strings.stringIfEmpty\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifEmpty(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isEmpty()) defaultValue() else this\n\n/**\n * Returns this char sequence if it is not empty and doesn't consist solely of whitespace characters,\n * or the result of calling [defaultValue] function otherwise.\n *\n * @sample samples.text.Strings.stringIfBlank\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <C, R> C.ifBlank(defaultValue: () -> R): R where C : CharSequence, C : R =\n    if (isBlank()) defaultValue() else this\n\n/**\n * Returns the range of valid character indices for this char sequence.\n */\npublic val CharSequence.indices: IntRange\n    get() = 0..length - 1\n\n/**\n * Returns the index of the last character in the char sequence or -1 if it is empty.\n */\npublic val CharSequence.lastIndex: Int\n    get() = this.length - 1\n\n/**\n * Returns `true` if this CharSequence has Unicode surrogate pair at the specified [index].\n */\npublic fun CharSequence.hasSurrogatePairAt(index: Int): Boolean {\n    return index in 0..length - 2\n            && this[index].isHighSurrogate()\n            && this[index + 1].isLowSurrogate()\n}\n\n/**\n * Returns a substring specified by the given [range] of indices.\n */\npublic fun String.substring(range: IntRange): String = substring(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence specified by the given [range] of indices.\n */\npublic fun CharSequence.subSequence(range: IntRange): CharSequence = subSequence(range.start, range.endInclusive + 1)\n\n/**\n * Returns a subsequence of this char sequence.\n *\n * This extension is chosen only for invocation with old-named parameters.\n * Replace parameter names with the same as those of [CharSequence.subSequence].\n */\n@kotlin.internal.InlineOnly\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning\n@Deprecated(\"Use parameters named startIndex and endIndex.\", ReplaceWith(\"subSequence(startIndex = start, endIndex = end)\"))\npublic inline fun String.subSequence(start: Int, end: Int): CharSequence = subSequence(start, end)\n\n/**\n * Returns a substring of chars from a range of this char sequence starting at the [startIndex] and ending right before the [endIndex].\n *\n * @param startIndex the start index (inclusive).\n * @param endIndex the end index (exclusive). If not specified, the length of the char sequence is used.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.substring(startIndex: Int, endIndex: Int = length): String = subSequence(startIndex, endIndex).toString()\n\n/**\n * Returns a substring of chars at indices from the specified [range] of this char sequence.\n */\npublic fun CharSequence.substring(range: IntRange): String = subSequence(range.start, range.endInclusive + 1).toString()\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBefore(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the first occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfter(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring before the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringBeforeLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(0, index)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: Char, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + 1, length)\n}\n\n/**\n * Returns a substring after the last occurrence of [delimiter].\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.substringAfterLast(delimiter: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else substring(index + delimiter.length, length)\n}\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range\n * is replaced with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\npublic fun CharSequence.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n    val sb = StringBuilder()\n    sb.appendRange(this, 0, startIndex)\n    sb.append(replacement)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Replaces the part of the string at the given range with the [replacement] char sequence.\n * @param startIndex the index of the first character to be replaced.\n * @param endIndex the index of the first character after the replacement to keep in the string.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(startIndex: Int, endIndex: Int, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(startIndex, endIndex, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range]\n * is replaced with the [replacement] char sequence.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\npublic fun CharSequence.replaceRange(range: IntRange, replacement: CharSequence): CharSequence =\n    replaceRange(range.start, range.endInclusive + 1, replacement)\n\n/**\n * Replace the part of string at the given [range] with the [replacement] string.\n *\n * The end index of the [range] is included in the part to be replaced.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceRange(range: IntRange, replacement: CharSequence): String =\n    (this as CharSequence).replaceRange(range, replacement).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given range is removed.\n *\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n * [endIndex] is not included in the removed part.\n */\npublic fun CharSequence.removeRange(startIndex: Int, endIndex: Int): CharSequence {\n    if (endIndex < startIndex)\n        throw IndexOutOfBoundsException(\"End index ($endIndex) is less than start index ($startIndex).\")\n\n    if (endIndex == startIndex)\n        return this.subSequence(0, length)\n\n    val sb = StringBuilder(length - (endIndex - startIndex))\n    sb.appendRange(this, 0, startIndex)\n    sb.appendRange(this, endIndex, length)\n    return sb\n}\n\n/**\n * Removes the part of a string at a given range.\n * @param startIndex the index of the first character to be removed.\n * @param endIndex the index of the first character after the removed part to keep in the string.\n *\n *  [endIndex] is not included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(startIndex: Int, endIndex: Int): String =\n    (this as CharSequence).removeRange(startIndex, endIndex).toString()\n\n/**\n * Returns a char sequence with content of this char sequence where its part at the given [range] is removed.\n *\n * The end index of the [range] is included in the removed part.\n */\npublic fun CharSequence.removeRange(range: IntRange): CharSequence = removeRange(range.start, range.endInclusive + 1)\n\n/**\n * Removes the part of a string at the given [range].\n *\n * The end index of the [range] is included in the removed part.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.removeRange(range: IntRange): String =\n    (this as CharSequence).removeRange(range).toString()\n\n/**\n * If this char sequence starts with the given [prefix], returns a new char sequence\n * with the prefix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removePrefix(prefix: CharSequence): CharSequence {\n    if (startsWith(prefix)) {\n        return subSequence(prefix.length, length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string starts with the given [prefix], returns a copy of this string\n * with the prefix removed. Otherwise, returns this string.\n */\npublic fun String.removePrefix(prefix: CharSequence): String {\n    if (startsWith(prefix)) {\n        return substring(prefix.length)\n    }\n    return this\n}\n\n/**\n * If this char sequence ends with the given [suffix], returns a new char sequence\n * with the suffix removed. Otherwise, returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSuffix(suffix: CharSequence): CharSequence {\n    if (endsWith(suffix)) {\n        return subSequence(0, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * If this string ends with the given [suffix], returns a copy of this string\n * with the suffix removed. Otherwise, returns this string.\n */\npublic fun String.removeSuffix(suffix: CharSequence): String {\n    if (endsWith(suffix)) {\n        return substring(0, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with the given [prefix] and ends with the given [suffix],\n * returns a new char sequence having both the given [prefix] and [suffix] removed.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(prefix: CharSequence, suffix: CharSequence): CharSequence {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return subSequence(prefix.length, length - suffix.length)\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Removes from a string both the given [prefix] and [suffix] if and only if\n * it starts with the [prefix] and ends with the [suffix].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(prefix: CharSequence, suffix: CharSequence): String {\n    if ((length >= prefix.length + suffix.length) && startsWith(prefix) && endsWith(suffix)) {\n        return substring(prefix.length, length - suffix.length)\n    }\n    return this\n}\n\n/**\n * When this char sequence starts with and ends with the given [delimiter],\n * returns a new char sequence having this [delimiter] removed both from the start and end.\n * Otherwise returns a new char sequence with the same characters.\n */\npublic fun CharSequence.removeSurrounding(delimiter: CharSequence): CharSequence = removeSurrounding(delimiter, delimiter)\n\n/**\n * Removes the given [delimiter] string from both the start and the end of this string\n * if and only if it starts with and ends with the [delimiter].\n * Otherwise returns this string unchanged.\n */\npublic fun String.removeSurrounding(delimiter: CharSequence): String = removeSurrounding(delimiter, delimiter)\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBefore(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string after the first occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfter(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = indexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + delimiter.length, length, replacement)\n}\n\n/**\n * Replace part of string after the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceAfterLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(index + 1, length, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: Char, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n/**\n * Replace part of string before the last occurrence of given delimiter with the [replacement] string.\n * If the string does not contain the delimiter, returns [missingDelimiterValue] which defaults to the original string.\n */\npublic fun String.replaceBeforeLast(delimiter: String, replacement: String, missingDelimiterValue: String = this): String {\n    val index = lastIndexOf(delimiter)\n    return if (index == -1) missingDelimiterValue else replaceRange(0, index, replacement)\n}\n\n\n// public fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean): String // JVM- and JS-specific\n// public fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean): String // JVM- and JS-specific\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the given [replacement].\n *\n * The [replacement] can consist of any combination of literal text and $-substitutions. To treat the replacement string\n * literally escape it with the [kotlin.text.Regex.Companion.escapeReplacement] method.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, replacement: String): String = regex.replace(this, replacement)\n\n/**\n * Returns a new string obtained by replacing each substring of this char sequence that matches the given regular expression\n * with the result of the given function [transform] that takes [MatchResult] and returns a string to be used as a\n * replacement for that match.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replace(regex: Regex, noinline transform: (MatchResult) -> CharSequence): String =\n    regex.replace(this, transform)\n\n/**\n * Replaces the first occurrence of the given regular expression [regex] in this char sequence with specified [replacement] expression.\n *\n * @param replacement A replacement expression that can include substitutions. See [Regex.replaceFirst] for details.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.replaceFirst(regex: Regex, replacement: String): String = regex.replaceFirst(this, replacement)\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithChar\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> Char): String {\n    return if (isNotEmpty()) transform(this[0]) + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first character replaced with the result of the specified [transform],\n * or the original string if it's empty.\n *\n * @param transform function that takes the first character and returns the result of the transform applied to the character.\n *\n * @sample samples.text.Strings.replaceFirstChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@OptIn(kotlin.experimental.ExperimentalTypeInference::class)\n@OverloadResolutionByLambdaReturnType\n@JvmName(\"replaceFirstCharWithCharSequence\")\n@kotlin.internal.InlineOnly\npublic inline fun String.replaceFirstChar(transform: (Char) -> CharSequence): String {\n    return if (isNotEmpty()) transform(this[0]).toString() + substring(1) else this\n}\n\n\n/**\n * Returns `true` if this char sequence matches the given regular expression.\n */\n@kotlin.internal.InlineOnly\npublic inline infix fun CharSequence.matches(regex: Regex): Boolean = regex.matches(this)\n\n/**\n * Implementation of [regionMatches] for CharSequences.\n * Invoked when it's already known that arguments are not Strings, so that no additional type checks are performed.\n */\ninternal fun CharSequence.regionMatchesImpl(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean): Boolean {\n    if ((otherOffset < 0) || (thisOffset < 0) || (thisOffset > this.length - length) || (otherOffset > other.length - length)) {\n        return false\n    }\n\n    for (index in 0 until length) {\n        if (!this[thisOffset + index].equals(other[otherOffset + index], ignoreCase))\n            return false\n    }\n    return true\n}\n\n/**\n * Returns `true` if this char sequence starts with the specified character.\n */\npublic fun CharSequence.startsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[0].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence ends with the specified character.\n */\npublic fun CharSequence.endsWith(char: Char, ignoreCase: Boolean = false): Boolean =\n    this.length > 0 && this[lastIndex].equals(char, ignoreCase)\n\n/**\n * Returns `true` if this char sequence starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix)\n    else\n        return regionMatchesImpl(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this char sequence starting at the specified offset [startIndex] starts with the specified prefix.\n */\npublic fun CharSequence.startsWith(prefix: CharSequence, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && prefix is String)\n        return this.startsWith(prefix, startIndex)\n    else\n        return regionMatchesImpl(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this char sequence ends with the specified suffix.\n */\npublic fun CharSequence.endsWith(suffix: CharSequence, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase && this is String && suffix is String)\n        return this.endsWith(suffix)\n    else\n        return regionMatchesImpl(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n\n// common prefix and suffix\n\n/**\n * Returns the longest string `prefix` such that this char sequence and [other] char sequence both start with this prefix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common prefix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonPrefixWith\n */\npublic fun CharSequence.commonPrefixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val shortestLength = minOf(this.length, other.length)\n\n    var i = 0\n    while (i < shortestLength && this[i].equals(other[i], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(i - 1) || other.hasSurrogatePairAt(i - 1)) {\n        i--\n    }\n    return subSequence(0, i).toString()\n}\n\n/**\n * Returns the longest string `suffix` such that this char sequence and [other] char sequence both end with this suffix,\n * taking care not to split surrogate pairs.\n * If this and [other] have no common suffix, returns the empty string.\n\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @sample samples.text.Strings.commonSuffixWith\n */\npublic fun CharSequence.commonSuffixWith(other: CharSequence, ignoreCase: Boolean = false): String {\n    val thisLength = this.length\n    val otherLength = other.length\n    val shortestLength = minOf(thisLength, otherLength)\n\n    var i = 0\n    while (i < shortestLength && this[thisLength - i - 1].equals(other[otherLength - i - 1], ignoreCase = ignoreCase)) {\n        i++\n    }\n    if (this.hasSurrogatePairAt(thisLength - i - 1) || other.hasSurrogatePairAt(otherLength - i - 1)) {\n        i--\n    }\n    return subSequence(thisLength - i, thisLength).toString()\n}\n\n\n// indexOfAny()\n\n/**\n * Finds the index of the first occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.indexOfAny(chars: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeIndexOf(char, startIndex)\n    }\n\n    for (index in startIndex.coerceAtLeast(0)..lastIndex) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n    return -1\n}\n\n/**\n * Finds the index of the last occurrence of any of the specified [chars] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of matched character from [chars] or -1 if none of [chars] are found.\n *\n */\npublic fun CharSequence.lastIndexOfAny(chars: CharArray, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    if (!ignoreCase && chars.size == 1 && this is String) {\n        val char = chars.single()\n        return nativeLastIndexOf(char, startIndex)\n    }\n\n\n    for (index in startIndex.coerceAtMost(lastIndex) downTo 0) {\n        val charAtIndex = get(index)\n        if (chars.any { it.equals(charAtIndex, ignoreCase) })\n            return index\n    }\n\n    return -1\n}\n\n\nprivate fun CharSequence.indexOf(other: CharSequence, startIndex: Int, endIndex: Int, ignoreCase: Boolean, last: Boolean = false): Int {\n    val indices = if (!last)\n        startIndex.coerceAtLeast(0)..endIndex.coerceAtMost(length)\n    else\n        startIndex.coerceAtMost(lastIndex) downTo endIndex.coerceAtLeast(0)\n\n    if (this is String && other is String) { // smart cast\n        for (index in indices) {\n            if (other.regionMatches(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    } else {\n        for (index in indices) {\n            if (other.regionMatchesImpl(0, this, index, other.length, ignoreCase))\n                return index\n        }\n    }\n    return -1\n}\n\nprivate fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int, ignoreCase: Boolean, last: Boolean): Pair<Int, String>? {\n    if (!ignoreCase && strings.size == 1) {\n        val string = strings.single()\n        val index = if (!last) indexOf(string, startIndex) else lastIndexOf(string, startIndex)\n        return if (index < 0) null else index to string\n    }\n\n    val indices = if (!last) startIndex.coerceAtLeast(0)..length else startIndex.coerceAtMost(lastIndex) downTo 0\n\n    if (this is String) {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatches(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    } else {\n        for (index in indices) {\n            val matchingString = strings.firstOrNull { it.regionMatchesImpl(0, this, index, it.length, ignoreCase) }\n            if (matchingString != null)\n                return index to matchingString\n        }\n    }\n\n    return null\n}\n\n/**\n * Finds the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the first occurrence of matched string from [strings] and the string matched\n * or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findAnyOf(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)\n\n/**\n * Finds the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return A pair of an index of the last occurrence of matched string from [strings] and the string matched or `null` if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.findLastAnyOf(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Pair<Int, String>? =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)\n\n/**\n * Finds the index of the first occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.indexOfAny(strings: Collection<String>, startIndex: Int = 0, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = false)?.first ?: -1\n\n/**\n * Finds the index of the last occurrence of any of the specified [strings] in this char sequence,\n * starting from the specified [startIndex] and optionally ignoring the case.\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of matched string from [strings] or -1 if none of [strings] are found.\n *\n * To avoid ambiguous results when strings in [strings] have characters in common, this method proceeds from\n * the end toward the beginning of this string, and finds at each position the first element in [strings]\n * that matches this string at that position.\n */\npublic fun CharSequence.lastIndexOfAny(strings: Collection<String>, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int =\n    findAnyOf(strings, startIndex, ignoreCase, last = true)?.first ?: -1\n\n\n// indexOf\n\n/**\n * Returns the index within this string of the first occurrence of the specified character, starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the first occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.indexOf(char: Char, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the first occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the first occurrence of [string] or `-1` if none is found.\n * @sample samples.text.Strings.indexOf\n */\npublic fun CharSequence.indexOf(string: String, startIndex: Int = 0, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, length, ignoreCase)\n    else\n        nativeIndexOf(string, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified character,\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a character. By default `false`.\n * @return An index of the last occurrence of [char] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(char: Char, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        lastIndexOfAny(charArrayOf(char), startIndex, ignoreCase)\n    else\n        nativeLastIndexOf(char, startIndex)\n}\n\n/**\n * Returns the index within this char sequence of the last occurrence of the specified [string],\n * starting from the specified [startIndex].\n *\n * @param startIndex The index of character to start searching at. The search proceeds backward toward the beginning of the string.\n * @param ignoreCase `true` to ignore character case when matching a string. By default `false`.\n * @return An index of the last occurrence of [string] or -1 if none is found.\n */\npublic fun CharSequence.lastIndexOf(string: String, startIndex: Int = lastIndex, ignoreCase: Boolean = false): Int {\n    return if (ignoreCase || this !is String)\n        indexOf(string, startIndex, 0, ignoreCase, last = true)\n    else\n        nativeLastIndexOf(string, startIndex)\n}\n\n/**\n * Returns `true` if this char sequence contains the specified [other] sequence of characters as a substring.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(other: CharSequence, ignoreCase: Boolean = false): Boolean =\n    if (other is String)\n        indexOf(other, ignoreCase = ignoreCase) >= 0\n    else\n        indexOf(other, 0, length, ignoreCase) >= 0\n\n\n\n/**\n * Returns `true` if this char sequence contains the specified character [char].\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n */\n@Suppress(\"INAPPLICABLE_OPERATOR_MODIFIER\")\npublic operator fun CharSequence.contains(char: Char, ignoreCase: Boolean = false): Boolean =\n    indexOf(char, ignoreCase = ignoreCase) >= 0\n\n/**\n * Returns `true` if this char sequence contains at least one match of the specified regular expression [regex].\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun CharSequence.contains(regex: Regex): Boolean = regex.containsMatchIn(this)\n\n\n// rangesDelimitedBy\n\n\nprivate class DelimitedRangesSequence(\n    private val input: CharSequence,\n    private val startIndex: Int,\n    private val limit: Int,\n    private val getNextMatch: CharSequence.(currentIndex: Int) -> Pair<Int, Int>?\n) : Sequence<IntRange> {\n\n    override fun iterator(): Iterator<IntRange> = object : Iterator<IntRange> {\n        var nextState: Int = -1 // -1 for unknown, 0 for done, 1 for continue\n        var currentStartIndex: Int = startIndex.coerceIn(0, input.length)\n        var nextSearchIndex: Int = currentStartIndex\n        var nextItem: IntRange? = null\n        var counter: Int = 0\n\n        private fun calcNext() {\n            if (nextSearchIndex < 0) {\n                nextState = 0\n                nextItem = null\n            } else {\n                if (limit > 0 && ++counter >= limit || nextSearchIndex > input.length) {\n                    nextItem = currentStartIndex..input.lastIndex\n                    nextSearchIndex = -1\n                } else {\n                    val match = input.getNextMatch(nextSearchIndex)\n                    if (match == null) {\n                        nextItem = currentStartIndex..input.lastIndex\n                        nextSearchIndex = -1\n                    } else {\n                        val (index, length) = match\n                        nextItem = currentStartIndex until index\n                        currentStartIndex = index + length\n                        nextSearchIndex = currentStartIndex + if (length == 0) 1 else 0\n                    }\n                }\n                nextState = 1\n            }\n        }\n\n        override fun next(): IntRange {\n            if (nextState == -1)\n                calcNext()\n            if (nextState == 0)\n                throw NoSuchElementException()\n            val result = nextItem as IntRange\n            // Clean next to avoid keeping reference on yielded instance\n            nextItem = null\n            nextState = -1\n            return result\n        }\n\n        override fun hasNext(): Boolean {\n            if (nextState == -1)\n                calcNext()\n            return nextState == 1\n        }\n    }\n}\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: CharArray, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    requireNonNegativeLimit(limit)\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex ->\n        indexOfAny(delimiters, currentIndex, ignoreCase = ignoreCase).let { if (it < 0) null else it to 1 }\n    })\n}\n\n\n/**\n * Returns a sequence of index ranges of substrings in this char sequence around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param startIndex The index to start searching delimiters from.\n *  No range having its start value less than [startIndex] is returned.\n *  [startIndex] is coerced to be non-negative and not greater than length of this string.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\nprivate fun CharSequence.rangesDelimitedBy(delimiters: Array<out String>, startIndex: Int = 0, ignoreCase: Boolean = false, limit: Int = 0): Sequence<IntRange> {\n    requireNonNegativeLimit(limit)\n    val delimitersList = delimiters.asList()\n\n    return DelimitedRangesSequence(this, startIndex, limit, { currentIndex -> findAnyOf(delimitersList, currentIndex, ignoreCase = ignoreCase, last = false)?.let { it.first to it.second.length } })\n\n}\n\ninternal fun requireNonNegativeLimit(limit: Int) =\n    require(limit >= 0) { \"Limit must be non-negative, but was $limit\" }\n\n\n// split\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and finds at each position the first element in [delimiters]\n * that matches this string at that position.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more strings to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return. Zero by default means no limit is set.\n *\n * To avoid ambiguous results when strings in [delimiters] have characters in common, this method proceeds from\n * the beginning to the end of this string, and matches at each position the first element in [delimiters]\n * that is equal to a delimiter in this instance at that position.\n */\npublic fun CharSequence.split(vararg delimiters: String, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        val delimiter = delimiters[0]\n        if (!delimiter.isEmpty()) {\n            return split(delimiter, ignoreCase, limit)\n        }\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a sequence of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.splitToSequence(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): Sequence<String> =\n    rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).map { substring(it) }\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiters].\n *\n * @param delimiters One or more characters to be used as delimiters.\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\npublic fun CharSequence.split(vararg delimiters: Char, ignoreCase: Boolean = false, limit: Int = 0): List<String> {\n    if (delimiters.size == 1) {\n        return split(delimiters[0].toString(), ignoreCase, limit)\n    }\n\n    return rangesDelimitedBy(delimiters, ignoreCase = ignoreCase, limit = limit).asIterable().map { substring(it) }\n}\n\n/**\n * Splits this char sequence to a list of strings around occurrences of the specified [delimiter].\n * This is specialized version of split which receives single non-empty delimiter and offers better performance\n *\n * @param delimiter String used as delimiter\n * @param ignoreCase `true` to ignore character case when matching a delimiter. By default `false`.\n * @param limit The maximum number of substrings to return.\n */\nprivate fun CharSequence.split(delimiter: String, ignoreCase: Boolean, limit: Int): List<String> {\n    requireNonNegativeLimit(limit)\n\n    var currentOffset = 0\n    var nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    if (nextIndex == -1 || limit == 1) {\n        return listOf(this.toString())\n    }\n\n    val isLimited = limit > 0\n    val result = ArrayList<String>(if (isLimited) limit.coerceAtMost(10) else 10)\n    do {\n        result.add(substring(currentOffset, nextIndex))\n        currentOffset = nextIndex + delimiter.length\n        // Do not search for next occurrence if we're reaching limit\n        if (isLimited && result.size == limit - 1) break\n        nextIndex = indexOf(delimiter, currentOffset, ignoreCase)\n    } while (nextIndex != -1)\n\n    result.add(substring(currentOffset, length))\n    return result\n}\n\n/**\n * Splits this char sequence to a list of strings around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.split(regex: Regex, limit: Int = 0): List<String> = regex.split(this, limit)\n\n/**\n * Splits this char sequence to a sequence of strings around matches of the given regular expression.\n *\n * @param limit Non-negative value specifying the maximum number of substrings to return.\n * Zero by default means no limit is set.\n * @sample samples.text.Strings.splitToSequence\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.splitToSequence(regex: Regex, limit: Int = 0): Sequence<String> = regex.splitToSequence(this, limit)\n\n/**\n * Splits this char sequence to a sequence of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lineSequence(): Sequence<String> = splitToSequence(\"\\r\\n\", \"\\n\", \"\\r\")\n\n/**\n * Splits this char sequence to a list of lines delimited by any of the following character sequences: CRLF, LF or CR.\n *\n * The lines returned do not include terminating line separators.\n */\npublic fun CharSequence.lines(): List<String> = lineSequence().toList()\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic expect fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean\n\ninternal fun CharSequence?.contentEqualsIgnoreCaseImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this.equals(other, ignoreCase = true)\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (!this[i].equals(other[i], ignoreCase = true)) {\n            return false\n        }\n    }\n\n    return true\n}\n\ninternal fun CharSequence?.contentEqualsImpl(other: CharSequence?): Boolean {\n    if (this is String && other is String) {\n        return this == other\n    }\n\n    if (this === other) return true\n    if (this == null || other == null || this.length != other.length) return false\n\n    for (i in 0 until length) {\n        if (this[i] != other[i]) {\n            return false\n        }\n    }\n\n    return true\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and throws an exception otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrict\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrict(): Boolean = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> throw IllegalArgumentException(\"The string doesn't represent a boolean value: $this\")\n}\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", `false` if it is equal to \"false\",\n * and `null` otherwise.\n *\n * There is also a lenient version of the function available on nullable String, [String?.toBoolean].\n * Note that this function is case-sensitive.\n *\n * @sample samples.text.Strings.toBooleanStrictOrNull\n */\n@SinceKotlin(\"1.5\")\npublic fun String.toBooleanStrictOrNull(): Boolean? = when (this) {\n    \"true\" -> true\n    \"false\" -> false\n    else -> null\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString() instead\", ReplaceWith(\"chars.concatToString()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\n@Deprecated(\"Use CharArray.concatToString(startIndex, endIndex) instead\", ReplaceWith(\"chars.concatToString(offset, offset + length)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.4\", errorSince = \"1.5\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] into a String.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun CharArray.concatToString(): String {\n    var result = \"\"\n    for (char in this) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Concatenates characters in this [CharArray] or its subrange into a String.\n *\n * @param startIndex the beginning (inclusive) of the subrange of characters, 0 by default.\n * @param endIndex the end (exclusive) of the subrange of characters, size of this array by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.concatToString(startIndex: Int = 0, endIndex: Int = this.size): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    var result = \"\"\n    for (index in startIndex until endIndex) {\n        result += this[index]\n    }\n    return result\n}\n\n/**\n * Returns a [CharArray] containing characters of this string.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.toCharArray(): CharArray {\n    return CharArray(length) { get(it) }\n}\n\n/**\n * Returns a [CharArray] containing characters of this string or its substring.\n *\n * @param startIndex the beginning (inclusive) of the substring, 0 by default.\n * @param endIndex the end (exclusive) of the substring, length of this string by default.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.toCharArray(startIndex: Int = 0, endIndex: Int = this.length): CharArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return CharArray(endIndex - startIndex) { get(startIndex + it) }\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array.\n *\n * Malformed byte sequences are replaced by the replacement char `\\uFFFD`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun ByteArray.decodeToString(): String {\n    return decodeUtf8(this, 0, size, false)\n}\n\n/**\n * Decodes a string from the bytes in UTF-8 encoding in this array or its subrange.\n *\n * @param startIndex the beginning (inclusive) of the subrange to decode, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to decode, size of this array by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed byte sequence or replace it by the replacement char `\\uFFFD`.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if the byte array contains malformed UTF-8 byte sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.decodeToString(\n    startIndex: Int = 0,\n    endIndex: Int = this.size,\n    throwOnInvalidSequence: Boolean = false\n): String {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, this.size)\n    return decodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Encodes this string to an array of bytes in UTF-8 encoding.\n *\n * Any malformed char sequence is replaced by the replacement byte sequence.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun String.encodeToByteArray(): ByteArray {\n    return encodeUtf8(this, 0, length, false)\n}\n\n/**\n * Encodes this string or its substring to an array of bytes in UTF-8 encoding.\n *\n * @param startIndex the beginning (inclusive) of the substring to encode, 0 by default.\n * @param endIndex the end (exclusive) of the substring to encode, length of this string by default.\n * @param throwOnInvalidSequence specifies whether to throw an exception on malformed char sequence or replace.\n *\n * @throws IndexOutOfBoundsException if [startIndex] is less than zero or [endIndex] is greater than the length of this string.\n * @throws IllegalArgumentException if [startIndex] is greater than [endIndex].\n * @throws CharacterCodingException if this string contains malformed char sequence and [throwOnInvalidSequence] is true.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.encodeToByteArray(\n    startIndex: Int = 0,\n    endIndex: Int = this.length,\n    throwOnInvalidSequence: Boolean = false\n): ByteArray {\n    AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n    return encodeUtf8(this, startIndex, endIndex, throwOnInvalidSequence)\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n */\n@Deprecated(\"Use uppercase() instead.\", ReplaceWith(\"uppercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.uppercase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n */\n@Deprecated(\"Use lowercase() instead.\", ReplaceWith(\"lowercase()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n/**\n * Returns a copy of this string converted to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many and many-to-one character mapping,\n * thus the length of the returned string can be different from the length of the original string.\n *\n * @sample samples.text.Strings.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun String.lowercase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\n@kotlin.js.JsPolyfill(\"\"\"\nif (typeof String.prototype.startsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"startsWith\", {\n        value: function (searchString, position) {\n            position = position || 0;\n            return this.lastIndexOf(searchString, position) === position;\n        }\n    });\n}\n\"\"\")\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\n@kotlin.js.JsPolyfill(\"\"\"\nif (typeof String.prototype.endsWith === \"undefined\") {\n    Object.defineProperty(String.prototype, \"endsWith\", {\n        value: function (searchString, position) {\n            var subjectString = this.toString();\n            if (position === undefined || position > subjectString.length) {\n                position = subjectString.length;\n            }\n            position -= searchString.length;\n            var lastIndex = subjectString.indexOf(searchString, position);\n            return lastIndex !== -1 && lastIndex === position;\n        }\n    });\n}\n\"\"\")\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@Deprecated(\"Use String.plus() instead\", ReplaceWith(\"this + str\"))\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@Deprecated(\"Use Regex.findAll() instead or invoke matches() on String dynamically: this.asDynamic().match(regex)\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n/**\n * Compares two strings lexicographically, optionally ignoring case differences.\n *\n * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        for (index in 0 until min) {\n            var thisChar = this[index]\n            var otherChar = other[index]\n\n            if (thisChar != otherChar) {\n                thisChar = thisChar.uppercaseChar()\n                otherChar = otherChar.uppercaseChar()\n\n                if (thisChar != otherChar) {\n                    thisChar = thisChar.lowercaseChar()\n                    otherChar = otherChar.lowercaseChar()\n\n                    if (thisChar != otherChar) {\n                        return thisChar.compareTo(otherChar)\n                    }\n                }\n            }\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other],\n * i.e. both char sequences contain the same number of the same characters in the same order.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual infix fun CharSequence?.contentEquals(other: CharSequence?): Boolean = contentEqualsImpl(other)\n\n/**\n * Returns `true` if the contents of this char sequence are equal to the contents of the specified [other], optionally ignoring case difference.\n *\n * @param ignoreCase `true` to ignore character case when comparing contents.\n *\n * @sample samples.text.Strings.contentEquals\n */\n@SinceKotlin(\"1.5\")\npublic actual fun CharSequence?.contentEquals(other: CharSequence?, ignoreCase: Boolean): Boolean {\n    return if (ignoreCase)\n        this.contentEqualsIgnoreCaseImpl(other)\n    else\n        this.contentEqualsImpl(other)\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n","/*\n * Copyright 2010-2015 JetBrains s.r.o.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage kotlin\n\n/**\n * The type with only one value: the `Unit` object. This type corresponds to the `void` type in Java.\n */\npublic object Unit {\n    override fun toString() = \"kotlin.Unit\"\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"UnsignedKt\")\npackage kotlin\n\n@PublishedApi\ninternal fun uintCompare(v1: Int, v2: Int): Int = (v1 xor Int.MIN_VALUE).compareTo(v2 xor Int.MIN_VALUE)\n@PublishedApi\ninternal fun ulongCompare(v1: Long, v2: Long): Int = (v1 xor Long.MIN_VALUE).compareTo(v2 xor Long.MIN_VALUE)\n\n@PublishedApi\ninternal fun uintDivide(v1: UInt, v2: UInt): UInt = (v1.toLong() / v2.toLong()).toUInt()\n@PublishedApi\ninternal fun uintRemainder(v1: UInt, v2: UInt): UInt = (v1.toLong() % v2.toLong()).toUInt()\n\n// Division and remainder are based on Guava's UnsignedLongs implementation\n// Copyright 2011 The Guava Authors\n\n@PublishedApi\ninternal fun ulongDivide(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) ULong(0) else ULong(1)\n    }\n\n    // Optimization - use signed division if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend / divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(quotient + if (ULong(rem) >= ULong(divisor)) 1 else 0)\n\n}\n\n@PublishedApi\ninternal fun ulongRemainder(v1: ULong, v2: ULong): ULong {\n    val dividend = v1.toLong()\n    val divisor = v2.toLong()\n    if (divisor < 0) { // i.e., divisor >= 2^63:\n        return if (v1 < v2) {\n            v1 // dividend < divisor\n        } else {\n            v1 - v2 // dividend >= divisor\n        }\n    }\n\n    // Optimization - use signed modulus if both dividend and divisor < 2^63\n    if (dividend >= 0) {\n        return ULong(dividend % divisor)\n    }\n\n    // Otherwise, approximate the quotient, check, and correct if necessary.\n    val quotient = ((dividend ushr 1) / divisor) shl 1\n    val rem = dividend - quotient * divisor\n    return ULong(rem - if (ULong(rem) >= ULong(divisor)) divisor else 0)\n}\n\n@PublishedApi\ninternal fun doubleToUInt(v: Double): UInt = when {\n    v.isNaN() -> 0u\n    v <= UInt.MIN_VALUE.toDouble() -> UInt.MIN_VALUE\n    v >= UInt.MAX_VALUE.toDouble() -> UInt.MAX_VALUE\n    v <= Int.MAX_VALUE -> v.toInt().toUInt()\n    else -> (v - Int.MAX_VALUE).toInt().toUInt() + Int.MAX_VALUE.toUInt()      // Int.MAX_VALUE < v < UInt.MAX_VALUE\n}\n\n@PublishedApi\ninternal fun doubleToULong(v: Double): ULong = when {\n    v.isNaN() -> 0u\n    v <= ULong.MIN_VALUE.toDouble() -> ULong.MIN_VALUE\n    v >= ULong.MAX_VALUE.toDouble() -> ULong.MAX_VALUE\n    v < Long.MAX_VALUE -> v.toLong().toULong()\n\n    // Real values from Long.MAX_VALUE to (Long.MAX_VALUE + 1) are not representable in Double, so don't handle them.\n    else -> (v - 9223372036854775808.0).toLong().toULong() + 9223372036854775808uL      // Long.MAX_VALUE + 1 < v < ULong.MAX_VALUE\n}\n\n\n@PublishedApi\ninternal fun uintToDouble(v: Int): Double = (v and Int.MAX_VALUE).toDouble() + (v ushr 31 shl 30).toDouble() * 2\n\n@PublishedApi\ninternal fun ulongToDouble(v: Long): Double = (v ushr 11).toDouble() * 2048 + (v and 2047)\n\n\ninternal fun ulongToString(v: Long): String = ulongToString(v, 10)\n\ninternal fun ulongToString(v: Long, base: Int): String {\n    if (v >= 0) return v.toString(base)\n\n    var quotient = ((v ushr 1) / base) shl 1\n    var rem = v - quotient * base\n    if (rem >= base) {\n        rem -= base\n        quotient += 1\n    }\n    return quotient.toString(base) + rem.toString(base)\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.internal.PlatformDependent\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over.\n * @param T the type of element being iterated over. The iterator is covariant in its element type.\n */\npublic interface Iterable<out T> {\n    /**\n     * Returns an iterator over the elements of this object.\n     */\n    public operator fun iterator(): Iterator<T>\n}\n\n/**\n * Classes that inherit from this interface can be represented as a sequence of elements that can\n * be iterated over and that supports removing elements during iteration.\n * @param T the type of element being iterated over. The mutable iterator is invariant in its element type.\n */\npublic interface MutableIterable<out T> : Iterable<T> {\n    /**\n     * Returns an iterator over the elements of this sequence that supports removing elements during iteration.\n     */\n    override fun iterator(): MutableIterator<T>\n}\n\n/**\n * A generic collection of elements. Methods in this interface support only read-only access to the collection;\n * read/write access is supported through the [MutableCollection] interface.\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\npublic interface Collection<out E> : Iterable<E> {\n    // Query Operations\n    /**\n     * Returns the size of the collection.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the collection is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Checks if the specified element is contained in this collection.\n     */\n    public operator fun contains(element: @UnsafeVariance E): Boolean\n\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    /**\n     * Checks if all elements in the specified collection are contained in this collection.\n     */\n    public fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic collection of elements that supports adding and removing elements.\n *\n * @param E the type of elements contained in the collection. The mutable collection is invariant in its element type.\n */\npublic interface MutableCollection<E> : Collection<E>, MutableIterable<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n    /**\n     * Adds the specified element to the collection.\n     *\n     * @return `true` if the element has been added, `false` if the collection does not support duplicates\n     * and the element is already contained in the collection.\n     */\n    public fun add(element: E): Boolean\n\n    /**\n     * Removes a single instance of the specified element from this\n     * collection, if it is present.\n     *\n     * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n     */\n    public fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to this collection.\n     *\n     * @return `true` if any of the specified elements was added to the collection, `false` if the collection was not modified.\n     */\n    public fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all of this collection's elements that are also contained in the specified collection.\n     *\n     * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun removeAll(elements: Collection<E>): Boolean\n\n    /**\n     * Retains only the elements in this collection that are contained in the specified collection.\n     *\n     * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n     */\n    public fun retainAll(elements: Collection<E>): Boolean\n\n    /**\n     * Removes all elements from this collection.\n     */\n    public fun clear(): Unit\n}\n\n/**\n * A generic ordered collection of elements. Methods in this interface support only read-only access to the list;\n * read/write access is supported through the [MutableList] interface.\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\npublic interface List<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n\n    // Positional Access Operations\n    /**\n     * Returns the element at the specified index in the list.\n     */\n    public operator fun get(index: Int): E\n\n    // Search Operations\n    /**\n     * Returns the index of the first occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun indexOf(element: @UnsafeVariance E): Int\n\n    /**\n     * Returns the index of the last occurrence of the specified element in the list, or -1 if the specified\n     * element is not contained in the list.\n     */\n    public fun lastIndexOf(element: @UnsafeVariance E): Int\n\n    // List Iterators\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence).\n     */\n    public fun listIterator(): ListIterator<E>\n\n    /**\n     * Returns a list iterator over the elements in this list (in proper sequence), starting at the specified [index].\n     */\n    public fun listIterator(index: Int): ListIterator<E>\n\n    // View\n    /**\n     * Returns a view of the portion of this list between the specified [fromIndex] (inclusive) and [toIndex] (exclusive).\n     * The returned list is backed by this list, so non-structural changes in the returned list are reflected in this list, and vice-versa.\n     *\n     * Structural changes in the base list make the behavior of the view undefined.\n     */\n    public fun subList(fromIndex: Int, toIndex: Int): List<E>\n}\n\n/**\n * A generic ordered collection of elements that supports adding and removing elements.\n * @param E the type of elements contained in the list. The mutable list is invariant in its element type.\n */\npublic interface MutableList<E> : List<E>, MutableCollection<E> {\n    // Modification Operations\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n    /**\n     * Adds all of the elements of the specified collection to the end of this list.\n     *\n     * The elements are appended in the order they appear in the [elements] collection.\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    override fun addAll(elements: Collection<E>): Boolean\n\n    /**\n     * Inserts all of the elements of the specified collection [elements] into this list at the specified [index].\n     *\n     * @return `true` if the list was changed as the result of the operation.\n     */\n    public fun addAll(index: Int, elements: Collection<E>): Boolean\n\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n\n    // Positional Access Operations\n    /**\n     * Replaces the element at the specified position in this list with the specified element.\n     *\n     * @return the element previously at the specified position.\n     */\n    public operator fun set(index: Int, element: E): E\n\n    /**\n     * Inserts an element into the list at the specified [index].\n     */\n    public fun add(index: Int, element: E): Unit\n\n    /**\n     * Removes an element at the specified [index] from the list.\n     *\n     * @return the element that has been removed.\n     */\n    public fun removeAt(index: Int): E\n\n    // List Iterators\n    override fun listIterator(): MutableListIterator<E>\n\n    override fun listIterator(index: Int): MutableListIterator<E>\n\n    // View\n    override fun subList(fromIndex: Int, toIndex: Int): MutableList<E>\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements.\n * Methods in this interface support only read-only access to the set;\n * read/write access is supported through the [MutableSet] interface.\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\npublic interface Set<out E> : Collection<E> {\n    // Query Operations\n\n    override val size: Int\n    override fun isEmpty(): Boolean\n    override fun contains(element: @UnsafeVariance E): Boolean\n    override fun iterator(): Iterator<E>\n\n    // Bulk Operations\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean\n}\n\n/**\n * A generic unordered collection of elements that does not support duplicate elements, and supports\n * adding and removing elements.\n * @param E the type of elements contained in the set. The mutable set is invariant in its element type.\n */\npublic interface MutableSet<E> : Set<E>, MutableCollection<E> {\n    // Query Operations\n    override fun iterator(): MutableIterator<E>\n\n    // Modification Operations\n\n    /**\n     * Adds the specified element to the set.\n     *\n     * @return `true` if the element has been added, `false` if the element is already contained in the set.\n     */\n    override fun add(element: E): Boolean\n\n    override fun remove(element: E): Boolean\n\n    // Bulk Modification Operations\n\n    override fun addAll(elements: Collection<E>): Boolean\n    override fun removeAll(elements: Collection<E>): Boolean\n    override fun retainAll(elements: Collection<E>): Boolean\n    override fun clear(): Unit\n}\n\n/**\n * A collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * Methods in this interface support only read-only access to the map; read-write access is supported through\n * the [MutableMap] interface.\n * @param K the type of map keys. The map is invariant in its key type, as it\n *          can accept key as a parameter (of [containsKey] for example) and return it in [keys] set.\n * @param V the type of map values. The map is covariant in its value type.\n */\npublic interface Map<K, out V> {\n    // Query Operations\n    /**\n     * Returns the number of key/value pairs in the map.\n     */\n    public val size: Int\n\n    /**\n     * Returns `true` if the map is empty (contains no elements), `false` otherwise.\n     */\n    public fun isEmpty(): Boolean\n\n    /**\n     * Returns `true` if the map contains the specified [key].\n     */\n    public fun containsKey(key: K): Boolean\n\n    /**\n     * Returns `true` if the map maps one or more keys to the specified [value].\n     */\n    public fun containsValue(value: @UnsafeVariance V): Boolean\n\n    /**\n     * Returns the value corresponding to the given [key], or `null` if such a key is not present in the map.\n     */\n    public operator fun get(key: K): V?\n\n    /**\n     * Returns the value corresponding to the given [key], or [defaultValue] if such a key is not present in the map.\n     *\n     * @since JDK 1.8\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun getOrDefault(key: K, defaultValue: @UnsafeVariance V): V {\n        // See default implementation in JDK sources\n        throw NotImplementedError()\n    }\n\n    // Views\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     */\n    public val keys: Set<K>\n\n    /**\n     * Returns a read-only [Collection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    public val values: Collection<V>\n\n    /**\n     * Returns a read-only [Set] of all key/value pairs in this map.\n     */\n    public val entries: Set<Map.Entry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [Map].\n     */\n    public interface Entry<out K, out V> {\n        /**\n         * Returns the key of this key/value pair.\n         */\n        public val key: K\n\n        /**\n         * Returns the value of this key/value pair.\n         */\n        public val value: V\n    }\n}\n\n/**\n * A modifiable collection that holds pairs of objects (keys and values) and supports efficiently retrieving\n * the value corresponding to each key. Map keys are unique; the map holds only one value for each key.\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The mutable map is invariant in its value type.\n */\npublic interface MutableMap<K, V> : Map<K, V> {\n    // Modification Operations\n    /**\n     * Associates the specified [value] with the specified [key] in the map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun put(key: K, value: V): V?\n\n    /**\n     * Removes the specified key and its corresponding value from this map.\n     *\n     * @return the previous value associated with the key, or `null` if the key was not present in the map.\n     */\n    public fun remove(key: K): V?\n\n    /**\n     * Removes the entry for the specified key only if it is mapped to the specified value.\n     *\n     * @return true if entry was removed\n     */\n    @SinceKotlin(\"1.1\")\n    @PlatformDependent\n    public fun remove(key: K, value: V): Boolean {\n        // See default implementation in JDK sources\n        return true\n    }\n\n    // Bulk Modification Operations\n    /**\n     * Updates this map with key/value pairs from the specified map [from].\n     */\n    public fun putAll(from: Map<out K, V>): Unit\n\n    /**\n     * Removes all elements from this map.\n     */\n    public fun clear(): Unit\n\n    // Views\n    /**\n     * Returns a [MutableSet] of all keys in this map.\n     */\n    override val keys: MutableSet<K>\n\n    /**\n     * Returns a [MutableCollection] of all values in this map. Note that this collection may contain duplicate values.\n     */\n    override val values: MutableCollection<V>\n\n    /**\n     * Returns a [MutableSet] of all key/value pairs in this map.\n     */\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n\n    /**\n     * Represents a key/value pair held by a [MutableMap].\n     */\n    public interface MutableEntry<K, V> : Map.Entry<K, V> {\n        /**\n         * Changes the value associated with the key of this entry.\n         *\n         * @return the previous value corresponding to the key.\n         */\n        public fun setValue(newValue: V): V\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@JsName(\"arrayIterator\")\ninternal fun arrayIterator(array: dynamic, type: String?) = when (type) {\n    null -> {\n        val arr: Array<dynamic> = array\n        object : Iterator<dynamic> {\n            var index = 0\n            override fun hasNext() = index < arr.size\n            override fun next() = if (index < arr.size) arr[index++] else throw NoSuchElementException(\"$index\")\n        }\n    }\n    \"BooleanArray\" -> booleanArrayIterator(array)\n    \"ByteArray\" -> byteArrayIterator(array)\n    \"ShortArray\" -> shortArrayIterator(array)\n    \"CharArray\" -> charArrayIterator(array)\n    \"IntArray\" -> intArrayIterator(array)\n    \"LongArray\" -> longArrayIterator(array)\n    \"FloatArray\" -> floatArrayIterator(array)\n    \"DoubleArray\" -> doubleArrayIterator(array)\n    else -> throw IllegalStateException(\"Unsupported type argument for arrayIterator: $type\")\n}\n\n@JsName(\"booleanArrayIterator\")\ninternal fun booleanArrayIterator(array: BooleanArray) = object : BooleanIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextBoolean() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"byteArrayIterator\")\ninternal fun byteArrayIterator(array: ByteArray) = object : ByteIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextByte() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"shortArrayIterator\")\ninternal fun shortArrayIterator(array: ShortArray) = object : ShortIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextShort() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"charArrayIterator\")\ninternal fun charArrayIterator(array: CharArray) = object : CharIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextChar() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"intArrayIterator\")\ninternal fun intArrayIterator(array: IntArray) = object : IntIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextInt() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"floatArrayIterator\")\ninternal fun floatArrayIterator(array: FloatArray) = object : FloatIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextFloat() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"doubleArrayIterator\")\ninternal fun doubleArrayIterator(array: DoubleArray) = object : DoubleIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextDouble() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"longArrayIterator\")\ninternal fun longArrayIterator(array: LongArray) = object : LongIterator() {\n    var index = 0\n    override fun hasNext() = index < array.size\n    override fun nextLong() = if (index < array.size) array[index++] else throw NoSuchElementException(\"$index\")\n}\n\n@JsName(\"PropertyMetadata\")\ninternal class PropertyMetadata(@JsName(\"callableName\") val name: String)\n\n@JsName(\"noWhenBranchMatched\")\ninternal fun noWhenBranchMatched(): Nothing = throw NoWhenBranchMatchedException()\n\n@JsName(\"subSequence\")\ninternal fun subSequence(c: CharSequence, startIndex: Int, endIndex: Int): CharSequence {\n    if (c is String) {\n        return c.substring(startIndex, endIndex)\n    } else {\n        return c.asDynamic().`subSequence_vux9f0$`(startIndex, endIndex)\n    }\n}\n\n@JsName(\"captureStack\")\ninternal fun captureStack(@Suppress(\"UNUSED_PARAMETER\") baseClass: JsClass<in Throwable>, instance: Throwable) {\n    if (js(\"Error\").captureStackTrace) {\n        // Using uncropped stack traces due to KT-37563.\n        // Precise stack traces are implemented in JS IR compiler and stdlib\n        js(\"Error\").captureStackTrace(instance);\n    } else {\n        instance.asDynamic().stack = js(\"new Error()\").stack;\n    }\n}\n\n@JsName(\"newThrowable\")\ninternal fun newThrowable(message: String?, cause: Throwable?): Throwable {\n    val throwable = js(\"new Error()\")\n    throwable.message = if (jsTypeOf(message) == \"undefined\") {\n        if (cause != null) cause.toString() else null\n    } else {\n        message\n    }\n    throwable.cause = cause\n    throwable.name = \"Throwable\"\n    return throwable\n}\n\n@JsName(\"BoxedChar\")\ninternal class BoxedChar(val c: Int) : Comparable<Int> {\n    override fun equals(other: Any?): Boolean {\n        return other is BoxedChar && c == other.c\n    }\n\n    override fun hashCode(): Int {\n        return c\n    }\n\n    override fun toString(): String {\n        return js(\"this.c\").unsafeCast<Char>().toString()\n    }\n\n    override fun compareTo(other: Int): Int {\n        return js(\"this.c - other\").unsafeCast<Int>()\n    }\n\n    @JsName(\"valueOf\")\n    public fun valueOf(): Int {\n        return c\n    }\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun <T> concat(args: Array<T>): T {\n    val typed = js(\"Array\")(args.size)\n    for (i in args.indices) {\n        val arr = args[i]\n        if (arr !is Array<*>) {\n            typed[i] = js(\"[]\").slice.call(arr)\n        } else {\n            typed[i] = arr\n        }\n    }\n    return js(\"[]\").concat.apply(js(\"[]\"), typed);\n}\n\n/** Concat regular Array's and TypedArray's into an Array.\n */\n@PublishedApi\n@JsName(\"arrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> arrayConcat(a: T, b: T): T {\n    return concat(js(\"arguments\"))\n}\n\n/** Concat primitive arrays. Main use: prepare vararg arguments.\n *  For compatibility with 1.1.0 the arguments may be a mixture of Array's and TypedArray's.\n *\n *  If the first argument is TypedArray (Byte-, Short-, Char-, Int-, Float-, and DoubleArray) returns a TypedArray, otherwise an Array.\n *  If the first argument has the $type$ property (Boolean-, Char-, and LongArray) copy its value to result.$type$.\n *  If the first argument is a regular Array without the $type$ property default to arrayConcat.\n */\n@PublishedApi\n@JsName(\"primitiveArrayConcat\")\n@Suppress(\"UNUSED_PARAMETER\")\ninternal fun <T> primitiveArrayConcat(a: T, b: T): T {\n    val args: Array<T> = js(\"arguments\")\n    if (a is Array<*> && a.asDynamic().`$type$` === undefined) {\n        return concat(args)\n    } else {\n        var size = 0\n        for (i in args.indices) {\n            size += args[i].asDynamic().length as Int\n        }\n        val result = js(\"new a.constructor(size)\")\n        kotlin.copyArrayType(a, result)\n        size = 0\n        for (i in args.indices) {\n            val arr = args[i].asDynamic()\n            for (j in 0 until arr.length) {\n                result[size++] = arr[j]\n            }\n        }\n        return result\n    }\n}\n\n@JsName(\"booleanArrayOf\")\ninternal fun booleanArrayOf() = withType(\"BooleanArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"charArrayOf\")\ninternal fun charArrayOf() = withType(\"CharArray\", js(\"new Uint16Array(arguments)\"))\n\n@JsName(\"longArrayOf\")\ninternal fun longArrayOf() = withType(\"LongArray\", js(\"[].slice.call(arguments)\"))\n\n@JsName(\"withType\")\n@kotlin.internal.InlineOnly\ninternal inline fun withType(type: String, array: dynamic): dynamic {\n    array.`$type$` = type\n    return array\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@SinceKotlin(\"1.3\")\n@JsName(\"CoroutineImpl\")\ninternal abstract class CoroutineImpl(private val resultContinuation: Continuation<Any?>) : Continuation<Any?> {\n    protected var state = 0\n    protected var exceptionState = 0\n    protected var result: Any? = null\n    protected var exception: Throwable? = null\n    protected var finallyPath: Array<Int>? = null\n\n    public override val context: CoroutineContext = resultContinuation.context\n\n    private var intercepted_: Continuation<Any?>? = null\n\n    public fun intercepted(): Continuation<Any?> =\n        intercepted_\n            ?: (context[ContinuationInterceptor]?.interceptContinuation(this) ?: this)\n                .also { intercepted_ = it }\n\n    override fun resumeWith(result: Result<Any?>) {\n        var current = this\n        var currentResult: Any? = result.getOrNull()\n        var currentException: Throwable? = result.exceptionOrNull()\n\n        // This loop unrolls recursion in current.resumeWith(param) to make saner and shorter stack traces on resume\n        while (true) {\n            with(current) {\n                val completion = resultContinuation\n\n                // Set result and exception fields in the current continuation\n                if (currentException == null) {\n                    this.result = currentResult\n                } else {\n                    state = exceptionState\n                    exception = currentException\n                }\n\n                try {\n                    val outcome = doResume()\n                    if (outcome === COROUTINE_SUSPENDED) return\n                    currentResult = outcome\n                    currentException = null\n                } catch (exception: dynamic) { // Catch all exceptions\n                    currentResult = null\n                    currentException = exception.unsafeCast<Throwable>()\n                }\n\n                releaseIntercepted() // this state machine instance is terminating\n\n                if (completion is CoroutineImpl) {\n                    // unrolling recursion via loop\n                    current = completion\n                } else {\n                    // top-level completion reached -- invoke and return\n                    currentException?.let {\n                        completion.resumeWithException(it)\n                    } ?: completion.resume(currentResult)\n                    return\n                }\n            }\n        }\n    }\n\n    private fun releaseIntercepted() {\n        val intercepted = intercepted_\n        if (intercepted != null && intercepted !== this) {\n            context[ContinuationInterceptor]!!.releaseInterceptedContinuation(intercepted)\n        }\n        this.intercepted_ = CompletedContinuation // just in case\n    }\n\n    protected abstract fun doResume(): Any?\n}\n\ninternal object CompletedContinuation : Continuation<Any?> {\n    override val context: CoroutineContext\n        get() = error(\"This continuation is already complete\")\n\n    override fun resumeWith(result: Result<Any?>) {\n        error(\"This continuation is already complete\")\n    }\n\n    override fun toString(): String = \"This continuation is already complete\"\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#run).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#with).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#apply).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#also).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#let).\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n *\n * For detailed usage information see the documentation for [scope functions](https://kotlinlang.org/docs/reference/scope-functions.html#takeif-and-takeunless).\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNCHECKED_CAST\", \"RedundantVisibilityModifier\")\n\npackage kotlin\n\nimport kotlin.contracts.*\nimport kotlin.internal.InlineOnly\nimport kotlin.jvm.JvmField\nimport kotlin.jvm.JvmInline\nimport kotlin.jvm.JvmName\n\n/**\n * A discriminated union that encapsulates a successful outcome with a value of type [T]\n * or a failure with an arbitrary [Throwable] exception.\n */\n@SinceKotlin(\"1.3\")\n@JvmInline\npublic value class Result<out T> @PublishedApi internal constructor(\n    @PublishedApi\n    internal val value: Any?\n) : Serializable {\n    // discovery\n\n    /**\n     * Returns `true` if this instance represents a successful outcome.\n     * In this case [isFailure] returns `false`.\n     */\n    public val isSuccess: Boolean get() = value !is Failure\n\n    /**\n     * Returns `true` if this instance represents a failed outcome.\n     * In this case [isSuccess] returns `false`.\n     */\n    public val isFailure: Boolean get() = value is Failure\n\n    // value & exception retrieval\n\n    /**\n     * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or `null`\n     * if it is [failure][Result.isFailure].\n     *\n     * This function is a shorthand for `getOrElse { null }` (see [getOrElse]) or\n     * `fold(onSuccess = { it }, onFailure = { null })` (see [fold]).\n     */\n    @InlineOnly\n    public inline fun getOrNull(): T? =\n        when {\n            isFailure -> null\n            else -> value as T\n        }\n\n    /**\n     * Returns the encapsulated [Throwable] exception if this instance represents [failure][isFailure] or `null`\n     * if it is [success][isSuccess].\n     *\n     * This function is a shorthand for `fold(onSuccess = { null }, onFailure = { it })` (see [fold]).\n     */\n    public fun exceptionOrNull(): Throwable? =\n        when (value) {\n            is Failure -> value.exception\n            else -> null\n        }\n\n    /**\n     * Returns a string `Success(v)` if this instance represents [success][Result.isSuccess]\n     * where `v` is a string representation of the value or a string `Failure(x)` if\n     * it is [failure][isFailure] where `x` is a string representation of the exception.\n     */\n    public override fun toString(): String =\n        when (value) {\n            is Failure -> value.toString() // \"Failure($exception)\"\n            else -> \"Success($value)\"\n        }\n\n    // companion with constructors\n\n    /**\n     * Companion object for [Result] class that contains its constructor functions\n     * [success] and [failure].\n     */\n    public companion object {\n        /**\n         * Returns an instance that encapsulates the given [value] as successful value.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"success\")\n        public inline fun <T> success(value: T): Result<T> =\n            Result(value)\n\n        /**\n         * Returns an instance that encapsulates the given [Throwable] [exception] as failure.\n         */\n        @Suppress(\"INAPPLICABLE_JVM_NAME\")\n        @InlineOnly\n        @JvmName(\"failure\")\n        public inline fun <T> failure(exception: Throwable): Result<T> =\n            Result(createFailure(exception))\n    }\n\n    internal class Failure(\n        @JvmField\n        val exception: Throwable\n    ) : Serializable {\n        override fun equals(other: Any?): Boolean = other is Failure && exception == other.exception\n        override fun hashCode(): Int = exception.hashCode()\n        override fun toString(): String = \"Failure($exception)\"\n    }\n}\n\n/**\n * Creates an instance of internal marker [Result.Failure] class to\n * make sure that this class is not exposed in ABI.\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun createFailure(exception: Throwable): Any =\n    Result.Failure(exception)\n\n/**\n * Throws exception if the result is failure. This internal function minimizes\n * inlined bytecode for [getOrThrow] and makes sure that in the future we can\n * add some exception-augmenting logic here (if needed).\n */\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal fun Result<*>.throwOnFailure() {\n    if (value is Result.Failure) throw value.exception\n}\n\n/**\n * Calls the specified function [block] and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R> runCatching(block: () -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its encapsulated result if invocation was successful,\n * catching any [Throwable] exception that was thrown from the [block] function execution and encapsulating it as a failure.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T, R> T.runCatching(block: T.() -> R): Result<R> {\n    return try {\n        Result.success(block())\n    } catch (e: Throwable) {\n        Result.failure(e)\n    }\n}\n\n// -- extensions ---\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or throws the encapsulated [Throwable] exception\n * if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { throw it }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.getOrThrow(): T {\n    throwOnFailure()\n    return value as T\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onFailure] function.\n *\n * This function is a shorthand for `fold(onSuccess = { it }, onFailure = onFailure)` (see [fold]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrElse(onFailure: (exception: Throwable) -> R): R {\n    contract {\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> value as T\n        else -> onFailure(exception)\n    }\n}\n\n/**\n * Returns the encapsulated value if this instance represents [success][Result.isSuccess] or the\n * [defaultValue] if it is [failure][Result.isFailure].\n *\n * This function is a shorthand for `getOrElse { defaultValue }` (see [getOrElse]).\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.getOrDefault(defaultValue: R): R {\n    if (isFailure) return defaultValue\n    return value as T\n}\n\n/**\n * Returns the result of [onSuccess] for the encapsulated value if this instance represents [success][Result.isSuccess]\n * or the result of [onFailure] function for the encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [onSuccess] or by [onFailure] function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.fold(\n    onSuccess: (value: T) -> R,\n    onFailure: (exception: Throwable) -> R\n): R {\n    contract {\n        callsInPlace(onSuccess, InvocationKind.AT_MOST_ONCE)\n        callsInPlace(onFailure, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> onSuccess(value as T)\n        else -> onFailure(exception)\n    }\n}\n\n// transformation\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [mapCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.map(transform: (value: T) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when {\n        isSuccess -> Result.success(transform(value as T))\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated value\n * if this instance represents [success][Result.isSuccess] or the\n * original encapsulated [Throwable] exception if it is [failure][Result.isFailure].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [map] for an alternative that rethrows exceptions from `transform` function.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T> Result<T>.mapCatching(transform: (value: T) -> R): Result<R> {\n    return when {\n        isSuccess -> runCatching { transform(value as T) }\n        else -> Result(value)\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * Note, that this function rethrows any [Throwable] exception thrown by [transform] function.\n * See [recoverCatching] for an alternative that encapsulates exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recover(transform: (exception: Throwable) -> R): Result<R> {\n    contract {\n        callsInPlace(transform, InvocationKind.AT_MOST_ONCE)\n    }\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> Result.success(transform(exception))\n    }\n}\n\n/**\n * Returns the encapsulated result of the given [transform] function applied to the encapsulated [Throwable] exception\n * if this instance represents [failure][Result.isFailure] or the\n * original encapsulated value if it is [success][Result.isSuccess].\n *\n * This function catches any [Throwable] exception thrown by [transform] function and encapsulates it as a failure.\n * See [recover] for an alternative that rethrows exceptions.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <R, T : R> Result<T>.recoverCatching(transform: (exception: Throwable) -> R): Result<R> {\n    return when (val exception = exceptionOrNull()) {\n        null -> this\n        else -> runCatching { transform(exception) }\n    }\n}\n\n// \"peek\" onto value/exception and pipe\n\n/**\n * Performs the given [action] on the encapsulated [Throwable] exception if this instance represents [failure][Result.isFailure].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onFailure(action: (exception: Throwable) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    exceptionOrNull()?.let { action(it) }\n    return this\n}\n\n/**\n * Performs the given [action] on the encapsulated value if this instance represents [success][Result.isSuccess].\n * Returns the original `Result` unchanged.\n */\n@InlineOnly\n@SinceKotlin(\"1.3\")\npublic inline fun <T> Result<T>.onSuccess(action: (value: T) -> Unit): Result<T> {\n    contract {\n        callsInPlace(action, InvocationKind.AT_MOST_ONCE)\n    }\n    if (isSuccess) action(value as T)\n    return this\n}\n\n// -------------------\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Interface representing a continuation after a suspension point that returns a value of type `T`.\n */\n@SinceKotlin(\"1.3\")\npublic interface Continuation<in T> {\n    /**\n     * The context of the coroutine that corresponds to this continuation.\n     */\n    public val context: CoroutineContext\n\n    /**\n     * Resumes the execution of the corresponding coroutine passing a successful or failed [result] as the\n     * return value of the last suspension point.\n     */\n    public fun resumeWith(result: Result<T>)\n}\n\n/**\n * Classes and interfaces marked with this annotation are restricted when used as receivers for extension\n * `suspend` functions. These `suspend` extensions can only invoke other member or extension `suspend` functions on this particular\n * receiver and are restricted from calling arbitrary suspension functions.\n */\n@SinceKotlin(\"1.3\")\n@Target(AnnotationTarget.CLASS)\n@Retention(AnnotationRetention.BINARY)\npublic annotation class RestrictsSuspension\n\n/**\n * Resumes the execution of the corresponding coroutine passing [value] as the return value of the last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resume(value: T): Unit =\n    resumeWith(Result.success(value))\n\n/**\n * Resumes the execution of the corresponding coroutine so that the [exception] is re-thrown right after the\n * last suspension point.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation<T>.resumeWithException(exception: Throwable): Unit =\n    resumeWith(Result.failure(exception))\n\n\n/**\n * Creates a [Continuation] instance with the given [context] and implementation of [resumeWith] method.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun <T> Continuation(\n    context: CoroutineContext,\n    crossinline resumeWith: (Result<T>) -> Unit\n): Continuation<T> =\n    object : Continuation<T> {\n        override val context: CoroutineContext\n            get() = context\n\n        override fun resumeWith(result: Result<T>) =\n            resumeWith(result)\n    }\n\n/**\n * Creates a coroutine without a receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).createCoroutine(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Creates a coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n * Subsequent invocation of any resume function on the resulting continuation will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).createCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    SafeContinuation(createCoroutineUnintercepted(receiver, completion).intercepted(), COROUTINE_SUSPENDED)\n\n/**\n * Starts a coroutine without a receiver and with result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <T> (suspend () -> T).startCoroutine(\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(completion).intercepted().resume(Unit)\n}\n\n/**\n * Starts a coroutine with receiver type [R] and result type [T].\n * This function creates and starts a new, fresh instance of suspendable computation every time it is invoked.\n * The [completion] continuation is invoked when the coroutine completes with a result or an exception.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"UNCHECKED_CAST\")\npublic fun <R, T> (suspend R.() -> T).startCoroutine(\n    receiver: R,\n    completion: Continuation<T>\n) {\n    createCoroutineUnintercepted(receiver, completion).intercepted().resume(Unit)\n}\n\n/**\n * Obtains the current continuation instance inside suspend functions and suspends\n * the currently running coroutine.\n *\n * In this function both [Continuation.resume] and [Continuation.resumeWithException] can be used either synchronously in\n * the same stack-frame where the suspension function is run or asynchronously later in the same thread or\n * from a different thread of execution. Subsequent invocation of any resume function will produce an [IllegalStateException].\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic suspend inline fun <T> suspendCoroutine(crossinline block: (Continuation<T>) -> Unit): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    return suspendCoroutineUninterceptedOrReturn { c: Continuation<T> ->\n        val safe = SafeContinuation(c.intercepted())\n        block(safe)\n        safe.getOrThrow()\n    }\n}\n\n/**\n * Returns the context of the current coroutine.\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"WRONG_MODIFIER_TARGET\")\n@InlineOnly\npublic suspend inline val coroutineContext: CoroutineContext\n    get() {\n        throw NotImplementedError(\"Implemented as intrinsic\")\n    }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Starts an unintercepted coroutine without a receiver and with result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <T> (suspend () -> T).startCoroutineUninterceptedOrReturn(\n    completion: Continuation<T>\n): Any? = this.asDynamic()(completion, false)\n\n/**\n * Starts an unintercepted coroutine with receiver type [R] and result type [T] and executes it until its first suspension.\n * Returns the result of the coroutine or throws its exception if it does not suspend or [COROUTINE_SUSPENDED] if it suspends.\n * In the latter case, the [completion] continuation is invoked when the coroutine completes with a result or an exception.\n *\n * The coroutine is started directly in the invoker's thread without going through the [ContinuationInterceptor] that might\n * be present in the completion's [CoroutineContext]. It is the invoker's responsibility to ensure that a proper invocation\n * context is established.\n *\n * This function is designed to be used from inside of [suspendCoroutineUninterceptedOrReturn] to resume the execution of the suspended\n * coroutine using a reference to the suspending function.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic actual inline fun <R, T> (suspend R.() -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, completion, false)\n\n@InlineOnly\ninternal actual inline fun <R, P, T> (suspend R.(P) -> T).startCoroutineUninterceptedOrReturn(\n    receiver: R,\n    param: P,\n    completion: Continuation<T>\n): Any? = this.asDynamic()(receiver, param, completion, false)\n\n/**\n * Creates unintercepted coroutine without receiver and with result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> (suspend () -> T).createCoroutineUnintercepted(\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 2) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(completion)\n        }\n    }\n\n/**\n * Creates unintercepted coroutine with receiver type [R] and result type [T].\n * This function creates a new, fresh instance of suspendable computation every time it is invoked.\n *\n * To start executing the created coroutine, invoke `resume(Unit)` on the returned [Continuation] instance.\n * The [completion] continuation is invoked when coroutine completes with result or exception.\n *\n * This function returns unintercepted continuation.\n * Invocation of `resume(Unit)` starts coroutine immediately in the invoker's call stack without going through the\n * [ContinuationInterceptor] that might be present in the completion's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * Note that [completion] of this function may get invoked in an arbitrary context.\n *\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n * Invocation of `resume(Unit)` on intercepted continuation guarantees that execution of\n * both the coroutine and [completion] happens in the invocation context established by\n * [ContinuationInterceptor].\n *\n * Repeated invocation of any resume function on the resulting continuation corrupts the\n * state machine of the coroutine and may result in arbitrary behaviour or exception.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <R, T> (suspend R.() -> T).createCoroutineUnintercepted(\n    receiver: R,\n    completion: Continuation<T>\n): Continuation<Unit> =\n    // Kotlin/JS suspend lambdas have an extra parameter `suspended`\n    if (this.asDynamic().length == 3) {\n        // When `suspended` is true the continuation is created, but not executed\n        this.asDynamic()(receiver, completion, true)\n    } else {\n        createCoroutineFromSuspendFunction(completion) {\n            this.asDynamic()(receiver, completion)\n        }\n    }\n\n/**\n * Intercepts this continuation with [ContinuationInterceptor].\n *\n * This function shall be used on the immediate result of [createCoroutineUnintercepted] or [suspendCoroutineUninterceptedOrReturn],\n * in which case it checks for [ContinuationInterceptor] in the continuation's [context][Continuation.context],\n * invokes [ContinuationInterceptor.interceptContinuation], caches and returns the result.\n *\n * If this function is invoked on other [Continuation] instances it returns `this` continuation unchanged.\n */\n@SinceKotlin(\"1.3\")\npublic actual fun <T> Continuation<T>.intercepted(): Continuation<T> =\n    (this as? CoroutineImpl)?.intercepted() ?: this\n\n\nprivate inline fun <T> createCoroutineFromSuspendFunction(\n    completion: Continuation<T>,\n    crossinline block: () -> Any?\n): Continuation<Unit> {\n    @Suppress(\"UNCHECKED_CAST\")\n    return object : CoroutineImpl(completion as Continuation<Any?>) {\n        override fun doResume(): Any? {\n            exception?.let { throw it }\n            return block()\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n// NOTE: Do not author your exceptions as they are written in this file, instead use this template:\n/*\npublic open class MyException : Exception {\n    constructor() : super()\n    constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}\n*/\n\n\n// TODO: remove primary constructors, make all secondary KT-22055\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Error actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n@Suppress(\"USELESS_ELVIS_RIGHT_IS_NULL\")\npublic actual open class Exception actual constructor(message: String?, cause: Throwable?) : Throwable(message, cause ?: null) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class RuntimeException actual constructor(message: String?, cause: Throwable?) : Exception(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalArgumentException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IllegalStateException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class IndexOutOfBoundsException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ConcurrentModificationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UnsupportedOperationException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\n\npublic actual open class NumberFormatException actual constructor(message: String?) : IllegalArgumentException(message) {\n    actual constructor() : this(null)\n}\n\n\npublic actual open class NullPointerException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class ClassCastException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class AssertionError\n@SinceKotlin(\"1.4\")\nconstructor(message: String?, cause: Throwable?) : Error(message, cause) {\n    actual constructor() : this(null)\n    constructor(message: String?) : this(message, null)\n    actual constructor(message: Any?) : this(message.toString(), message as? Throwable)\n}\n\npublic actual open class NoSuchElementException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\n@SinceKotlin(\"1.3\")\npublic actual open class ArithmeticException actual constructor(message: String?) : RuntimeException(message) {\n    actual constructor() : this(null)\n}\n\npublic actual open class NoWhenBranchMatchedException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n\npublic actual open class UninitializedPropertyAccessException actual constructor(message: String?, cause: Throwable?) : RuntimeException(message, cause) {\n    actual constructor() : this(null, null)\n    actual constructor(message: String?) : this(message, null)\n    actual constructor(cause: Throwable?) : this(undefined, cause)\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\nimport kotlin.ranges.contains\nimport kotlin.ranges.reversed\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun <T> Array<out T>.elementAt(index: Int): T {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ByteArray.elementAt(index: Int): Byte {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun ShortArray.elementAt(index: Int): Short {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun IntArray.elementAt(index: Int): Int {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun LongArray.elementAt(index: Int): Long {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun FloatArray.elementAt(index: Int): Float {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun DoubleArray.elementAt(index: Int): Double {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun BooleanArray.elementAt(index: Int): Boolean {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this array.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic actual fun CharArray.elementAt(index: Int): Char {\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, size: $size}\") }\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char {\n            AbstractList.checkElementIndex(index, size)\n            return this@asList[index]\n        }\n        override fun indexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.indexOf(element)\n        }\n        override fun lastIndexOf(element: Char): Int {\n            @Suppress(\"USELESS_CAST\")\n            if ((element as Any?) !is Char) return -1\n            return this@asList.lastIndexOf(element)\n        }\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    return this.contentDeepEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The specified arrays are also considered deeply equal if both are `null`.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>?.contentDeepEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    return this.contentDeepHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>?.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.LowPriorityInOverloadResolution\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    return this.contentDeepToString()\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>?.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    return this.contentEquals(other)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>?.contentEquals(other: Array<out T>?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray?.contentEquals(other: ByteArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray?.contentEquals(other: ShortArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray?.contentEquals(other: IntArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray?.contentEquals(other: LongArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray?.contentEquals(other: FloatArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray?.contentEquals(other: DoubleArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray?.contentEquals(other: BooleanArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray?.contentEquals(other: CharArray?): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentHashCode(): Int {\n    return this.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray?.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ByteArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun ShortArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun IntArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun LongArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun FloatArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun DoubleArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun BooleanArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@SinceKotlin(\"1.1\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\npublic actual fun CharArray.contentToString(): String {\n    return this.contentToString()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ByteArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun ShortArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun IntArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun LongArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun FloatArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.4\")\n@library(\"arrayToString\")\npublic actual fun CharArray?.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive) to copy.\n * @param toIndex the end of the range (exclusive) to copy.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<T>.fill(element: T, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.fill(element: Byte, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.fill(element: Short, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.fill(element: Int, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.fill(element: Long, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.fill(element: Float, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.fill(element: Double, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun BooleanArray.fill(element: Boolean, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Fills this array or its subrange with the specified [element] value.\n * \n * @param fromIndex the start of the range (inclusive) to fill, 0 by default.\n * @param toIndex the end of the range (exclusive) to fill, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.fill(element: Char, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    nativeFill(element, fromIndex, toIndex);\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\npublic actual fun LongArray.sort(): Unit {\n    @Suppress(\"DEPRECATION\")\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n * \n * @sample samples.collections.Arrays.Sorting.sortArray\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @sample samples.collections.Arrays.Sorting.sortArrayOfComparable\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\n@Deprecated(\"Use sortWith instead\", ReplaceWith(\"this.sortWith(Comparator(comparison))\"))\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArrayOfComparable\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T : Comparable<T>> Array<out T>.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ByteArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ByteArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun ShortArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<ShortArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun IntArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<IntArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun LongArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this.unsafeCast<Array<Long>>(), fromIndex, toIndex, naturalOrder())\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun FloatArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<FloatArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun DoubleArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<DoubleArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts a range in the array in-place.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n * \n * @sample samples.collections.Arrays.Sorting.sortRangeOfArray\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharArray.sort(fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    val subarray = this.asDynamic().subarray(fromIndex, toIndex).unsafeCast<CharArray>()\n    subarray.sort()\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@Deprecated(\"Use other sorting functions from the Standard Library\")\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    nativeSort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Sorts a range in the array in-place with the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n * \n * @param fromIndex the start of the range (inclusive) to sort, 0 by default.\n * @param toIndex the end of the range (exclusive) to sort, size of this array by default.\n * \n * @throws IndexOutOfBoundsException if [fromIndex] is less than zero or [toIndex] is greater than the size of this array.\n * @throws IllegalArgumentException if [fromIndex] is greater than [toIndex].\n */\n@SinceKotlin(\"1.4\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>, fromIndex: Int = 0, toIndex: Int = size): Unit {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    sortArrayWith(this, fromIndex, toIndex, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.comparisons\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\n\n/**\n * Returns the greater of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T): T {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte): Byte {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short): Short {\n    return maxOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int): Int {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun maxOf(a: Long, b: Long): Long {\n    return if (a >= b) a else b\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float): Float {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double): Double {\n    return JsMath.max(a, b)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, b: T, c: T): T {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.max(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Long, b: Long, c: Long): Long {\n    return maxOf(a, maxOf(b, c))\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun maxOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.max(a, b, c)\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If there are multiple equal maximal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> maxOf(a: T, vararg other: T): T {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Byte, vararg other: Byte): Byte {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Short, vararg other: Short): Short {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Int, vararg other: Int): Int {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Long, vararg other: Long): Long {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Float, vararg other: Float): Float {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the greater of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun maxOf(a: Double, vararg other: Double): Double {\n    var max = a\n    for (e in other) max = maxOf(max, e)\n    return max\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If values are equal, returns the first one.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T): T {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte): Byte {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short): Short {\n    return minOf(a.toInt(), b.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int): Int {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.1\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun minOf(a: Long, b: Long): Long {\n    return if (a <= b) a else b\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float): Float {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of two values.\n * \n * If either value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double): Double {\n    return JsMath.min(a, b)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.1\")\npublic actual fun <T : Comparable<T>> minOf(a: T, b: T, c: T): T {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Byte, b: Byte, c: Byte): Byte {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Byte>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Short, b: Short, c: Short): Short {\n    return JsMath.min(a.toInt(), b.toInt(), c.toInt()).unsafeCast<Short>()\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Int, b: Int, c: Int): Int {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Long, b: Long, c: Long): Long {\n    return minOf(a, minOf(b, c))\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Float, b: Float, c: Float): Float {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of three values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic actual inline fun minOf(a: Double, b: Double, c: Double): Double {\n    return JsMath.min(a, b, c)\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If there are multiple equal minimal values, returns the first of them.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun <T : Comparable<T>> minOf(a: T, vararg other: T): T {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Byte, vararg other: Byte): Byte {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Short, vararg other: Short): Short {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Int, vararg other: Int): Int {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Long, vararg other: Long): Long {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Float, vararg other: Float): Float {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n/**\n * Returns the smaller of the given values.\n * \n * If any value is `NaN`, returns `NaN`.\n */\n@SinceKotlin(\"1.4\")\npublic actual fun minOf(a: Double, vararg other: Double): Double {\n    var min = a\n    for (e in other) min = minOf(min, e)\n    return min\n}\n\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 37 ranges totally\nprivate object Digit {\n    internal val rangeStart = intArrayOf(\n        0x0030, 0x0660, 0x06f0, 0x07c0, 0x0966, 0x09e6, 0x0a66, 0x0ae6, 0x0b66, 0x0be6, 0x0c66, 0x0ce6, 0x0d66, 0x0de6, 0x0e50, 0x0ed0, 0x0f20, 0x1040, 0x1090, 0x17e0, \n        0x1810, 0x1946, 0x19d0, 0x1a80, 0x1a90, 0x1b50, 0x1bb0, 0x1c40, 0x1c50, 0xa620, 0xa8d0, 0xa900, 0xa9d0, 0xa9f0, 0xaa50, 0xabf0, 0xff10, \n    )\n}\n\n/**\n * Returns the index of the largest element in [array] smaller or equal to the specified [needle],\n * or -1 if [needle] is smaller than the smallest element in [array].\n */\ninternal fun binarySearchRange(array: IntArray, needle: Int): Int {\n    var bottom = 0\n    var top = array.size - 1\n    var middle = -1\n    var value = 0\n    while (bottom <= top) {\n        middle = (bottom + top) / 2\n        value = array[middle]\n        if (needle > value)\n            bottom = middle + 1\n        else if (needle == value)\n            return middle\n        else\n            top = middle - 1\n    }\n    return middle - (if (needle < value) 1 else 0)\n}\n\n/**\n * Returns an integer from 0..9 indicating the digit this character represents,\n * or -1 if this character is not a digit.\n */\ninternal fun Char.digitToIntImpl(): Int {\n    val ch = this.code\n    val index = binarySearchRange(Digit.rangeStart, ch)\n    val diff = ch - Digit.rangeStart[index]\n    return if (diff < 10) diff else -1\n}\n\n/**\n * Returns `true` if this character is a digit.\n */\ninternal fun Char.isDigitImpl(): Boolean {\n    return digitToIntImpl() >= 0\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Creates a Char with the specified [code], or throws an exception if the [code] is out of `Char.MIN_VALUE.code..Char.MAX_VALUE.code`.\n *\n * If the program that calls this function is written in a way that only valid [code] is passed as the argument,\n * using the overload that takes a [UShort] argument is preferable (`Char(intValue.toUShort())`).\n * That overload doesn't check validity of the argument, and may improve program performance when the function is called routinely inside a loop.\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic inline fun Char(code: Int): Char {\n    if (code < Char.MIN_VALUE.code || code > Char.MAX_VALUE.code) {\n        throw IllegalArgumentException(\"Invalid Char code: $code\")\n    }\n    return code.toChar()\n}\n\n/**\n * Creates a Char with the specified [code].\n *\n * @sample samples.text.Chars.charFromCode\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"NO_ACTUAL_FOR_EXPECT\")\npublic expect fun Char(code: UShort): Char\n\n/**\n * Returns the code of this Char.\n *\n * Code of a Char is the value it was constructed with, and the UTF-16 code unit corresponding to this Char.\n *\n * @sample samples.text.Chars.code\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\n@Suppress(\"DEPRECATION\")\n@kotlin.internal.IntrinsicConstEvaluation\npublic inline val Char.code: Int get() = this.toInt()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateUnicodeData.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\n// 9 ranges totally\n/**\n * Returns `true` if this character is a whitespace.\n */\ninternal fun Char.isWhitespaceImpl(): Boolean {\n    val ch = this.code\n    return ch in 0x0009..0x000d\n            || ch in 0x001c..0x0020\n            || ch == 0x00a0\n            || ch > 0x1000 && (\n                ch == 0x1680\n                || ch in 0x2000..0x200a\n                || ch == 0x2028\n                || ch == 0x2029\n                || ch == 0x202f\n                || ch == 0x205f\n                || ch == 0x3000\n            )\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\nimport kotlin.comparisons.naturalOrder\nimport kotlin.random.Random\nimport kotlin.js.arrayBufferIsView\n\n/**\n * Returns the array if it's not `null`, or an empty array otherwise.\n * @sample samples.collections.Arrays.Usage.arrayOrEmpty\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Array<out T>?.orEmpty(): Array<out T> = this ?: emptyArray<T>()\n\n/**\n * Returns a *typed* array containing all of the elements of this collection.\n *\n * Allocates an array of runtime type `T` having its size equal to the size of this collection\n * and populates the array with the elements of this collection.\n * @sample samples.collections.Collections.Collections.collectionToTypedArray\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun <T> Collection<T>.toTypedArray(): Array<T> = copyToArray(this)\n\n@JsName(\"copyToArray\")\n@PublishedApi\ninternal fun <T> copyToArray(collection: Collection<T>): Array<T> {\n    return if (collection.asDynamic().toArray !== undefined)\n        collection.asDynamic().toArray().unsafeCast<Array<T>>()\n    else\n        copyToArrayImpl(collection).unsafeCast<Array<T>>()\n}\n\n@JsName(\"copyToArrayImpl\")\ninternal actual fun copyToArrayImpl(collection: Collection<*>): Array<Any?> {\n    val array = emptyArray<Any?>()\n    val iterator = collection.iterator()\n    while (iterator.hasNext())\n        array.asDynamic().push(iterator.next())\n    return array\n}\n\n@JsName(\"copyToExistingArrayImpl\")\ninternal actual fun <T> copyToArrayImpl(collection: Collection<*>, array: Array<T>): Array<T> {\n    if (array.size < collection.size)\n        return copyToArrayImpl(collection).unsafeCast<Array<T>>()\n\n    val iterator = collection.iterator()\n    var index = 0\n    while (iterator.hasNext()) {\n        array[index++] = iterator.next().unsafeCast<T>()\n    }\n    if (index < array.size) {\n        array[index] = null.unsafeCast<T>()\n    }\n    return array\n}\n\n\n/**\n * Returns an immutable list containing only the specified object [element].\n */\npublic fun <T> listOf(element: T): List<T> = arrayListOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(builderAction: MutableList<E>.() -> Unit): List<E> {\n    return ArrayList<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildListInternal(capacity: Int, builderAction: MutableList<E>.() -> Unit): List<E> {\n    checkBuilderCapacity(capacity)\n    return ArrayList<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable set containing only the specified object [element].\n */\npublic fun <T> setOf(element: T): Set<T> = hashSetOf(element)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <E> buildSetInternal(capacity: Int, builderAction: MutableSet<E>.() -> Unit): Set<E> {\n    return LinkedHashSet<E>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Returns an immutable map, mapping only the specified key to the\n * specified value.\n */\npublic fun <K, V> mapOf(pair: Pair<K, V>): Map<K, V> = hashMapOf(pair)\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>().apply(builderAction).build()\n}\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\ninternal actual inline fun <K, V> buildMapInternal(capacity: Int, builderAction: MutableMap<K, V>.() -> Unit): Map<K, V> {\n    return LinkedHashMap<K, V>(capacity).apply(builderAction).build()\n}\n\n\n/**\n * Fills the list with the provided [value].\n *\n * Each element in the list gets replaced with the [value].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.fill(value: T): Unit {\n    for (index in 0..lastIndex) {\n        this[index] = value\n    }\n}\n\n/**\n * Randomly shuffles elements in this list.\n *\n * See: https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle#The_modern_algorithm\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> MutableList<T>.shuffle(): Unit = shuffle(Random)\n\n/**\n * Returns a new list with the elements of this list randomly shuffled.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun <T> Iterable<T>.shuffled(): List<T> = toMutableList().apply { shuffle() }\n\n/**\n * Sorts elements in the list in-place according to their natural sort order.\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * @sample samples.collections.Collections.Sorting.sortMutableList\n */\npublic actual fun <T : Comparable<T>> MutableList<T>.sort(): Unit {\n    collectionsSort(this, naturalOrder())\n}\n\n/**\n * Sorts elements in the list in-place according to the order specified with [comparator].\n *\n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n *\n * @sample samples.collections.Collections.Sorting.sortMutableListWith\n */\npublic actual fun <T> MutableList<T>.sortWith(comparator: Comparator<in T>): Unit {\n    collectionsSort(this, comparator)\n}\n\nprivate fun <T> collectionsSort(list: MutableList<T>, comparator: Comparator<in T>) {\n    if (list.size <= 1) return\n\n    val array = copyToArray(list)\n    sortArrayWith(array, comparator)\n\n    for (i in 0 until array.size) {\n        list[i] = array[i]\n    }\n}\n\ninternal actual fun <T> arrayOfNulls(reference: Array<T>, size: Int): Array<T> {\n    return arrayOfNulls<Any>(size).unsafeCast<Array<T>>()\n}\n\n@SinceKotlin(\"1.3\")\n@PublishedApi\n@JsName(\"arrayCopy\")\ninternal fun <T> arrayCopy(source: Array<out T>, destination: Array<in T>, destinationOffset: Int, startIndex: Int, endIndex: Int) {\n    AbstractList.checkRangeIndexes(startIndex, endIndex, source.size)\n    val rangeSize = endIndex - startIndex\n    AbstractList.checkRangeIndexes(destinationOffset, destinationOffset + rangeSize, destination.size)\n\n    if (arrayBufferIsView(destination) && arrayBufferIsView(source)) {\n        val subrange = source.asDynamic().subarray(startIndex, endIndex)\n        destination.asDynamic().set(subrange, destinationOffset)\n    } else {\n        if (source !== destination || destinationOffset <= startIndex) {\n            for (index in 0 until rangeSize) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        } else {\n            for (index in rangeSize - 1 downTo 0) {\n                destination[destinationOffset + index] = source[startIndex + index]\n            }\n        }\n    }\n}\n\n// no singleton map implementation in js, return map as is\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<K, V>.toSingletonMapOrSelf(): Map<K, V> = this\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <K, V> Map<out K, V>.toSingletonMap(): Map<K, V> = this.toMutableMap()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal actual inline fun <T> Array<out T>.copyToArrayOfAny(isVarargs: Boolean): Array<out Any?> =\n    if (isVarargs)\n    // no need to copy vararg array in JS\n        this\n    else\n        this.copyOf()\n\n\n\n@PublishedApi\ninternal actual fun checkIndexOverflow(index: Int): Int {\n    if (index < 0) {\n        throwIndexOverflow()\n    }\n    return index\n}\n\n@PublishedApi\ninternal actual fun checkCountOverflow(count: Int): Int {\n    if (count < 0) {\n        throwCountOverflow()\n    }\n    return count\n}\n\n\n/**\n * JS map and set implementations do not make use of capacities or load factors.\n */\n@PublishedApi\ninternal actual fun mapCapacity(expectedSize: Int) = expectedSize\n\n/**\n * Checks a collection builder function capacity argument.\n * In JS no validation is made in Map/Set constructor yet.\n */\n@SinceKotlin(\"1.3\")\n@PublishedApi\ninternal fun checkBuilderCapacity(capacity: Int) {\n    require(capacity >= 0) { \"capacity must be non-negative.\" }\n}\n\ninternal actual fun brittleContainsOptimizationEnabled(): Boolean = false","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:Suppress(\"UNUSED_PARAMETER\", \"NOTHING_TO_INLINE\")\n\npackage kotlin\n\n/**\n * Returns an empty array of the specified type [T].\n */\npublic inline fun <T> emptyArray(): Array<T> = js(\"[]\")\n\n@library\npublic fun <T> arrayOf(vararg elements: T): Array<T> = definedExternally\n\n@library\npublic fun doubleArrayOf(vararg elements: Double): DoubleArray = definedExternally\n\n@library\npublic fun floatArrayOf(vararg elements: Float): FloatArray = definedExternally\n\n@library\npublic fun longArrayOf(vararg elements: Long): LongArray = definedExternally\n\n@library\npublic fun intArrayOf(vararg elements: Int): IntArray = definedExternally\n\n@library\npublic fun charArrayOf(vararg elements: Char): CharArray = definedExternally\n\n@library\npublic fun shortArrayOf(vararg elements: Short): ShortArray = definedExternally\n\n@library\npublic fun byteArrayOf(vararg elements: Byte): ByteArray = definedExternally\n\n@library\npublic fun booleanArrayOf(vararg elements: Boolean): BooleanArray = definedExternally\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n */\npublic actual fun <T> lazy(initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [mode] parameter is ignored. */\npublic actual fun <T> lazy(mode: LazyThreadSafetyMode, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n/**\n * Creates a new instance of the [Lazy] that uses the specified initialization function [initializer].\n *\n * The [lock] parameter is ignored.\n */\npublic actual fun <T> lazy(lock: Any?, initializer: () -> T): Lazy<T> = UnsafeLazyImpl(initializer)\n\n\ninternal fun fillFrom(src: dynamic, dst: dynamic): dynamic {\n    val srcLen: Int = src.length\n    val dstLen: Int = dst.length\n    var index: Int = 0\n    while (index < srcLen && index < dstLen) dst[index] = src[index++]\n    return dst\n}\n\n\ninternal fun arrayCopyResize(source: dynamic, newSize: Int, defaultValue: Any?): dynamic {\n    val result = source.slice(0, newSize)\n    copyArrayType(source, result)\n    var index: Int = source.length\n    if (newSize > index) {\n        result.length = newSize\n        while (index < newSize) result[index++] = defaultValue\n    }\n    return result\n}\n\ninternal fun <T> arrayPlusCollection(array: dynamic, collection: Collection<T>): dynamic {\n    val result = array.slice()\n    result.length += collection.size\n    copyArrayType(array, result)\n    var index: Int = array.length\n    for (element in collection) result[index++] = element\n    return result\n}\n\ninternal fun <T> fillFromCollection(dst: dynamic, startIndex: Int, collection: Collection<T>): dynamic {\n    var index = startIndex\n    for (element in collection) dst[index++] = element\n    return dst\n}\n\ninternal inline fun copyArrayType(from: dynamic, to: dynamic) {\n    if (from.`$type$` !== undefined) {\n        to.`$type$` = from.`$type$`\n    }\n}\n\ninternal inline fun jsIsType(obj: dynamic, jsClass: dynamic) = js(\"Kotlin\").isType(obj, jsClass)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableCollection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is invariant in its element type.\n */\npublic actual abstract class AbstractMutableCollection<E> protected actual constructor() : AbstractCollection<E>(), MutableCollection<E> {\n\n    actual abstract override fun add(element: E): Boolean\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        val iterator = iterator()\n        while (iterator.hasNext()) {\n            if (iterator.next() == element) {\n                iterator.remove()\n                return true\n            }\n        }\n        return false\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        var modified = false\n        for (element in elements) {\n            if (add(element)) modified = true\n        }\n        return modified\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return (this as MutableIterable<E>).removeAll { it !in elements }\n    }\n\n    actual override fun clear(): Unit {\n        checkIsMutable()\n        val iterator = this.iterator()\n        while (iterator.hasNext()) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    @Deprecated(\"Provided so that subclasses inherit this function\", level = DeprecationLevel.HIDDEN)\n    @JsName(\"toJSON\")\n    protected fun toJSON(): Any = this.toArray()\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable collection.\n     * Mutable collections that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit { }\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableList] interface.\n *\n * @param E the type of elements contained in the list. The list is invariant in its element type.\n */\npublic actual abstract class AbstractMutableList<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableList<E> {\n    protected var modCount: Int = 0\n\n    abstract override fun add(index: Int, element: E): Unit\n    abstract override fun removeAt(index: Int): E\n    abstract override fun set(index: Int, element: E): E\n\n    /**\n     * Adds the specified element to the end of this list.\n     *\n     * @return `true` because the list is always modified as the result of this operation.\n     */\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        add(size, element)\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        AbstractList.checkPositionIndex(index, size)\n\n        checkIsMutable()\n        var _index = index\n        var changed = false\n        for (e in elements) {\n            add(_index++, e)\n            changed = true\n        }\n        return changed\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        removeRange(0, size)\n    }\n\n    actual override fun removeAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it in elements }\n    }\n\n    actual override fun retainAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        return removeAll { it !in elements }\n    }\n\n\n    actual override fun iterator(): MutableIterator<E> = IteratorImpl()\n\n    actual override fun contains(element: E): Boolean = indexOf(element) >= 0\n\n    actual override fun indexOf(element: E): Int {\n        for (index in 0..lastIndex) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun lastIndexOf(element: E): Int {\n        for (index in lastIndex downTo 0) {\n            if (get(index) == element) {\n                return index\n            }\n        }\n        return -1\n    }\n\n    actual override fun listIterator(): MutableListIterator<E> = listIterator(0)\n    actual override fun listIterator(index: Int): MutableListIterator<E> = ListIteratorImpl(index)\n\n\n    actual override fun subList(fromIndex: Int, toIndex: Int): MutableList<E> = SubList(this, fromIndex, toIndex)\n\n    /**\n     * Removes the range of elements from this list starting from [fromIndex] and ending with but not including [toIndex].\n     */\n    protected open fun removeRange(fromIndex: Int, toIndex: Int) {\n        val iterator = listIterator(fromIndex)\n        repeat(toIndex - fromIndex) {\n            iterator.next()\n            iterator.remove()\n        }\n    }\n\n    /**\n     * Compares this list with another list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return AbstractList.orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = AbstractList.orderedHashCode(this)\n\n\n    private open inner class IteratorImpl : MutableIterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n        /** the index of the item that was returned on the previous call to [next]`()`\n         * or [ListIterator.previous]`()` (for `ListIterator`),\n         * -1 if no such item exists\n         */\n        protected var last = -1\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            last = index++\n            return get(last)\n        }\n\n        override fun remove() {\n            check(last != -1) { \"Call next() or previous() before removing element from the iterator.\" }\n\n            removeAt(last)\n            index = last\n            last = -1\n        }\n    }\n\n    /**\n     * Implementation of `MutableListIterator` for abstract lists.\n     */\n    private inner class ListIteratorImpl(index: Int) : IteratorImpl(), MutableListIterator<E> {\n\n        init {\n            AbstractList.checkPositionIndex(index, this@AbstractMutableList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n\n            last = --index\n            return get(last)\n        }\n\n        override fun previousIndex(): Int = index - 1\n\n        override fun add(element: E) {\n            add(index, element)\n            index++\n            last = -1\n        }\n\n        override fun set(element: E) {\n            check(last != -1) { \"Call next() or previous() before updating element value with the iterator.\" }\n            set(last, element)\n        }\n    }\n\n    private class SubList<E>(private val list: AbstractMutableList<E>, private val fromIndex: Int, toIndex: Int) : AbstractMutableList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            AbstractList.checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun add(index: Int, element: E) {\n            AbstractList.checkPositionIndex(index, _size)\n\n            list.add(fromIndex + index, element)\n            _size++\n        }\n\n        override fun get(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override fun removeAt(index: Int): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            val result = list.removeAt(fromIndex + index)\n            _size--\n            return result\n        }\n\n        override fun set(index: Int, element: E): E {\n            AbstractList.checkElementIndex(index, _size)\n\n            return list.set(fromIndex + index, element)\n        }\n\n        override val size: Int get() = _size\n\n        internal override fun checkIsMutable(): Unit = list.checkIsMutable()\n    }\n\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableMap] interface.\n *\n * The implementor is required to implement [entries] property, which should return mutable set of map entries, and [put] function.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is invariant in its value type.\n */\npublic actual abstract class AbstractMutableMap<K, V> protected actual constructor() : AbstractMap<K, V>(), MutableMap<K, V> {\n\n    /**\n     * A mutable [Map.Entry] shared by several [Map] implementations.\n     */\n    internal open class SimpleEntry<K, V>(override val key: K, value: V) : MutableMap.MutableEntry<K, V> {\n        constructor(entry: Map.Entry<K, V>) : this(entry.key, entry.value)\n\n        private var _value = value\n\n        override val value: V get() = _value\n\n        override fun setValue(newValue: V): V {\n            // Should check if the map containing this entry is mutable.\n            // However, to not increase entry memory footprint it might be worthwhile not to check it here and\n            // force subclasses that implement `build()` (freezing) operation to implement their own `MutableEntry`.\n//            this@AbstractMutableMap.checkIsMutable()\n            val oldValue = this._value\n            this._value = newValue\n            return oldValue\n        }\n\n        override fun hashCode(): Int = entryHashCode(this)\n        override fun toString(): String = entryToString(this)\n        override fun equals(other: Any?): Boolean = entryEquals(this, other)\n\n    }\n\n    // intermediate abstract class to workaround KT-43321\n    internal abstract class AbstractEntrySet<E : Map.Entry<K, V>, K, V> : AbstractMutableSet<E>() {\n        final override fun contains(element: E): Boolean = containsEntry(element)\n        abstract fun containsEntry(element: Map.Entry<K, V>): Boolean\n        final override fun remove(element: E): Boolean = removeEntry(element)\n        abstract fun removeEntry(element: Map.Entry<K, V>): Boolean\n    }\n\n    actual override fun clear() {\n        entries.clear()\n    }\n\n    private var _keys: MutableSet<K>? = null\n    actual override val keys: MutableSet<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractMutableSet<K>() {\n                    override fun add(element: K): Boolean = throw UnsupportedOperationException(\"Add is not supported on keys\")\n                    override fun clear() {\n                        this@AbstractMutableMap.clear()\n                    }\n\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): MutableIterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override fun remove(element: K): Boolean {\n                        checkIsMutable()\n                        if (containsKey(element)) {\n                            this@AbstractMutableMap.remove(element)\n                            return true\n                        }\n                        return false\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _keys!!\n        }\n\n    actual abstract override fun put(key: K, value: V): V?\n\n    actual override fun putAll(from: Map<out K, V>) {\n        checkIsMutable()\n        for ((key, value) in from) {\n            put(key, value)\n        }\n    }\n\n    private var _values: MutableCollection<V>? = null\n    actual override val values: MutableCollection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractMutableCollection<V>() {\n                    override fun add(element: V): Boolean = throw UnsupportedOperationException(\"Add is not supported on values\")\n                    override fun clear() = this@AbstractMutableMap.clear()\n\n                    override operator fun contains(element: V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): MutableIterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : MutableIterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                            override fun remove() = entryIterator.remove()\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMutableMap.size\n\n                    override fun checkIsMutable(): Unit = this@AbstractMutableMap.checkIsMutable()\n                }\n            }\n            return _values!!\n        }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n        val iter = entries.iterator()\n        while (iter.hasNext()) {\n            val entry = iter.next()\n            val k = entry.key\n            if (key == k) {\n                val value = entry.value\n                iter.remove()\n                return value\n            }\n        }\n        return null\n    }\n\n\n    /**\n     * This method is called every time when a mutating method is called on this mutable map.\n     * Mutable maps that are built (frozen) must throw `UnsupportedOperationException`.\n     */\n    internal open fun checkIsMutable(): Unit {}\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the [MutableSet] interface.\n *\n * @param E the type of elements contained in the set. The set is invariant in its element type.\n */\npublic actual abstract class AbstractMutableSet<E> protected actual constructor() : AbstractMutableCollection<E>(), MutableSet<E> {\n\n    /**\n     * Compares this set with another set instance with the unordered structural equality.\n     *\n     * @return `true`, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return AbstractSet.setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = AbstractSet.unorderedHashCode(this)\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a [MutableList] implementation, which uses a resizable array as its backing storage.\n *\n * This implementation doesn't provide a way to manage capacity, as backing JS array is resizeable itself.\n * There is no speed advantage to pre-allocating array sizes in JavaScript, so this implementation does not include any of the\n * capacity and \"growth increment\" concepts.\n */\npublic actual open class ArrayList<E> internal constructor(private var array: Array<Any?>) : AbstractMutableList<E>(), MutableList<E>, RandomAccess {\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Creates an empty [ArrayList].\n     */\n    public actual constructor() : this(emptyArray()) {}\n\n    /**\n     * Creates an empty [ArrayList].\n     * @param initialCapacity initial capacity (ignored)\n     */\n    public actual constructor(initialCapacity: Int) : this(emptyArray()) {}\n\n    /**\n     * Creates an [ArrayList] filled from the [elements] collection.\n     */\n    public actual constructor(elements: Collection<E>) : this(elements.toTypedArray<Any?>()) {}\n\n    @PublishedApi\n    internal fun build(): List<E> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun trimToSize() {}\n\n    /** Does nothing in this ArrayList implementation. */\n    public actual fun ensureCapacity(minCapacity: Int) {}\n\n    actual override val size: Int get() = array.size\n    @Suppress(\"UNCHECKED_CAST\")\n    actual override fun get(index: Int): E = array[rangeCheck(index)] as E\n    actual override fun set(index: Int, element: E): E {\n        checkIsMutable()\n        rangeCheck(index)\n        @Suppress(\"UNCHECKED_CAST\")\n        return array[index].apply { array[index] = element } as E\n    }\n\n    actual override fun add(element: E): Boolean {\n        checkIsMutable()\n        array.asDynamic().push(element)\n        modCount++\n        return true\n    }\n\n    actual override fun add(index: Int, element: E): Unit {\n        checkIsMutable()\n        array.asDynamic().splice(insertionRangeCheck(index), 0, element)\n        modCount++\n    }\n\n    actual override fun addAll(elements: Collection<E>): Boolean {\n        checkIsMutable()\n        if (elements.isEmpty()) return false\n\n        array += elements.toTypedArray<Any?>()\n        modCount++\n        return true\n    }\n\n    actual override fun addAll(index: Int, elements: Collection<E>): Boolean {\n        checkIsMutable()\n        insertionRangeCheck(index)\n\n        if (index == size) return addAll(elements)\n        if (elements.isEmpty()) return false\n        when (index) {\n            size -> return addAll(elements)\n            0 -> array = elements.toTypedArray<Any?>() + array\n            else -> array = array.copyOfRange(0, index).asDynamic().concat(elements.toTypedArray<Any?>(), array.copyOfRange(index, size))\n        }\n\n        modCount++\n        return true\n    }\n\n    actual override fun removeAt(index: Int): E {\n        checkIsMutable()\n        rangeCheck(index)\n        modCount++\n        return if (index == lastIndex)\n            array.asDynamic().pop()\n        else\n            array.asDynamic().splice(index, 1)[0]\n    }\n\n    actual override fun remove(element: E): Boolean {\n        checkIsMutable()\n        for (index in array.indices) {\n            if (array[index] == element) {\n                array.asDynamic().splice(index, 1)\n                modCount++\n                return true\n            }\n        }\n        return false\n    }\n\n    override fun removeRange(fromIndex: Int, toIndex: Int) {\n        checkIsMutable()\n        modCount++\n        array.asDynamic().splice(fromIndex, toIndex - fromIndex)\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        array = emptyArray()\n        modCount++\n    }\n\n\n    actual override fun indexOf(element: E): Int = array.indexOf(element)\n\n    actual override fun lastIndexOf(element: E): Int = array.lastIndexOf(element)\n\n    override fun toString() = arrayToString(array)\n\n    @Suppress(\"UNCHECKED_CAST\")\n    override fun <T> toArray(array: Array<T>): Array<T> {\n        if (array.size < size) {\n            return toArray() as Array<T>\n        }\n\n        (this.array as Array<T>).copyInto(array)\n\n        if (array.size > size) {\n            array[size] = null as T // null-terminate\n        }\n\n        return array\n    }\n\n    override fun toArray(): Array<Any?> {\n        return js(\"[]\").slice.call(array)\n    }\n\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n\n    private fun rangeCheck(index: Int) = index.apply {\n        AbstractList.checkElementIndex(index, size)\n    }\n\n    private fun insertionRangeCheck(index: Int) = index.apply {\n        AbstractList.checkPositionIndex(index, size)\n    }\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparison: (T, T) -> Int) {\n    if (getStableSortingIsSupported()) {\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, Comparator(comparison))\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, comparator: Comparator<in T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> comparator.compare(a, b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, comparator)\n    }\n}\n\ninternal fun <T> sortArrayWith(array: Array<out T>, fromIndex: Int, toIndex: Int, comparator: Comparator<in T>) {\n    if (fromIndex < toIndex - 1) {\n        mergeSort(array.unsafeCast<Array<T>>(), fromIndex, toIndex - 1, comparator)\n    }\n}\n\ninternal fun <T : Comparable<T>> sortArray(array: Array<out T>) {\n    if (getStableSortingIsSupported()) {\n        val comparison = { a: T, b: T -> a.compareTo(b) }\n        array.asDynamic().sort(comparison)\n    } else {\n        mergeSort(array.unsafeCast<Array<T>>(), 0, array.lastIndex, naturalOrder())\n    }\n}\n\nprivate var _stableSortingIsSupported: Boolean? = null\nprivate fun getStableSortingIsSupported(): Boolean {\n    _stableSortingIsSupported?.let { return it }\n    _stableSortingIsSupported = false\n\n    val array = js(\"[]\").unsafeCast<Array<Int>>()\n    // known implementations may use stable sort for arrays of up to 512 elements\n    // so we create slightly more elements to test stability\n    for (index in 0 until 600) array.asDynamic().push(index)\n    val comparison = { a: Int, b: Int -> (a and 3) - (b and 3) }\n    array.asDynamic().sort(comparison)\n    for (index in 1 until array.size) {\n        val a = array[index - 1]\n        val b = array[index]\n        if ((a and 3) == (b and 3) && a >= b) return false\n    }\n    _stableSortingIsSupported = true\n    return true\n}\n\n\nprivate fun <T> mergeSort(array: Array<T>, start: Int, endInclusive: Int, comparator: Comparator<in T>) {\n    val buffer = arrayOfNulls<Any?>(array.size).unsafeCast<Array<T>>()\n    val result = mergeSort(array, buffer, start, endInclusive, comparator)\n    if (result !== array) {\n        for (i in start..endInclusive) array[i] = result[i]\n    }\n}\n\n// Both start and end are inclusive indices.\nprivate fun <T> mergeSort(array: Array<T>, buffer: Array<T>, start: Int, end: Int, comparator: Comparator<in T>): Array<T> {\n    if (start == end) {\n        return array\n    }\n\n    val median = (start + end) / 2\n    val left = mergeSort(array, buffer, start, median, comparator)\n    val right = mergeSort(array, buffer, median + 1, end, comparator)\n\n    val target = if (left === buffer) array else buffer\n\n    // Merge.\n    var leftIndex = start\n    var rightIndex = median + 1\n    for (i in start..end) {\n        when {\n            leftIndex <= median && rightIndex <= end -> {\n                val leftValue = left[leftIndex]\n                val rightValue = right[rightIndex]\n\n                if (comparator.compare(leftValue, rightValue) <= 0) {\n                    target[i] = leftValue\n                    leftIndex++\n                } else {\n                    target[i] = rightValue\n                    rightIndex++\n                }\n            }\n            leftIndex <= median -> {\n                target[i] = left[leftIndex]\n                leftIndex++\n            }\n            else /* rightIndex <= end */ -> {\n                target[i] = right[rightIndex]\n                rightIndex++\n                Unit  // TODO: Fix KT-31506\n            }\n        }\n    }\n\n    return target\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\ninternal interface EqualityComparator {\n    /**\n     * Subclasses must override to return a value indicating\n     * whether or not two keys or values are equal.\n     */\n    abstract fun equals(value1: Any?, value2: Any?): Boolean\n\n    /**\n     * Subclasses must override to return the hash code of a given key.\n     */\n    abstract fun getHashCode(value: Any?): Int\n\n\n    object HashCode : EqualityComparator {\n        override fun equals(value1: Any?, value2: Any?): Boolean = value1 == value2\n\n        override fun getHashCode(value: Any?): Int = value?.hashCode() ?: 0\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\npublic actual fun interface Comparator<T> {\n    @JsName(\"compare\")\n    public actual fun compare(a: T, b: T): Int\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractHashMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface.\n *\n * This implementation makes no guarantees regarding the order of enumeration of [keys], [values] and [entries] collections.\n */\n// Classes that extend HashMap and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashMap<K, V> : AbstractMutableMap<K, V>, MutableMap<K, V> {\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@HashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@HashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = internalMap.iterator()\n\n        override fun removeEntry(element: Map.Entry<K, V>): Boolean {\n            if (contains(element)) {\n                this@HashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@HashMap.size\n    }\n\n\n    /**\n     * Internal implementation of the map: either string-based or hashcode-based.\n     */\n    private val internalMap: InternalMap<K, V>\n\n    private val equality: EqualityComparator\n\n    internal constructor(internalMap: InternalMap<K, V>) : super() {\n        this.internalMap = internalMap\n        this.equality = internalMap.equality\n    }\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     */\n    actual constructor() : this(InternalHashCodeMap(EqualityComparator.HashCode))\n\n    /**\n     * Constructs an empty [HashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    actual constructor(initialCapacity: Int, loadFactor: Float) : this() {\n        // This implementation of HashMap has no need of load factors or capacities.\n        require(initialCapacity >= 0) { \"Negative initial capacity: $initialCapacity\" }\n        require(loadFactor >= 0) { \"Non-positive load factor: $loadFactor\" }\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n\n    /**\n     * Constructs an instance of [HashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) : this() {\n        this.putAll(original)\n    }\n\n    actual override fun clear() {\n        internalMap.clear()\n//        structureChanged(this)\n    }\n\n    actual override fun containsKey(key: K): Boolean = internalMap.contains(key)\n\n    actual override fun containsValue(value: V): Boolean = internalMap.any { equality.equals(it.value, value) }\n\n    private var _entries: MutableSet<MutableMap.MutableEntry<K, V>>? = null\n    actual override val entries: MutableSet<MutableMap.MutableEntry<K, V>>\n        get() {\n            if (_entries == null) {\n                _entries = createEntrySet()\n            }\n            return _entries!!\n        }\n\n    internal open fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = internalMap.get(key)\n\n    actual override fun put(key: K, value: V): V? = internalMap.put(key, value)\n\n    actual override fun remove(key: K): V? = internalMap.remove(key)\n\n    actual override val size: Int get() = internalMap.size\n\n}\n\n/**\n * Constructs the specialized implementation of [HashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> stringMapOf(vararg pairs: Pair<String, V>): HashMap<String, V> {\n    return HashMap<String, V>(InternalStringMap(EqualityComparator.HashCode)).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT HashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [HashMap] instance.\n */\n// Classes that extend HashSet and implement `build()` (freezing) operation\n// have to make sure mutating methods check `checkIsMutable`.\npublic actual open class HashSet<E> : AbstractMutableSet<E>, MutableSet<E> {\n\n    internal val map: HashMap<E, Any>\n\n    /**\n     * Constructs a new empty [HashSet].\n     */\n    actual constructor() {\n        map = HashMap<E, Any>()\n    }\n\n    /**\n     * Constructs a new [HashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) {\n        map = HashMap<E, Any>(elements.size)\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [HashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    actual constructor(initialCapacity: Int, loadFactor: Float) {\n        map = HashMap<E, Any>(initialCapacity, loadFactor)\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Protected constructor to specify the underlying map. This is used by\n     * LinkedHashSet.\n\n     * @param map underlying map to use.\n     */\n    internal constructor(map: HashMap<E, Any>) {\n        this.map = map\n    }\n\n    actual override fun add(element: E): Boolean {\n        val old = map.put(element, this)\n        return old == null\n    }\n\n    actual override fun clear() {\n        map.clear()\n    }\n\n//    public override fun clone(): Any {\n//        return HashSet<E>(this)\n//    }\n\n    actual override operator fun contains(element: E): Boolean = map.containsKey(element)\n\n    actual override fun isEmpty(): Boolean = map.isEmpty()\n\n    actual override fun iterator(): MutableIterator<E> = map.keys.iterator()\n\n    actual override fun remove(element: E): Boolean = map.remove(element) != null\n\n    actual override val size: Int get() = map.size\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [HashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun stringSetOf(vararg elements: String): HashSet<String> {\n    return HashSet(stringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalHashCodeMap\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\nimport kotlin.collections.AbstractMutableMap.SimpleEntry\n\n/**\n * A simple wrapper around JavaScriptObject to provide [java.util.Map]-like semantics for any\n * key type.\n *\n *\n * Implementation notes:\n *\n *\n * A key's hashCode is the index in backingMap which should contain that key. Since several keys may\n * have the same hash, each value in hashCodeMap is actually an array containing all entries whose\n * keys share the same hash.\n */\ninternal class InternalHashCodeMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n    override fun put(key: K, value: V): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode)\n        if (chainOrEntry == null) {\n            // This is a new chain, put it to the map.\n            backingMap[hashCode] = SimpleEntry(key, value)\n        } else {\n            if (chainOrEntry !is Array<*>) {\n                // It is an entry\n                val entry: SimpleEntry<K, V> = chainOrEntry\n                if (equality.equals(entry.key, key)) {\n                    return entry.setValue(value)\n                } else {\n                    backingMap[hashCode] = arrayOf(entry, SimpleEntry(key, value))\n                    size++\n                    return null\n                }\n            } else {\n                // Chain already exists, perhaps key also exists.\n                val chain: Array<MutableEntry<K, V>> = chainOrEntry\n                val entry = chain.findEntryInChain(key)\n                if (entry != null) {\n                    return entry.setValue(value)\n                }\n                chain.asDynamic().push(SimpleEntry(key, value))\n            }\n        }\n        size++\n//        structureChanged(host)\n        return null\n    }\n\n    override fun remove(key: K): V? {\n        val hashCode = equality.getHashCode(key)\n        val chainOrEntry = getChainOrEntryOrNull(hashCode) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                jsDeleteProperty(backingMap, hashCode)\n                size--\n                return entry.value\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            for (index in chain.indices) {\n                val entry = chain[index]\n                if (equality.equals(key, entry.key)) {\n                    if (chain.size == 1) {\n                        chain.asDynamic().length = 0\n                        // remove the whole array\n                        jsDeleteProperty(backingMap, hashCode)\n                    } else {\n                        // splice out the entry we're removing\n                        chain.asDynamic().splice(index, 1)\n                    }\n                    size--\n//                structureChanged(host)\n                    return entry.value\n                }\n            }\n        }\n        return null\n    }\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n    override fun contains(key: K): Boolean = getEntry(key) != null\n\n    override fun get(key: K): V? = getEntry(key)?.value\n\n    private fun getEntry(key: K): MutableEntry<K, V>? {\n        val chainOrEntry = getChainOrEntryOrNull(equality.getHashCode(key)) ?: return null\n        if (chainOrEntry !is Array<*>) {\n            val entry: MutableEntry<K, V> = chainOrEntry\n            if (equality.equals(entry.key, key)) {\n                return entry\n            } else {\n                return null\n            }\n        } else {\n            val chain: Array<MutableEntry<K, V>> = chainOrEntry\n            return chain.findEntryInChain(key)\n        }\n    }\n\n    private fun Array<MutableEntry<K, V>>.findEntryInChain(key: K): MutableEntry<K, V>? =\n        firstOrNull { entry -> equality.equals(entry.key, key) }\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n\n        return object : MutableIterator<MutableEntry<K, V>> {\n            var state = -1 // -1 not ready, 0 - ready, 1 - done\n\n            val keys: Array<String> = js(\"Object\").keys(backingMap)\n            var keyIndex = -1\n\n            var chainOrEntry: dynamic = null\n            var isChain = false\n            var itemIndex = -1\n            var lastEntry: MutableEntry<K, V>? = null\n\n            private fun computeNext(): Int {\n                if (chainOrEntry != null && isChain) {\n                    val chainSize: Int = chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>().size\n                    if (++itemIndex < chainSize)\n                        return 0\n                }\n\n                if (++keyIndex < keys.size) {\n                    chainOrEntry = backingMap[keys[keyIndex]]\n                    isChain = chainOrEntry is Array<*>\n                    itemIndex = 0\n                    return 0\n                } else {\n                    chainOrEntry = null\n                    return 1\n                }\n            }\n\n            override fun hasNext(): Boolean {\n                if (state == -1)\n                    state = computeNext()\n                return state == 0\n            }\n\n            override fun next(): MutableEntry<K, V> {\n                if (!hasNext()) throw NoSuchElementException()\n                val lastEntry = if (isChain) {\n                    chainOrEntry.unsafeCast<Array<MutableEntry<K, V>>>()[itemIndex]\n                } else {\n                    chainOrEntry.unsafeCast<MutableEntry<K, V>>()\n                }\n                this.lastEntry = lastEntry\n                state = -1\n                return lastEntry\n            }\n\n            override fun remove() {\n                checkNotNull(lastEntry)\n                this@InternalHashCodeMap.remove(lastEntry!!.key)\n                lastEntry = null\n                // the chain being iterated just got modified by InternalHashCodeMap.remove\n                itemIndex--\n            }\n        }\n    }\n\n    private fun getChainOrEntryOrNull(hashCode: Int): dynamic {\n        val chainOrEntry = backingMap[hashCode]\n        return if (chainOrEntry === undefined) null else chainOrEntry\n    }\n\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT InternalStringMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * A simple wrapper around JavaScript Map for key type is string.\n *\n * Though this map is instantiated only with K=String, the K type is not fixed to String statically,\n * because we want to have it erased to Any? in order not to generate type-safe override bridges for\n * [get], [contains], [remove] etc, if they ever are generated.\n */\ninternal class InternalStringMap<K, V>(override val equality: EqualityComparator) : InternalMap<K, V> {\n\n    private var backingMap: dynamic = createJsMap()\n    override var size: Int = 0\n        private set\n\n//    /**\n//     * A mod count to track 'value' replacements in map to ensure that the 'value' that we have in the\n//     * iterator entry is guaranteed to be still correct.\n//     * This is to optimize for the common scenario where the values are not modified during\n//     * iterations where the entries are never stale.\n//     */\n//    private var valueMod: Int = 0\n\n    override operator fun contains(key: K): Boolean {\n        if (key !is String) return false\n        return backingMap[key] !== undefined\n    }\n\n    override operator fun get(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        return if (value !== undefined) value.unsafeCast<V>() else null\n    }\n\n\n    override fun put(key: K, value: V): V? {\n        require(key is String)\n        val oldValue = backingMap[key]\n        backingMap[key] = value\n\n        if (oldValue === undefined) {\n            size++\n//            structureChanged(host)\n            return null\n        } else {\n//            valueMod++\n            return oldValue.unsafeCast<V>()\n        }\n    }\n\n    override fun remove(key: K): V? {\n        if (key !is String) return null\n        val value = backingMap[key]\n        if (value !== undefined) {\n            jsDeleteProperty(backingMap, key)\n            size--\n//            structureChanged(host)\n            return value.unsafeCast<V>()\n        } else {\n//            valueMod++\n            return null\n        }\n    }\n\n\n    override fun clear() {\n        backingMap = createJsMap()\n        size = 0\n    }\n\n\n    override fun iterator(): MutableIterator<MutableEntry<K, V>> {\n        return object : MutableIterator<MutableEntry<K, V>> {\n            private val keys: Array<String> = js(\"Object\").keys(backingMap)\n            private val iterator = keys.iterator()\n            private var lastKey: String? = null\n\n            override fun hasNext(): Boolean = iterator.hasNext()\n\n            override fun next(): MutableEntry<K, V> {\n                val key = iterator.next()\n                lastKey = key\n                @Suppress(\"UNCHECKED_CAST\")\n                return newMapEntry(key as K)\n            }\n\n            override fun remove() {\n                @Suppress(\"UNCHECKED_CAST\")\n                this@InternalStringMap.remove(checkNotNull(lastKey) as K)\n            }\n        }\n    }\n\n    private fun newMapEntry(key: K): MutableEntry<K, V> = object : MutableEntry<K, V> {\n        override val key: K get() = key\n        override val value: V get() = this@InternalStringMap[key].unsafeCast<V>()\n\n        override fun setValue(newValue: V): V = this@InternalStringMap.put(key, newValue).unsafeCast<V>()\n\n        override fun hashCode(): Int = AbstractMap.entryHashCode(this)\n        override fun toString(): String = AbstractMap.entryToString(this)\n        override fun equals(other: Any?): Boolean = AbstractMap.entryEquals(this, other)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT LinkedHashMap\n * Copyright 2008 Google Inc.\n */\npackage kotlin.collections\n\nimport kotlin.collections.MutableMap.MutableEntry\n\n/**\n * Hash table based implementation of the [MutableMap] interface, which additionally preserves the insertion order\n * of entries during the iteration.\n *\n * The insertion order is preserved by maintaining a doubly-linked list of all of its entries.\n */\npublic actual open class LinkedHashMap<K, V> : HashMap<K, V>, MutableMap<K, V> {\n\n    /**\n     * The entry we use includes next/prev pointers for a doubly-linked circular\n     * list with a head node. This reduces the special cases we have to deal with\n     * in the list operations.\n\n     * Note that we duplicate the key from the underlying hash map so we can find\n     * the eldest entry. The alternative would have been to modify HashMap so more\n     * of the code was directly usable here, but this would have added some\n     * overhead to HashMap, or to reimplement most of the HashMap code here with\n     * small modifications. Paying a small storage cost only if you use\n     * LinkedHashMap and minimizing code size seemed like a better tradeoff\n     */\n    private inner class ChainEntry<K, V>(key: K, value: V) : AbstractMutableMap.SimpleEntry<K, V>(key, value) {\n        internal var next: ChainEntry<K, V>? = null\n        internal var prev: ChainEntry<K, V>? = null\n\n        override fun setValue(newValue: V): V {\n            this@LinkedHashMap.checkIsMutable()\n            return super.setValue(newValue)\n        }\n    }\n\n    private inner class EntrySet : AbstractEntrySet<MutableEntry<K, V>, K, V>() {\n\n        private inner class EntryIterator : MutableIterator<MutableEntry<K, V>> {\n            // The last entry that was returned from this iterator.\n            private var last: ChainEntry<K, V>? = null\n\n            // The next entry to return from this iterator.\n            private var next: ChainEntry<K, V>? = null\n\n            init {\n                next = head\n//                recordLastKnownStructure(map, this)\n            }\n\n            override fun hasNext(): Boolean {\n                return next !== null\n            }\n\n            override fun next(): MutableEntry<K, V> {\n//                checkStructuralChange(map, this)\n                if (!hasNext()) throw NoSuchElementException()\n\n                val current = next!!\n                last = current\n                next = current.next.takeIf { it !== head }\n                return current\n            }\n\n            override fun remove() {\n                check(last != null)\n                this@EntrySet.checkIsMutable()\n//                checkStructuralChange(map, this)\n\n                last!!.remove()\n                map.remove(last!!.key)\n//                recordLastKnownStructure(map, this)\n                last = null\n            }\n        }\n\n        override fun add(element: MutableEntry<K, V>): Boolean = throw UnsupportedOperationException(\"Add is not supported on entries\")\n        override fun clear() {\n            this@LinkedHashMap.clear()\n        }\n\n        override fun containsEntry(element: Map.Entry<K, V>): Boolean = this@LinkedHashMap.containsEntry(element)\n\n        override operator fun iterator(): MutableIterator<MutableEntry<K, V>> = EntryIterator()\n\n        override fun removeEntry(element: Map.Entry<K, V>): Boolean {\n            checkIsMutable()\n            if (contains(element)) {\n                this@LinkedHashMap.remove(element.key)\n                return true\n            }\n            return false\n        }\n\n        override val size: Int get() = this@LinkedHashMap.size\n\n        override fun checkIsMutable(): Unit = this@LinkedHashMap.checkIsMutable()\n    }\n\n\n    /*\n   * The head of the insert order chain, which is a doubly-linked circular\n   * list.\n   *\n   * The most recently inserted node is at the end of the chain, ie.\n   * chain.prev.\n   */\n    private var head: ChainEntry<K, V>? = null\n\n    /**\n     * Add this node to the end of the chain.\n     */\n    private fun ChainEntry<K, V>.addToEnd() {\n        // This entry is not in the list.\n        check(next == null && prev == null)\n\n        val _head = head\n        if (_head == null) {\n            head = this\n            next = this\n            prev = this\n        } else {\n            // Chain is valid.\n            val _tail = checkNotNull(_head.prev)\n            // Update me.\n            prev = _tail\n            next = _head\n            // Update my new siblings: current head and old tail\n            _head.prev = this\n            _tail.next = this\n        }\n    }\n\n    /**\n     * Remove this node from the chain it is a part of.\n     */\n    private fun ChainEntry<K, V>.remove() {\n        if (this.next === this) {\n            // if this is single element, remove head\n            head = null\n        } else {\n            if (head === this) {\n                // if this is first element, move head to next\n                head = next\n            }\n            next!!.prev = prev\n            prev!!.next = next\n        }\n        next = null\n        prev = null\n    }\n\n    /*\n   * The hashmap that keeps track of our entries and the chain. Note that we\n   * duplicate the key here to eliminate changes to HashMap and minimize the\n   * code here, at the expense of additional space.\n   */\n    private val map: HashMap<K, ChainEntry<K, V>>\n\n    private var isReadOnly: Boolean = false\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     */\n    actual constructor() : super() {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    internal constructor(backingMap: HashMap<K, Any>) : super() {\n        @Suppress(\"UNCHECKED_CAST\") // expected to work due to erasure\n        map = backingMap as HashMap<K, ChainEntry<K, V>>\n    }\n\n    /**\n     * Constructs an empty [LinkedHashMap] instance.\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    actual constructor(initialCapacity: Int, loadFactor: Float) : super(initialCapacity, loadFactor) {\n        map = HashMap<K, ChainEntry<K, V>>()\n    }\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    /**\n     * Constructs an instance of [LinkedHashMap] filled with the contents of the specified [original] map.\n     */\n    actual constructor(original: Map<out K, V>) {\n        map = HashMap<K, ChainEntry<K, V>>()\n        this.putAll(original)\n    }\n\n    @PublishedApi\n    internal fun build(): Map<K, V> {\n        checkIsMutable()\n        isReadOnly = true\n        return this\n    }\n\n    actual override fun clear() {\n        checkIsMutable()\n        map.clear()\n        head = null\n    }\n\n\n//    override fun clone(): Any {\n//        return LinkedHashMap(this)\n//    }\n\n\n    actual override fun containsKey(key: K): Boolean = map.containsKey(key)\n\n    actual override fun containsValue(value: V): Boolean {\n        var node: ChainEntry<K, V> = head ?: return false\n        do {\n            if (node.value == value) {\n                return true\n            }\n            node = node.next!!\n        } while (node !== head)\n        return false\n    }\n\n\n    internal override fun createEntrySet(): MutableSet<MutableMap.MutableEntry<K, V>> = EntrySet()\n\n    actual override operator fun get(key: K): V? = map.get(key)?.value\n\n    actual override fun put(key: K, value: V): V? {\n        checkIsMutable()\n\n        val old = map.get(key)\n        if (old == null) {\n            val newEntry = ChainEntry(key, value)\n            map.put(key, newEntry)\n            newEntry.addToEnd()\n            return null\n        } else {\n            return old.setValue(value)\n        }\n    }\n\n    actual override fun remove(key: K): V? {\n        checkIsMutable()\n\n        val entry = map.remove(key)\n        if (entry != null) {\n            entry.remove()\n            return entry.value\n        }\n        return null\n    }\n\n    actual override val size: Int get() = map.size\n\n    internal override fun checkIsMutable() {\n        if (isReadOnly) throw UnsupportedOperationException()\n    }\n}\n\n/**\n * Constructs the specialized implementation of [LinkedHashMap] with [String] keys, which stores the keys as properties of\n * JS object without hashing them.\n */\npublic fun <V> linkedStringMapOf(vararg pairs: Pair<String, V>): LinkedHashMap<String, V> {\n    return LinkedHashMap<String, V>(stringMapOf<Any>()).apply { putAll(pairs) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n/*\n * Based on GWT LinkedHashSet\n * Copyright 2008 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * The implementation of the [MutableSet] interface, backed by a [LinkedHashMap] instance.\n *\n * This implementation preserves the insertion order of elements during the iteration.\n */\npublic actual open class LinkedHashSet<E> : HashSet<E>, MutableSet<E> {\n\n    internal constructor(map: LinkedHashMap<E, Any>) : super(map)\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     */\n    actual constructor() : super(LinkedHashMap<E, Any>())\n\n    /**\n     * Constructs a new [LinkedHashSet] filled with the elements of the specified collection.\n     */\n    actual constructor(elements: Collection<E>) : super(LinkedHashMap<E, Any>()) {\n        addAll(elements)\n    }\n\n    /**\n     * Constructs a new empty [LinkedHashSet].\n     *\n     * @param  initialCapacity the initial capacity (ignored)\n     * @param  loadFactor      the load factor (ignored)\n     *\n     * @throws IllegalArgumentException if the initial capacity or load factor are negative\n     */\n    actual constructor(initialCapacity: Int, loadFactor: Float) : super(LinkedHashMap<E, Any>(initialCapacity, loadFactor))\n\n    actual constructor(initialCapacity: Int) : this(initialCapacity, 0.0f)\n\n    @PublishedApi\n    internal fun build(): Set<E> {\n        (map as LinkedHashMap<E, Any>).build()\n        return this\n    }\n\n    internal override fun checkIsMutable(): Unit = map.checkIsMutable()\n\n//    public override fun clone(): Any {\n//        return LinkedHashSet(this)\n//    }\n\n}\n\n/**\n * Creates a new instance of the specialized implementation of [LinkedHashSet] with the specified [String] elements,\n * which elements the keys as properties of JS object without hashing them.\n */\npublic fun linkedStringSetOf(vararg elements: String): LinkedHashSet<String> {\n    return LinkedHashSet(linkedStringMapOf<Any>()).apply { addAll(elements) }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.io\n\ninternal abstract class BaseOutput {\n    open fun println() {\n        print(\"\\n\")\n    }\n\n    open fun println(message: Any?) {\n        print(message)\n        println()\n    }\n\n    abstract fun print(message: Any?)\n\n    open fun flush() {}\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"NodeJsOutput\")\ninternal class NodeJsOutput(val outputStream: dynamic) : BaseOutput() {\n    override fun print(message: Any?) {\n        // TODO: Using local variable because of bug in block decomposition lowering in IR backend\n        val messageString = String(message)\n        outputStream.write(messageString)\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"OutputToConsoleLog\")\ninternal class OutputToConsoleLog : BaseOutput() {\n    override fun print(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println(message: Any?) {\n        console.log(message)\n    }\n\n    override fun println() {\n        console.log(\"\")\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"BufferedOutput\")\ninternal open class BufferedOutput : BaseOutput() {\n    var buffer = \"\"\n\n    override fun print(message: Any?) {\n        buffer += String(message)\n    }\n\n    override fun flush() {\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it */\n@JsName(\"BufferedOutputToConsoleLog\")\ninternal class BufferedOutputToConsoleLog : BufferedOutput() {\n    override fun print(message: Any?) {\n        var s = String(message)\n        val i = s.nativeLastIndexOf(\"\\n\", 0)\n        if (i >= 0) {\n            buffer += s.substring(0, i)\n            flush()\n            s = s.substring(i + 1)\n        }\n        buffer += s\n    }\n\n    override fun flush() {\n        console.log(buffer)\n        buffer = \"\"\n    }\n}\n\n/** JsName used to make the declaration available outside of module to test it and use at try.kotl.in */\n@JsName(\"output\")\ninternal var output = run {\n    val isNode: Boolean = js(\"typeof process !== 'undefined' && process.versions && !!process.versions.node\")\n    if (isNode) NodeJsOutput(js(\"process.stdout\")) else BufferedOutputToConsoleLog()\n}\n\n@kotlin.internal.InlineOnly\nprivate inline fun String(value: Any?): String = js(\"String\")(value)\n\n/** Prints the line separator to the standard output stream. */\npublic actual fun println() {\n    output.println()\n}\n\n/** Prints the given [message] and the line separator to the standard output stream. */\npublic actual fun println(message: Any?) {\n    output.println(message)\n}\n\n/** Prints the given [message] to the standard output stream. */\npublic actual fun print(message: Any?) {\n    output.print(message)\n}\n\n@SinceKotlin(\"1.6\")\npublic actual fun readln(): String = throw UnsupportedOperationException(\"readln is not supported in Kotlin/JS\")\n\n@SinceKotlin(\"1.6\")\npublic actual fun readlnOrNull(): String? = throw UnsupportedOperationException(\"readlnOrNull is not supported in Kotlin/JS\")","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.intrinsics.CoroutineSingletons.*\nimport kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal actual class SafeContinuation<in T>\ninternal actual constructor(\n    private val delegate: Continuation<T>,\n    initialResult: Any?\n) : Continuation<T> {\n    @PublishedApi\n    internal actual constructor(delegate: Continuation<T>) : this(delegate, UNDECIDED)\n\n    public actual override val context: CoroutineContext\n        get() = delegate.context\n\n    private var result: Any? = initialResult\n\n    public actual override fun resumeWith(result: Result<T>) {\n        val cur = this.result\n        when {\n            cur === UNDECIDED -> {\n                this.result = result.value\n            }\n            cur === COROUTINE_SUSPENDED -> {\n                this.result = RESUMED\n                delegate.resumeWith(result)\n            }\n            else -> throw IllegalStateException(\"Already resumed\")\n        }\n    }\n\n    @PublishedApi\n    internal actual fun getOrThrow(): Any? {\n        if (result === UNDECIDED) {\n            result = COROUTINE_SUSPENDED\n            return COROUTINE_SUSPENDED\n        }\n        val result = this.result\n        return when {\n            result === RESUMED -> COROUTINE_SUSPENDED // already called continuation, indicate COROUTINE_SUSPENDED upstream\n            result is Result.Failure -> throw result.exception\n            else -> result // either COROUTINE_SUSPENDED or data\n        }\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\n@JsName(\"throwNPE\")\ninternal fun throwNPE(message: String) {\n    throw NullPointerException(message)\n}\n\n@JsName(\"throwCCE\")\ninternal fun throwCCE() {\n    throw ClassCastException(\"Illegal cast\")\n}\n\n@JsName(\"throwISE\")\ninternal fun throwISE(message: String) {\n    throw IllegalStateException(message)\n}\n\n@JsName(\"throwUPAE\")\ninternal fun throwUPAE(propertyName: String) {\n    throw UninitializedPropertyAccessException(\"lateinit property ${propertyName} has not been initialized\")\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.math\n\n\nimport kotlin.internal.InlineOnly\nimport kotlin.js.JsMath as nativeMath\n\n\n// region ================ Double Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Double): Double = nativeMath.sin(x)\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Double): Double = nativeMath.cos(x)\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Double): Double = nativeMath.tan(x)\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Double): Double = nativeMath.asin(x)\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Double): Double = nativeMath.acos(x)\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Double): Double = nativeMath.atan(x)\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Double, x: Double): Double = nativeMath.atan2(y, x)\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Double): Double = nativeSinh(x)\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Double): Double = nativeCosh(x)\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Double): Double = nativeTanh(x)\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Double): Double = nativeAsinh(x)\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Double): Double = nativeAcosh(x)\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Double): Double = nativeAtanh(x)\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Double, y: Double): Double = nativeHypot(x, y)\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Double): Double = nativeMath.sqrt(x)\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Double): Double = nativeMath.exp(x)\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Double): Double = nativeExpm1(x)\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\npublic actual fun log(x: Double, base: Double): Double {\n    if (base <= 0.0 || base == 1.0) return Double.NaN\n    return nativeMath.log(x) / nativeMath.log(base)\n}\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Double): Double = nativeMath.log(x)\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Double): Double = nativeLog10(x)\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Double): Double = nativeLog2(x)\n\n/**\n * Computes `ln(x + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Double): Double = nativeLog1p(x)\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest double value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Double): Double = nativeMath.ceil(x)\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest double value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Double): Double = nativeMath.floor(x)\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Double): Double = nativeTrunc(x)\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun round(x: Double): Double {\n    if (x % 0.5 != 0.0) {\n        return nativeMath.round(x)\n    }\n    val floor = floor(x)\n    return if (floor % 2 == 0.0) floor else ceil(x)\n}\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Double]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Double): Double = nativeMath.abs(x)\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Double): Double = nativeSign(x)\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Double, b: Double): Double = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Double, b: Double): Double = nativeMath.max(a, b)\n\n\n/**\n * Returns the cube root of [x]. For any `x`, `cbrt(-x) == -cbrt(x)`;\n * that is, the cube root of a negative value is the negative of the cube root\n * of that value's magnitude. Special cases:\n *\n * Special cases:\n *   - If the argument is `NaN`, then the result is `NaN`.\n *   - If the argument is infinite, then the result is an infinity with the same sign as the argument.\n *   - If the argument is zero, then the result is a zero with the same sign as the argument.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@InlineOnly\npublic actual inline fun cbrt(x: Double): Double = nativeMath.cbrt(x)\n\n\n// extensions\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(x: Double): Double = nativeMath.pow(this, x)\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.pow(n: Int): Double = nativeMath.pow(this, n.toDouble())\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.absoluteValue: Double get() = nativeMath.abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Double.sign: Double get() = nativeSign(this)\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Double.withSign(sign: Int): Double = this.withSign(sign.toDouble())\n\n/**\n * Returns the ulp (unit in the last place) of this value.\n *\n * An ulp is a positive distance between this value and the next nearest [Double] value larger in magnitude.\n *\n * Special Cases:\n *   - `NaN.ulp` is `NaN`\n *   - `x.ulp` is `+Inf` when `x` is `+Inf` or `-Inf`\n *   - `0.0.ulp` is `Double.MIN_VALUE`\n */\n@SinceKotlin(\"1.2\")\npublic actual val Double.ulp: Double get() = when {\n    this < 0 -> (-this).ulp\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == Double.MAX_VALUE -> this - this.nextDown()\n    else -> this.nextUp() - this\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of positive infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextUp(): Double = when {\n    this.isNaN() || this == Double.POSITIVE_INFINITY -> this\n    this == 0.0 -> Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) 1 else -1)\n}\n\n/**\n * Returns the [Double] value nearest to this value in direction of negative infinity.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextDown(): Double = when {\n    this.isNaN() || this == Double.NEGATIVE_INFINITY -> this\n    this == 0.0 -> -Double.MIN_VALUE\n    else -> Double.fromBits(this.toRawBits() + if (this > 0) -1 else 1)\n}\n\n\n/**\n * Returns the [Double] value nearest to this value in direction from this value towards the value [to].\n *\n * Special cases:\n *   - `x.nextTowards(y)` is `NaN` if either `x` or `y` are `NaN`\n *   - `x.nextTowards(x) == x`\n *\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.nextTowards(to: Double): Double = when {\n    this.isNaN() || to.isNaN() -> Double.NaN\n    to == this -> to\n    to > this -> this.nextUp()\n    else /* to < this */ -> this.nextDown()\n}\n\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToInt(): Int = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Int.MAX_VALUE -> Int.MAX_VALUE\n    this < Int.MIN_VALUE -> Int.MIN_VALUE\n    else -> nativeMath.round(this).toInt()\n}\n\n/**\n * Rounds this [Double] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Double.roundToLong(): Long = when {\n    isNaN() -> throw IllegalArgumentException(\"Cannot round NaN value.\")\n    this > Long.MAX_VALUE -> Long.MAX_VALUE\n    this < Long.MIN_VALUE -> Long.MIN_VALUE\n    else -> nativeMath.round(this).toLong()\n}\n\n// endregion\n\n\n\n// region ================ Float Math ========================================\n\n/** Computes the sine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `sin(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sin(x: Float): Float = nativeMath.sin(x.toDouble()).toFloat()\n\n/** Computes the cosine of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `cos(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cos(x: Float): Float = nativeMath.cos(x.toDouble()).toFloat()\n\n/** Computes the tangent of the angle [x] given in radians.\n *\n *  Special cases:\n *   - `tan(NaN|+Inf|-Inf)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tan(x: Float): Float = nativeMath.tan(x.toDouble()).toFloat()\n\n/**\n * Computes the arc sine of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *    - `asin(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asin(x: Float): Float = nativeMath.asin(x.toDouble()).toFloat()\n\n/**\n * Computes the arc cosine of the value [x];\n * the returned value is an angle in the range from `0.0` to `PI` radians.\n *\n * Special cases:\n *    - `acos(x)` is `NaN`, when `abs(x) > 1` or x is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acos(x: Float): Float = nativeMath.acos(x.toDouble()).toFloat()\n\n/**\n * Computes the arc tangent of the value [x];\n * the returned value is an angle in the range from `-PI/2` to `PI/2` radians.\n *\n * Special cases:\n *   - `atan(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan(x: Float): Float = nativeMath.atan(x.toDouble()).toFloat()\n\n/**\n * Returns the angle `theta` of the polar coordinates `(r, theta)` that correspond\n * to the rectangular coordinates `(x, y)` by computing the arc tangent of the value [y] / [x];\n * the returned value is an angle in the range from `-PI` to `PI` radians.\n *\n * Special cases:\n *   - `atan2(0.0, 0.0)` is `0.0`\n *   - `atan2(0.0, x)` is  `0.0` for `x > 0` and `PI` for `x < 0`\n *   - `atan2(-0.0, x)` is `-0.0` for 'x > 0` and `-PI` for `x < 0`\n *   - `atan2(y, +Inf)` is `0.0` for `0 < y < +Inf` and `-0.0` for '-Inf < y < 0`\n *   - `atan2(y, -Inf)` is `PI` for `0 < y < +Inf` and `-PI` for `-Inf < y < 0`\n *   - `atan2(y, 0.0)` is `PI/2` for `y > 0` and `-PI/2` for `y < 0`\n *   - `atan2(+Inf, x)` is `PI/2` for finite `x`y\n *   - `atan2(-Inf, x)` is `-PI/2` for finite `x`\n *   - `atan2(NaN, x)` and `atan2(y, NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atan2(y: Float, x: Float): Float = nativeMath.atan2(y.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic sine of the value [x].\n *\n * Special cases:\n *   - `sinh(NaN)` is `NaN`\n *   - `sinh(+Inf)` is `+Inf`\n *   - `sinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sinh(x: Float): Float = nativeSinh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic cosine of the value [x].\n *\n * Special cases:\n *   - `cosh(NaN)` is `NaN`\n *   - `cosh(+Inf|-Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun cosh(x: Float): Float = nativeCosh(x.toDouble()).toFloat()\n\n/**\n * Computes the hyperbolic tangent of the value [x].\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(+Inf)` is `1.0`\n *   - `tanh(-Inf)` is `-1.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun tanh(x: Float): Float = nativeTanh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic sine of the value [x].\n *\n * The returned value is `y` such that `sinh(y) == x`.\n *\n * Special cases:\n *   - `asinh(NaN)` is `NaN`\n *   - `asinh(+Inf)` is `+Inf`\n *   - `asinh(-Inf)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun asinh(x: Float): Float = nativeAsinh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic cosine of the value [x].\n *\n * The returned value is positive `y` such that `cosh(y) == x`.\n *\n * Special cases:\n *   - `acosh(NaN)` is `NaN`\n *   - `acosh(x)` is `NaN` when `x < 1`\n *   - `acosh(+Inf)` is `+Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun acosh(x: Float): Float = nativeAcosh(x.toDouble()).toFloat()\n\n/**\n * Computes the inverse hyperbolic tangent of the value [x].\n *\n * The returned value is `y` such that `tanh(y) == x`.\n *\n * Special cases:\n *   - `tanh(NaN)` is `NaN`\n *   - `tanh(x)` is `NaN` when `x > 1` or `x < -1`\n *   - `tanh(1.0)` is `+Inf`\n *   - `tanh(-1.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun atanh(x: Float): Float = nativeAtanh(x.toDouble()).toFloat()\n\n/**\n * Computes `sqrt(x^2 + y^2)` without intermediate overflow or underflow.\n *\n * Special cases:\n *   - returns `+Inf` if any of arguments is infinite\n *   - returns `NaN` if any of arguments is `NaN` and the other is not infinite\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun hypot(x: Float, y: Float): Float = nativeHypot(x.toDouble(), y.toDouble()).toFloat()\n\n/**\n * Computes the positive square root of the value [x].\n *\n * Special cases:\n *   - `sqrt(x)` is `NaN` when `x < 0` or `x` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sqrt(x: Float): Float = nativeMath.sqrt(x.toDouble()).toFloat()\n\n/**\n * Computes Euler's number `e` raised to the power of the value [x].\n *\n * Special cases:\n *   - `exp(NaN)` is `NaN`\n *   - `exp(+Inf)` is `+Inf`\n *   - `exp(-Inf)` is `0.0`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun exp(x: Float): Float = nativeMath.exp(x.toDouble()).toFloat()\n\n/**\n * Computes `exp(x) - 1`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `expm1(NaN)` is `NaN`\n *   - `expm1(+Inf)` is `+Inf`\n *   - `expm1(-Inf)` is `-1.0`\n *\n * @see [exp] function.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun expm1(x: Float): Float = nativeExpm1(x.toDouble()).toFloat()\n\n/**\n * Computes the logarithm of the value [x] to the given [base].\n *\n * Special cases:\n *   - `log(x, b)` is `NaN` if either `x` or `b` are `NaN`\n *   - `log(x, b)` is `NaN` when `x < 0` or `b <= 0` or `b == 1.0`\n *   - `log(+Inf, +Inf)` is `NaN`\n *   - `log(+Inf, b)` is `+Inf` for `b > 1` and `-Inf` for `b < 1`\n *   - `log(0.0, b)` is `-Inf` for `b > 1` and `+Inf` for `b > 1`\n *\n * See also logarithm functions for common fixed bases: [ln], [log10] and [log2].\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log(x: Float, base: Float): Float = log(x.toDouble(), base.toDouble()).toFloat()\n\n/**\n * Computes the natural logarithm (base `E`) of the value [x].\n *\n * Special cases:\n *   - `ln(NaN)` is `NaN`\n *   - `ln(x)` is `NaN` when `x < 0.0`\n *   - `ln(+Inf)` is `+Inf`\n *   - `ln(0.0)` is `-Inf`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln(x: Float): Float = nativeMath.log(x.toDouble()).toFloat()\n\n/**\n * Computes the common logarithm (base 10) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log10(x: Float): Float = nativeLog10(x.toDouble()).toFloat()\n\n/**\n * Computes the binary logarithm (base 2) of the value [x].\n *\n * @see [ln] function for special cases.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun log2(x: Float): Float = nativeLog2(x.toDouble()).toFloat()\n\n/**\n * Computes `ln(a + 1)`.\n *\n * This function can be implemented to produce more precise result for [x] near zero.\n *\n * Special cases:\n *   - `ln1p(NaN)` is `NaN`\n *   - `ln1p(x)` is `NaN` where `x < -1.0`\n *   - `ln1p(-1.0)` is `-Inf`\n *   - `ln1p(+Inf)` is `+Inf`\n *\n * @see [ln] function\n * @see [expm1] function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ln1p(x: Float): Float = nativeLog1p(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards positive infinity.\n\n * @return the smallest Float value that is greater than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `ceil(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun ceil(x: Float): Float = nativeMath.ceil(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards negative infinity.\n\n * @return the largest Float value that is smaller than or equal to the given value [x] and is a mathematical integer.\n *\n * Special cases:\n *   - `floor(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun floor(x: Float): Float = nativeMath.floor(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] to an integer towards zero.\n *\n * @return the value [x] having its fractional part truncated.\n *\n * Special cases:\n *   - `truncate(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun truncate(x: Float): Float = truncate(x.toDouble()).toFloat()\n\n/**\n * Rounds the given value [x] towards the closest integer with ties rounded towards even integer.\n *\n * Special cases:\n *   - `round(x)` is `x` where `x` is `NaN` or `+Inf` or `-Inf` or already a mathematical integer.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun round(x: Float): Float = round(x.toDouble()).toFloat()\n\n\n/**\n * Returns the absolute value of the given value [x].\n *\n * Special cases:\n *   - `abs(NaN)` is `NaN`\n *\n * @see absoluteValue extension property for [Float]\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun abs(x: Float): Float = nativeMath.abs(x.toDouble()).toFloat()\n\n/**\n * Returns the sign of the given value [x]:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `sign(NaN)` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun sign(x: Float): Float = nativeSign(x.toDouble()).toFloat()\n\n\n\n/**\n * Returns the smaller of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Float, b: Float): Float = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n *\n * If either value is `NaN`, then the result is `NaN`.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Float, b: Float): Float = nativeMath.max(a, b)\n\n\n/**\n * Returns the cube root of [x]. For any `x`, `cbrt(-x) == -cbrt(x)`;\n * that is, the cube root of a negative value is the negative of the cube root\n * of that value's magnitude. Special cases:\n *\n * Special cases:\n *   - If the argument is `NaN`, then the result is `NaN`.\n *   - If the argument is infinite, then the result is an infinity with the same sign as the argument.\n *   - If the argument is zero, then the result is a zero with the same sign as the argument.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@InlineOnly\npublic actual inline fun cbrt(x: Float): Float = nativeMath.cbrt(x.toDouble()).toFloat()\n\n\n// extensions\n\n\n/**\n * Raises this value to the power [x].\n *\n * Special cases:\n *   - `b.pow(0.0)` is `1.0`\n *   - `b.pow(1.0) == b`\n *   - `b.pow(NaN)` is `NaN`\n *   - `NaN.pow(x)` is `NaN` for `x != 0.0`\n *   - `b.pow(Inf)` is `NaN` for `abs(b) == 1.0`\n *   - `b.pow(x)` is `NaN` for `b < 0` and `x` is finite and not an integer\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(x: Float): Float = nativeMath.pow(this.toDouble(), x.toDouble()).toFloat()\n\n/**\n * Raises this value to the integer power [n].\n *\n * See the other overload of [pow] for details.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.pow(n: Int): Float = nativeMath.pow(this.toDouble(), n.toDouble()).toFloat()\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `NaN.absoluteValue` is `NaN`\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.absoluteValue: Float get() = nativeMath.abs(this.toDouble()).toFloat()\n\n/**\n * Returns the sign of this value:\n *   - `-1.0` if the value is negative,\n *   - zero if the value is zero,\n *   - `1.0` if the value is positive\n *\n * Special case:\n *   - `NaN.sign` is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Float.sign: Float get() = nativeSign(this.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n *\n * If [sign] is `NaN` the sign of the result is undefined.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Float): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n/**\n * Returns this value with the sign bit same as of the [sign] value.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.withSign(sign: Int): Float = this.toDouble().withSign(sign.toDouble()).toFloat()\n\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Int].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToInt() == Int.MAX_VALUE` when `x > Int.MAX_VALUE`\n *   - `x.roundToInt() == Int.MIN_VALUE` when `x < Int.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToInt(): Int = toDouble().roundToInt()\n\n/**\n * Rounds this [Float] value to the nearest integer and converts the result to [Long].\n * Ties are rounded towards positive infinity.\n *\n * Special cases:\n *   - `x.roundToLong() == Long.MAX_VALUE` when `x > Long.MAX_VALUE`\n *   - `x.roundToLong() == Long.MIN_VALUE` when `x < Long.MIN_VALUE`\n *\n * @throws IllegalArgumentException when this value is `NaN`\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun Float.roundToLong(): Long = toDouble().roundToLong()\n\n\n// endregion\n\n// region ================ Integer Math ========================================\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Int.MIN_VALUE)` is `Int.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Int]\n */\n// TODO: remove manual 'or' when KT-19290 is fixed\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Int): Int = if (n < 0) (-n or 0) else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun min(a: Int, b: Int): Int = nativeMath.min(a, b)\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline fun max(a: Int, b: Int): Int = nativeMath.max(a, b)\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Int.MIN_VALUE.absoluteValue` is `Int.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Int.absoluteValue: Int get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Int.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n\n/**\n * Returns the absolute value of the given value [n].\n *\n * Special cases:\n *   - `abs(Long.MIN_VALUE)` is `Long.MIN_VALUE` due to an overflow\n *\n * @see absoluteValue extension property for [Long]\n */\n@SinceKotlin(\"1.2\")\npublic actual fun abs(n: Long): Long = if (n < 0) -n else n\n\n/**\n * Returns the smaller of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun min(a: Long, b: Long): Long = if (a <= b) a else b\n\n/**\n * Returns the greater of two values.\n */\n@SinceKotlin(\"1.2\")\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun max(a: Long, b: Long): Long = if (a >= b) a else b\n\n/**\n * Returns the absolute value of this value.\n *\n * Special cases:\n *   - `Long.MIN_VALUE.absoluteValue` is `Long.MIN_VALUE` due to an overflow\n *\n * @see abs function\n */\n@SinceKotlin(\"1.2\")\n@InlineOnly\npublic actual inline val Long.absoluteValue: Long get() = abs(this)\n\n/**\n * Returns the sign of this value:\n *   - `-1` if the value is negative,\n *   - `0` if the value is zero,\n *   - `1` if the value is positive\n */\n@SinceKotlin(\"1.2\")\npublic actual val Long.sign: Int get() = when {\n    this < 0 -> -1\n    this > 0 -> 1\n    else -> 0\n}\n\n\n// endregion\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToBits\")\npublic actual fun Double.toBits(): Long = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Long]\n * according to the IEEE 754 floating-point \"double format\" bit layout,\n * preserving `NaN` values exact layout.\n */\n@SinceKotlin(\"1.2\")\n@library(\"doubleToRawBits\")\npublic actual fun Double.toRawBits(): Long = definedExternally\n\n/**\n * Returns the [Double] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Double.Companion.fromBits(bits: Long): Double = js(\"Kotlin\").doubleFromBits(bits).unsafeCast<Double>()\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToBits\")\npublic actual fun Float.toBits(): Int = definedExternally\n\n/**\n * Returns a bit representation of the specified floating-point value as [Int]\n * according to the IEEE 754 floating-point \"single format\" bit layout,\n * preserving `NaN` values exact layout.\n *\n * Note that in Kotlin/JS [Float] range is wider than \"single format\" bit layout can represent,\n * so some [Float] values may overflow, underflow or loose their accuracy after conversion to bits and back.\n */\n@SinceKotlin(\"1.2\")\n@library(\"floatToRawBits\")\npublic actual fun Float.toRawBits(): Int = definedExternally\n\n/**\n * Returns the [Float] value corresponding to a given bit representation.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Float.Companion.fromBits(bits: Int): Float = js(\"Kotlin\").floatFromBits(bits).unsafeCast<Float>()\n\n\n@Suppress(\"NOTHING_TO_INLINE\")\ninternal inline fun Long(low: Int, high: Int) = js(\"Kotlin\").Long.fromBits(low, high).unsafeCast<Long>()\ninternal inline val Long.low: Int get() = this.asDynamic().getLowBits().unsafeCast<Int>()\ninternal inline val Long.high: Int get() = this.asDynamic().getHighBits().unsafeCast<Int>()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Double.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if the specified number is a\n * Not-a-Number (NaN) value, `false` otherwise.\n */\npublic actual fun Float.isNaN(): Boolean = this != this\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Double.isInfinite(): Boolean = this == Double.POSITIVE_INFINITY || this == Double.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if this value is infinitely large in magnitude.\n */\npublic actual fun Float.isInfinite(): Boolean = this == Float.POSITIVE_INFINITY || this == Float.NEGATIVE_INFINITY\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Double.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n/**\n * Returns `true` if the argument is a finite floating-point value; returns `false` otherwise (for `NaN` and infinity arguments).\n */\npublic actual fun Float.isFinite(): Boolean = !isInfinite() && !isNaN()\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countOneBits(): Int {\n    // Hacker's Delight 5-1 algorithm\n    var v = this\n    v = (v and 0x55555555) + (v.ushr(1) and 0x55555555)\n    v = (v and 0x33333333) + (v.ushr(2) and 0x33333333)\n    v = (v and 0x0F0F0F0F) + (v.ushr(4) and 0x0F0F0F0F)\n    v = (v and 0x00FF00FF) + (v.ushr(8) and 0x00FF00FF)\n    v = (v and 0x0000FFFF) + (v.ushr(16))\n    return v\n}\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Int.countLeadingZeroBits(): Int = nativeClz32(this)\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Int] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.countTrailingZeroBits(): Int =\n    // Hacker's Delight 5-4 algorithm for expressing countTrailingZeroBits with countLeadingZeroBits\n    Int.SIZE_BITS - (this or -this).inv().countLeadingZeroBits()\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeHighestOneBit(): Int =\n    if (this == 0) 0 else 1.shl(Int.SIZE_BITS - 1 - countLeadingZeroBits())\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Int] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.takeLowestOneBit(): Int =\n    // Hacker's Delight 2-1 algorithm for isolating rightmost 1-bit\n    this and -this\n\n/**\n * Rotates the binary representation of this [Int] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 32)`\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.rotateLeft(bitCount: Int): Int =\n    shl(bitCount) or ushr(Int.SIZE_BITS - bitCount)\n\n\n/**\n * Rotates the binary representation of this [Int] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Int.SIZE_BITS] (32) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 32)`\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Int.rotateRight(bitCount: Int): Int =\n    shl(Int.SIZE_BITS - bitCount) or ushr(bitCount)\n\n\n/**\n * Counts the number of set bits in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countOneBits(): Int =\n    high.countOneBits() + low.countOneBits()\n\n/**\n * Counts the number of consecutive most significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countLeadingZeroBits(): Int =\n    when (val high = this.high) {\n        0 -> Int.SIZE_BITS + low.countLeadingZeroBits()\n        else -> high.countLeadingZeroBits()\n    }\n\n/**\n * Counts the number of consecutive least significant bits that are zero in the binary representation of this [Long] number.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.countTrailingZeroBits(): Int =\n    when (val low = this.low) {\n        0 -> Int.SIZE_BITS + high.countTrailingZeroBits()\n        else -> low.countTrailingZeroBits()\n    }\n\n/**\n * Returns a number having a single bit set in the position of the most significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeHighestOneBit(): Long =\n    when (val high = this.high) {\n        0 -> Long(low.takeHighestOneBit(), 0)\n        else -> Long(0, high.takeHighestOneBit())\n    }\n\n/**\n * Returns a number having a single bit set in the position of the least significant set bit of this [Long] number,\n * or zero, if this number is zero.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.takeLowestOneBit(): Long =\n    when (val low = this.low) {\n        0 -> Long(0, high.takeLowestOneBit())\n        else -> Long(low.takeLowestOneBit(), 0)\n    }\n\n/**\n * Rotates the binary representation of this [Long] number left by the specified [bitCount] number of bits.\n * The most significant bits pushed out from the left side reenter the number as the least significant bits on the right side.\n *\n * Rotating the number left by a negative bit count is the same as rotating it right by the negated bit count:\n * `number.rotateLeft(-n) == number.rotateRight(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateLeft(n) == number.rotateLeft(n % 64)`\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Long.rotateLeft(bitCount: Int): Long {\n    if ((bitCount and 31) != 0) {\n        val low = this.low\n        val high = this.high\n        val newLow = low.shl(bitCount) or high.ushr(-bitCount)\n        val newHigh = high.shl(bitCount) or low.ushr(-bitCount)\n        return if ((bitCount and 32) == 0) Long(newLow, newHigh) else Long(newHigh, newLow)\n    } else {\n        return if ((bitCount and 32) == 0) this else Long(high, low)\n    }\n}\n\n\n/**\n * Rotates the binary representation of this [Long] number right by the specified [bitCount] number of bits.\n * The least significant bits pushed out from the right side reenter the number as the most significant bits on the left side.\n *\n * Rotating the number right by a negative bit count is the same as rotating it left by the negated bit count:\n * `number.rotateRight(-n) == number.rotateLeft(n)`\n *\n * Rotating by a multiple of [Long.SIZE_BITS] (64) returns the same number, or more generally\n * `number.rotateRight(n) == number.rotateRight(n % 64)`\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Long.rotateRight(bitCount: Int): Long = rotateLeft(-bitCount)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.pow\n\ninternal actual fun defaultPlatformRandom(): Random =\n    Random(js(\"(Math.random() * Math.pow(2, 32)) | 0\").unsafeCast<Int>())\n\n\nprivate val INV_2_26: Double = 2.0.pow(-26)\nprivate val INV_2_53: Double = 2.0.pow(-53)\ninternal actual fun doubleFromParts(hi26: Int, low27: Int): Double =\n    hi26 * INV_2_26 + low27 * INV_2_53","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.reflect.*\n\ninternal abstract class KClassImpl<T : Any>(\n    internal open val jClass: JsClass<T>\n) : KClass<T> {\n\n    override val qualifiedName: String?\n        get() = TODO()\n\n    override fun equals(other: Any?): Boolean {\n        return other is KClassImpl<*> && jClass == other.jClass\n    }\n\n    // TODO: use FQN\n    override fun hashCode(): Int = simpleName?.hashCode() ?: 0\n\n    override fun toString(): String {\n        // TODO: use FQN\n        return \"class $simpleName\"\n    }\n}\n\ninternal class SimpleKClassImpl<T : Any>(jClass: JsClass<T>) : KClassImpl<T>(jClass) {\n    override val simpleName: String? = jClass.asDynamic().`$metadata$`?.simpleName.unsafeCast<String?>()\n\n    override fun isInstance(value: Any?): Boolean {\n        return jsIsType(value, jClass)\n    }\n}\n\ninternal class PrimitiveKClassImpl<T : Any>(\n    jClass: JsClass<T>,\n    private val givenSimpleName: String,\n    private val isInstanceFunction: (Any?) -> Boolean\n) : KClassImpl<T>(jClass) {\n    override fun equals(other: Any?): Boolean {\n        if (other !is PrimitiveKClassImpl<*>) return false\n        return super.equals(other) && givenSimpleName == other.givenSimpleName\n    }\n\n    override val simpleName: String? get() = givenSimpleName\n\n    override fun isInstance(value: Any?): Boolean {\n        return isInstanceFunction(value)\n    }\n}\n\ninternal object NothingKClassImpl : KClassImpl<Nothing>(js(\"Object\")) {\n    override val simpleName: String = \"Nothing\"\n\n    override fun isInstance(value: Any?): Boolean = false\n\n    override val jClass: JsClass<Nothing>\n        get() = throw UnsupportedOperationException(\"There's no native JS class for Nothing type\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}\n\ninternal class ErrorKClass : KClass<Nothing> {\n    override val simpleName: String? get() = error(\"Unknown simpleName for ErrorKClass\")\n    override val qualifiedName: String? get() = error(\"Unknown qualifiedName for ErrorKClass\")\n\n    override fun isInstance(value: Any?): Boolean = error(\"Can's check isInstance on ErrorKClass\")\n\n    override fun equals(other: Any?): Boolean = other === this\n\n    override fun hashCode(): Int = 0\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n/**\n * The common interface of [InternalStringMap] and [InternalHashCodeMap].\n */\ninternal interface InternalMap<K, V> : MutableIterable<MutableMap.MutableEntry<K, V>> {\n    val equality: EqualityComparator\n    val size: Int\n    operator fun contains(key: K): Boolean\n    operator fun get(key: K): V?\n\n    fun put(key: K, value: V): V?\n    fun remove(key: K): V?\n    fun clear(): Unit\n\n    fun createJsMap(): dynamic {\n        val result = js(\"Object.create(null)\")\n        // force to switch object representation to dictionary mode\n        result[\"foo\"] = 1\n        jsDeleteProperty(result, \"foo\")\n        return result\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n\n@file:Suppress(\"UNUSED_PARAMETER\")\n\npackage kotlin.js\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsDeleteProperty(obj: Any, property: Any) {\n    js(\"delete obj[property]\")\n}\n\n@kotlin.internal.InlineOnly\ninternal inline fun jsBitwiseOr(lhs: Any?, rhs: Any?): Int =\n    js(\"lhs | rhs\").unsafeCast<Int>()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.reflect.js.internal\n\nimport kotlin.js.JsClass\n\n@JsName(\"PrimitiveClasses\")\ninternal object PrimitiveClasses {\n    @JsName(\"anyClass\")\n    val anyClass = PrimitiveKClassImpl(js(\"Object\").unsafeCast<JsClass<Any>>(), \"Any\", { it is Any })\n\n    @JsName(\"numberClass\")\n    val numberClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Number>>(), \"Number\", { it is Number })\n\n    @JsName(\"nothingClass\")\n    val nothingClass = NothingKClassImpl\n\n    @JsName(\"booleanClass\")\n    val booleanClass = PrimitiveKClassImpl(js(\"Boolean\").unsafeCast<JsClass<Boolean>>(), \"Boolean\", { it is Boolean })\n\n    @JsName(\"byteClass\")\n    val byteClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Byte>>(), \"Byte\", { it is Byte })\n\n    @JsName(\"shortClass\")\n    val shortClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Short>>(), \"Short\", { it is Short })\n\n    @JsName(\"intClass\")\n    val intClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Int>>(), \"Int\", { it is Int })\n\n    @JsName(\"floatClass\")\n    val floatClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Float>>(), \"Float\", { it is Float })\n\n    @JsName(\"doubleClass\")\n    val doubleClass = PrimitiveKClassImpl(js(\"Number\").unsafeCast<JsClass<Double>>(), \"Double\", { it is Double })\n\n    @JsName(\"arrayClass\")\n    val arrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<Array<*>>>(), \"Array\", { it is Array<*> })\n\n    @JsName(\"stringClass\")\n    val stringClass = PrimitiveKClassImpl(js(\"String\").unsafeCast<JsClass<String>>(), \"String\", { it is String })\n\n    @JsName(\"throwableClass\")\n    val throwableClass = PrimitiveKClassImpl(js(\"Error\").unsafeCast<JsClass<Throwable>>(), \"Throwable\", { it is Throwable })\n\n    @JsName(\"booleanArrayClass\")\n    val booleanArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<BooleanArray>>(), \"BooleanArray\", { it is BooleanArray })\n\n    @JsName(\"charArrayClass\")\n    val charArrayClass = PrimitiveKClassImpl(js(\"Uint16Array\").unsafeCast<JsClass<CharArray>>(), \"CharArray\", { it is CharArray })\n\n    @JsName(\"byteArrayClass\")\n    val byteArrayClass = PrimitiveKClassImpl(js(\"Int8Array\").unsafeCast<JsClass<ByteArray>>(), \"ByteArray\", { it is ByteArray })\n\n    @JsName(\"shortArrayClass\")\n    val shortArrayClass = PrimitiveKClassImpl(js(\"Int16Array\").unsafeCast<JsClass<ShortArray>>(), \"ShortArray\", { it is ShortArray })\n\n    @JsName(\"intArrayClass\")\n    val intArrayClass = PrimitiveKClassImpl(js(\"Int32Array\").unsafeCast<JsClass<IntArray>>(), \"IntArray\", { it is IntArray })\n\n    @JsName(\"longArrayClass\")\n    val longArrayClass = PrimitiveKClassImpl(js(\"Array\").unsafeCast<JsClass<LongArray>>(), \"LongArray\", { it is LongArray })\n\n    @JsName(\"floatArrayClass\")\n    val floatArrayClass = PrimitiveKClassImpl(js(\"Float32Array\").unsafeCast<JsClass<FloatArray>>(), \"FloatArray\", { it is FloatArray })\n\n    @JsName(\"doubleArrayClass\")\n    val doubleArrayClass = PrimitiveKClassImpl(js(\"Float64Array\").unsafeCast<JsClass<DoubleArray>>(), \"DoubleArray\", { it is DoubleArray })\n\n    @JsName(\"functionClass\")\n    fun functionClass(arity: Int): KClassImpl<Any> {\n        return functionClasses.get(arity) ?: run {\n            val result = PrimitiveKClassImpl(js(\"Function\").unsafeCast<JsClass<Any>>(), \"Function$arity\",\n                                             { jsTypeOf(it) === \"function\" && it.asDynamic().length === arity })\n            functionClasses.asDynamic()[arity] = result\n            result\n        }\n    }\n}\n\nprivate val functionClasses = arrayOfNulls<KClassImpl<Any>>(0)","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// a package is omitted to get declarations directly under the module\n\nimport kotlin.reflect.*\nimport kotlin.reflect.js.internal.*\n\n@JsName(\"getKClass\")\ninternal fun <T : Any> getKClass(jClass: Any /* JsClass<T> | Array<JsClass<T>> */): KClass<T> {\n    return if (js(\"Array\").isArray(jClass)) {\n        getKClassM(jClass.unsafeCast<Array<JsClass<T>>>())\n    } else {\n        getKClass1(jClass.unsafeCast<JsClass<T>>())\n    }\n}\n\n@JsName(\"getKClassM\")\ninternal fun <T : Any> getKClassM(jClasses: Array<JsClass<T>>): KClass<T> = when (jClasses.size) {\n    1 -> getKClass1(jClasses[0])\n    0 -> NothingKClassImpl.unsafeCast<KClass<T>>()\n    else -> ErrorKClass().unsafeCast<KClass<T>>()\n}\n\n@JsName(\"getKClassFromExpression\")\ninternal fun <T : Any> getKClassFromExpression(e: T): KClass<T> =\n    when (jsTypeOf(e)) {\n        \"string\" -> PrimitiveClasses.stringClass\n        \"number\" -> if (jsBitwiseOr(e, 0).asDynamic() === e) PrimitiveClasses.intClass else PrimitiveClasses.doubleClass\n        \"boolean\" -> PrimitiveClasses.booleanClass\n        \"function\" -> PrimitiveClasses.functionClass(e.asDynamic().length)\n        else -> {\n            when {\n                e is BooleanArray -> PrimitiveClasses.booleanArrayClass\n                e is CharArray -> PrimitiveClasses.charArrayClass\n                e is ByteArray -> PrimitiveClasses.byteArrayClass\n                e is ShortArray -> PrimitiveClasses.shortArrayClass\n                e is IntArray -> PrimitiveClasses.intArrayClass\n                e is LongArray -> PrimitiveClasses.longArrayClass\n                e is FloatArray -> PrimitiveClasses.floatArrayClass\n                e is DoubleArray -> PrimitiveClasses.doubleArrayClass\n                e is KClass<*> -> KClass::class\n                e is Array<*> -> PrimitiveClasses.arrayClass\n                else -> {\n                    val constructor = js(\"Object\").getPrototypeOf(e).constructor\n                    when {\n                        constructor === js(\"Object\") -> PrimitiveClasses.anyClass\n                        constructor === js(\"Error\") -> PrimitiveClasses.throwableClass\n                        else -> {\n                            val jsClass: JsClass<T> = constructor\n                            getKClass1(jsClass)\n                        }\n                    }\n                }\n            }\n        }\n    }.unsafeCast<KClass<T>>()\n\n@JsName(\"getKClass1\")\ninternal fun <T : Any> getKClass1(jClass: JsClass<T>): KClass<T> {\n    if (jClass === js(\"String\")) return PrimitiveClasses.stringClass.unsafeCast<KClass<T>>()\n\n    val metadata = jClass.asDynamic().`$metadata$`\n\n    return if (metadata != null) {\n        if (metadata.`$kClass$` == null) {\n            val kClass = SimpleKClassImpl(jClass)\n            metadata.`$kClass$` = kClass\n            kClass\n        } else {\n            metadata.`$kClass$`\n        }\n    } else {\n        SimpleKClassImpl(jClass)\n    }\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\n/**\n * Exposes the JavaScript [RegExp object](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/RegExp) to Kotlin.\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external class RegExp(pattern: String, flags: String? = definedExternally) {\n\n    public fun test(str: String): Boolean\n\n    public fun exec(str: String): RegExpMatch?\n\n    public override fun toString(): String\n\n    /**\n     * The lastIndex is a read/write integer property of regular expressions that specifies the index at which to start the next match.\n     */\n    public var lastIndex: Int\n\n    public val global: Boolean\n    public val ignoreCase: Boolean\n    public val multiline: Boolean\n}\n\n/**\n * Resets the regular expression so that subsequent [RegExp.test] and [RegExp.exec] calls will match starting with the beginning of the input string.\n */\npublic fun RegExp.reset() {\n    lastIndex = 0\n}\n\n// TODO: Inherit from array or introduce asArray() extension\n/**\n * Represents the return value of [RegExp.exec].\n */\n@Suppress(\"NOT_DOCUMENTED\")\npublic external interface RegExpMatch {\n    public val index: Int\n    public val input: String\n    public val length: Int\n}\n\n/**\n * Returns the entire text matched by [RegExp.exec] if the [index] parameter is 0, or the text matched by the capturing parenthesis\n * at the given index.\n */\npublic inline operator fun RegExpMatch.get(index: Int): String? = asDynamic()[index]\n\n/**\n * Converts the result of [RegExp.exec] to an array where the first element contains the entire matched text and each subsequent\n * element is the text matched by each capturing parenthesis.\n */\npublic inline fun RegExpMatch.asArray(): Array<out String?> = unsafeCast<Array<out String?>>()\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\npublic actual class StringBuilder actual constructor(content: String) : Appendable, CharSequence {\n    /**\n     * Constructs an empty string builder with the specified initial [capacity].\n     *\n     * In Kotlin/JS implementation of StringBuilder the initial capacity has no effect on the further performance of operations.\n     */\n    actual constructor(capacity: Int) : this() {\n    }\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    actual constructor(content: CharSequence) : this(content.toString()) {}\n\n    /** Constructs an empty string builder. */\n    actual constructor() : this(\"\")\n\n    private var string: String = if (content !== undefined) content else \"\"\n\n    actual override val length: Int\n        get() = string.asDynamic().length\n\n    actual override fun get(index: Int): Char =\n        string.getOrElse(index) { throw IndexOutOfBoundsException(\"index: $index, length: $length}\") }\n\n    actual override fun subSequence(startIndex: Int, endIndex: Int): CharSequence = string.substring(startIndex, endIndex)\n\n    actual override fun append(value: Char): StringBuilder {\n        string += value\n        return this\n    }\n\n    actual override fun append(value: CharSequence?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    actual override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder =\n        this.appendRange(value ?: \"null\", startIndex, endIndex)\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    actual fun reverse(): StringBuilder {\n        var reversed = \"\"\n        var index = string.length - 1\n        while (index >= 0) {\n            val low = string[index--]\n            if (low.isLowSurrogate() && index >= 0) {\n                val high = string[index--]\n                if (high.isHighSurrogate()) {\n                    reversed = reversed + high + low\n                } else {\n                    reversed = reversed + low + high\n                }\n            } else {\n                reversed += low\n            }\n        }\n        string = reversed\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    actual fun append(value: Any?): StringBuilder {\n        string += value.toString()\n        return this\n    }\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: Boolean): StringBuilder {\n        string += value\n        return this\n    }\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun append(value: CharArray): StringBuilder {\n        string += value.concatToString()\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun append(value: String): StringBuilder = append(value)\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    actual fun append(value: String?): StringBuilder {\n        this.string += value ?: \"null\"\n        return this\n    }\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     *\n     * In Kotlin/JS implementation of StringBuilder the value returned from this method may not indicate the actual size of the backing storage.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    actual fun capacity(): Int = length\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is not extended to comply the given [minimumCapacity],\n     * thus calling this method has no effect on the further performance of operations.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun ensureCapacity(minimumCapacity: Int) {\n    }\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String): Int = this.string.asDynamic().indexOf(string)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun indexOf(string: String, startIndex: Int): Int = this.string.asDynamic().indexOf(string, startIndex)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String): Int = this.string.asDynamic().lastIndexOf(string)\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun lastIndexOf(string: String, startIndex: Int): Int {\n        if (string.isEmpty() && startIndex < 0) return -1\n        return this.string.asDynamic().lastIndexOf(string, startIndex)\n    }\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Boolean): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Char): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharArray): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.concatToString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: CharSequence?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: Any?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        string = string.substring(0, index) + value.toString() + string.substring(index)\n        return this\n    }\n\n    @Deprecated(\"Provided for binary compatibility.\", level = DeprecationLevel.HIDDEN)\n    fun insert(index: Int, value: String): StringBuilder = insert(index, value)\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun insert(index: Int, value: String?): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val toInsert = value ?: \"null\"\n        this.string = this.string.substring(0, index) + toInsert + this.string.substring(index)\n        return this\n    }\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun setLength(newLength: Int) {\n        if (newLength < 0) {\n            throw IllegalArgumentException(\"Negative new length: $newLength.\")\n        }\n\n        if (newLength <= length) {\n            string = string.substring(0, newLength)\n        } else {\n            for (i in length until newLength) {\n                string += '\\u0000'\n            }\n        }\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int): String {\n        AbstractList.checkPositionIndex(startIndex, length)\n\n        return string.substring(startIndex)\n    }\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun substring(startIndex: Int, endIndex: Int): String {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n\n        return string.substring(startIndex, endIndex)\n    }\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     *\n     * In Kotlin/JS implementation of StringBuilder the size of the backing storage is always equal to the length of the string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    actual fun trimToSize() {\n    }\n\n    override fun toString(): String = string\n\n    /**\n     * Clears the content of this string builder making it empty and returns this instance.\n     *\n     * @sample samples.text.Strings.clearStringBuilder\n     */\n    @SinceKotlin(\"1.3\")\n    public fun clear(): StringBuilder {\n        string = \"\"\n        return this\n    }\n\n    /**\n     * Sets the character at the specified [index] to the specified [value].\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public operator fun set(index: Int, value: Char) {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + value + string.substring(index + 1)\n    }\n\n    /**\n     * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to replace.\n     * @param endIndex the end (exclusive) of the range to replace.\n     * @param value the string to replace with.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        this.string = this.string.substring(0, startIndex) + value + this.string.substring(endIndex)\n        return this\n    }\n\n    private fun checkReplaceRange(startIndex: Int, endIndex: Int, length: Int) {\n        if (startIndex < 0 || startIndex > length) {\n            throw IndexOutOfBoundsException(\"startIndex: $startIndex, length: $length\")\n        }\n        if (startIndex > endIndex) {\n            throw IllegalArgumentException(\"startIndex($startIndex) > endIndex($endIndex)\")\n        }\n    }\n\n    /**\n     * Removes the character at the specified [index] from this string builder and returns this instance.\n     *\n     * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n     *\n     * @param index the index of `Char` to remove.\n     *\n     * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteAt(index: Int): StringBuilder {\n        AbstractList.checkElementIndex(index, length)\n\n        string = string.substring(0, index) + string.substring(index + 1)\n        return this\n    }\n\n    /**\n     * Removes characters in the specified range from this string builder and returns this instance.\n     *\n     * @param startIndex the beginning (inclusive) of the range to remove.\n     * @param endIndex the end (exclusive) of the range to remove.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun deleteRange(startIndex: Int, endIndex: Int): StringBuilder {\n        checkReplaceRange(startIndex, endIndex, length)\n\n        string = string.substring(0, startIndex) + string.substring(endIndex)\n        return this\n    }\n\n    /**\n     * Copies characters from this string builder into the [destination] character array.\n     *\n     * @param destination the array to copy to.\n     * @param destinationOffset the position in the array to copy to, 0 by default.\n     * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n     * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n     *  or when that index is out of the [destination] array indices range.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) {\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, length)\n        AbstractList.checkBoundsIndexes(destinationOffset, destinationOffset + endIndex - startIndex, destination.size)\n\n        var dstIndex = destinationOffset\n        for (index in startIndex until endIndex) {\n            destination[dstIndex++] = string[index]\n        }\n    }\n\n    /**\n     * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at specified [startIndex].\n     *\n     * @param value the array from which characters are appended.\n     * @param startIndex the beginning (inclusive) of the subarray to append.\n     * @param endIndex the end (exclusive) of the subarray to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        string += value.concatToString(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string += stringCsq.substring(startIndex, endIndex)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] array, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the array from which characters are inserted.\n     * @param startIndex the beginning (inclusive) of the subarray to insert.\n     * @param endIndex the end (exclusive) of the subarray to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, this.length)\n\n        string = string.substring(0, index) + value.concatToString(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n\n    /**\n     * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which a subsequence is inserted.\n     * @param startIndex the beginning (inclusive) of the subsequence to insert.\n     * @param endIndex the end (exclusive) of the subsequence to insert.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public fun insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder {\n        AbstractList.checkPositionIndex(index, length)\n\n        val stringCsq = value.toString()\n        AbstractList.checkBoundsIndexes(startIndex, endIndex, stringCsq.length)\n\n        string = string.substring(0, index) + stringCsq.substring(startIndex, endIndex) + string.substring(index)\n        return this\n    }\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.clear(): StringBuilder = this.clear()\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun StringBuilder.set(index: Int, value: Char) = this.set(index, value)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder =\n    this.setRange(startIndex, endIndex, value)\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteAt(index: Int): StringBuilder = this.deleteAt(index)\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder = this.deleteRange(startIndex, endIndex)\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\", \"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length) =\n    this.toCharArray(destination, destinationOffset, startIndex, endIndex)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.appendRange(value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\", \"NOTHING_TO_INLINE\")\npublic actual inline fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder =\n    this.insertRange(index, value, startIndex, endIndex)\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toLowerCase(): Char = lowercaseChar()\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercaseChar(): Char = lowercase()[0]\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.lowercase(): String = toString().asDynamic().toLowerCase().unsafeCast<String>()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.toUpperCase(): Char = uppercaseChar()\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic actual fun Char.uppercaseChar(): Char {\n    val uppercase = uppercase()\n    return if (uppercase.length > 1) this else uppercase[0]\n}\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\n@kotlin.internal.InlineOnly\npublic actual inline fun Char.uppercase(): String = toString().asDynamic().toUpperCase().unsafeCast<String>()\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.titlecaseChar(): Char = titlecaseCharImpl()\n\n/**\n * Returns `true` if this character is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).\n */\npublic actual fun Char.isHighSurrogate(): Boolean = this in Char.MIN_HIGH_SURROGATE..Char.MAX_HIGH_SURROGATE\n\n/**\n * Returns `true` if this character is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).\n */\npublic actual fun Char.isLowSurrogate(): Boolean = this in Char.MIN_LOW_SURROGATE..Char.MAX_LOW_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic actual val Char.category: CharCategory\n    get() = CharCategory.valueOf(getCategoryValue())\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDefined(): Boolean {\n    if (this < '\\u0080') {\n        return true\n    }\n    return getCategoryValue() != CharCategory.UNASSIGNED.value\n}\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetter(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLetterOrDigit(): Boolean {\n    if (this in 'a'..'z' || this in 'A'..'Z' || this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n\n    return isDigitImpl() || isLetterImpl()\n}\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isDigit(): Boolean {\n    if (this in '0'..'9') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isDigitImpl()\n}\n\n/**\n * Returns `true` if this character is upper case.\n *\n * A character is considered to be an upper case character if its [category] is [CharCategory.UPPERCASE_LETTER],\n * or it has contributory property `Other_Uppercase` as defined by the Unicode Standard.\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isUpperCase(): Boolean {\n    if (this in 'A'..'Z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isUpperCaseImpl()\n}\n\n/**\n * Returns `true` if this character is lower case.\n *\n * A character is considered to be a lower case character if its [category] is [CharCategory.LOWERCASE_LETTER],\n * or it has contributory property `Other_Lowercase` as defined by the Unicode Standard.\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isLowerCase(): Boolean {\n    if (this in 'a'..'z') {\n        return true\n    }\n    if (this < '\\u0080') {\n        return false\n    }\n    return isLowerCaseImpl()\n}\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isTitleCase(): Boolean {\n    if (this < '\\u0080') {\n        return false\n    }\n    return getCategoryValue() == CharCategory.TITLECASE_LETTER.value\n}\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic actual fun Char.isISOControl(): Boolean {\n    return this <= '\\u001F' || this in '\\u007F'..'\\u009F'\n}\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic actual fun Char.isWhitespace(): Boolean = isWhitespaceImpl()","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n\n/**\n * Returns `true` if the content of this string is equal to the word \"true\", ignoring case, and `false` otherwise.\n */\n@Deprecated(\"Use Kotlin compiler 1.4 to avoid deprecation warning.\")\n@DeprecatedSinceKotlin(hiddenSince = \"1.4\")\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toBoolean(): Boolean = this.toBoolean()\n\n/**\n * Returns `true` if this string is not `null` and its content is equal to the word \"true\", ignoring case, and `false` otherwise.\n *\n * There are also strict versions of the function available on non-nullable String, [toBooleanStrict] and [toBooleanStrictOrNull].\n */\n@SinceKotlin(\"1.4\")\npublic actual fun String?.toBoolean(): Boolean = this != null && this.lowercase() == \"true\"\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toByte(): Byte = toByteOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a signed [Byte] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toByte(radix: Int): Byte = toByteOrNull(radix) ?: numberFormatError(this)\n\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toShort(): Short = toShortOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Short] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toShort(radix: Int): Short = toShortOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toInt(): Int = toIntOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as an [Int] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toInt(radix: Int): Int = toIntOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toLong(): Long = toLongOrNull() ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Long] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n * @throws IllegalArgumentException when [radix] is not a valid radix for string to number conversion.\n */\npublic actual fun String.toLong(radix: Int): Long = toLongOrNull(radix) ?: numberFormatError(this)\n\n/**\n * Parses the string as a [Double] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\npublic actual fun String.toDouble(): Double = (+(this.asDynamic())).unsafeCast<Double>().also {\n    if (it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n        numberFormatError(this)\n}\n\n/**\n * Parses the string as a [Float] number and returns the result.\n * @throws NumberFormatException if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloat(): Float = toDouble().unsafeCast<Float>()\n\n/**\n * Parses the string as a [Double] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\npublic actual fun String.toDoubleOrNull(): Double? = (+(this.asDynamic())).unsafeCast<Double>().takeIf {\n    !(it.isNaN() && !this.isNaN() || it == 0.0 && this.isBlank())\n}\n\n/**\n * Parses the string as a [Float] number and returns the result\n * or `null` if the string is not a valid representation of a number.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toFloatOrNull(): Float? = toDoubleOrNull().unsafeCast<Float?>()\n\n/**\n * Returns a string representation of this [Byte] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Byte.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Short] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\n@kotlin.internal.InlineOnly\npublic actual inline fun Short.toString(radix: Int): String = this.toInt().toString(radix)\n\n/**\n * Returns a string representation of this [Int] value in the specified [radix].\n *\n * @throws IllegalArgumentException when [radix] is not a valid radix for number to string conversion.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun Int.toString(radix: Int): String = asDynamic().toString(checkRadix(radix))\n\nprivate fun String.isNaN(): Boolean = when (this.lowercase()) {\n    \"nan\", \"+nan\", \"-nan\" -> true\n    else -> false\n}\n\n/**\n * Checks whether the given [radix] is valid radix for string to number and number to string conversion.\n */\n@PublishedApi\ninternal actual fun checkRadix(radix: Int): Int {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"radix $radix was not in valid range 2..36\")\n    }\n    return radix\n}\n\ninternal actual fun digitOf(char: Char, radix: Int): Int = when {\n    char >= '0' && char <= '9' -> char - '0'\n    char >= 'A' && char <= 'Z' -> char - 'A' + 10\n    char >= 'a' && char <= 'z' -> char - 'a' + 10\n    char < '\\u0080' -> -1\n    char >= '\\uFF21' && char <= '\\uFF3A' -> char - '\\uFF21' + 10 // full-width latin capital letter\n    char >= '\\uFF41' && char <= '\\uFF5A' -> char - '\\uFF41' + 10 // full-width latin small letter\n    else -> char.digitToIntImpl()\n}.let { if (it >= radix) -1 else it }\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Provides enumeration values to use to set regular expression options.\n */\npublic actual enum class RegexOption(val value: String) {\n    /** Enables case-insensitive matching. */\n    IGNORE_CASE(\"i\"),\n    /** Enables multiline mode.\n     *\n     * In multiline mode the expressions `^` and `$` match just after or just before,\n     * respectively, a line terminator or the end of the input sequence. */\n    MULTILINE(\"m\")\n}\n\nprivate fun Iterable<RegexOption>.toFlags(prepend: String): String = joinToString(\"\", prefix = prepend) { it.value }\n\n\n/**\n * Represents the results from a single capturing group within a [MatchResult] of [Regex].\n *\n * @param value The value of captured group.\n */\npublic actual data class MatchGroup(actual val value: String)\n\n\n/**\n * Returns a named group with the specified [name].\n *\n * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n * @throws UnsupportedOperationException if this match group collection doesn't support getting match groups by name,\n * for example, when it's not supported by the current platform.\n */\n@SinceKotlin(\"1.7\")\npublic operator fun MatchGroupCollection.get(name: String): MatchGroup? {\n    val namedGroups = this as? MatchNamedGroupCollection\n        ?: throw UnsupportedOperationException(\"Retrieving groups by name is not supported on this platform.\")\n\n    return namedGroups[name]\n}\n\n\n/**\n * Represents a compiled regular expression.\n * Provides functions to match strings in text with a pattern, replace the found occurrences and split text around matches.\n *\n * For pattern syntax reference see [MDN RegExp](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#Special_characters_meaning_in_regular_expressions)\n * and [http://www.w3schools.com/jsref/jsref_obj_regexp.asp](https://www.w3schools.com/jsref/jsref_obj_regexp.asp).\n *\n * Note that `RegExp` objects under the hood are constructed with [the \"u\" flag](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/unicode)\n * that enables Unicode-related features in regular expressions. This also makes the pattern syntax more strict,\n * for example, prohibiting unnecessary escape sequences.\n *\n * @constructor Creates a regular expression from the specified [pattern] string and the specified set of [options].\n */\npublic actual class Regex actual constructor(pattern: String, options: Set<RegexOption>) {\n\n    /** Creates a regular expression from the specified [pattern] string and the specified single [option].  */\n    public actual constructor(pattern: String, option: RegexOption) : this(pattern, setOf(option))\n\n    /** Creates a regular expression from the specified [pattern] string and the default options.  */\n    public actual constructor(pattern: String) : this(pattern, emptySet())\n\n\n    /** The pattern string of this regular expression. */\n    public actual val pattern: String = pattern\n    /** The set of options that were used to create this regular expression. */\n    public actual val options: Set<RegexOption> = options.toSet()\n    private val nativePattern: RegExp = RegExp(pattern, options.toFlags(\"gu\"))\n    private var nativeStickyPattern: RegExp? = null\n    private fun initStickyPattern(): RegExp =\n        nativeStickyPattern ?: RegExp(pattern, options.toFlags(\"yu\")).also { nativeStickyPattern = it }\n\n    private var nativeMatchesEntirePattern: RegExp? = null\n    private fun initMatchesEntirePattern(): RegExp =\n        nativeMatchesEntirePattern ?: run {\n            if (pattern.startsWith('^') && pattern.endsWith('$'))\n                nativePattern\n            else\n                return RegExp(\"^${pattern.trimStart('^').trimEnd('$')}$\", options.toFlags(\"gu\"))\n        }.also { nativeMatchesEntirePattern = it }\n\n\n    /** Indicates whether the regular expression matches the entire [input]. */\n    public actual infix fun matches(input: CharSequence): Boolean {\n        nativePattern.reset()\n        val match = nativePattern.exec(input.toString())\n        return match != null && match.index == 0 && nativePattern.lastIndex == input.length\n    }\n\n    /** Indicates whether the regular expression can find at least one match in the specified [input]. */\n    public actual fun containsMatchIn(input: CharSequence): Boolean {\n        nativePattern.reset()\n        return nativePattern.test(input.toString())\n    }\n\n    @SinceKotlin(\"1.7\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public actual fun matchesAt(input: CharSequence, index: Int): Boolean {\n        if (index < 0 || index > input.length) {\n            throw IndexOutOfBoundsException(\"index out of bounds: $index, input length: ${input.length}\")\n        }\n        val pattern = initStickyPattern()\n        pattern.lastIndex = index\n        return pattern.test(input.toString())\n    }\n\n    /**\n     * Returns the first match of a regular expression in the [input], beginning at the specified [startIndex].\n     *\n     * @param startIndex An index to start search with, by default 0. Must be not less than zero and not greater than `input.length()`\n     * @return An instance of [MatchResult] if match was found or `null` otherwise.\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     * @sample samples.text.Regexps.find\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun find(input: CharSequence, startIndex: Int = 0): MatchResult? {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return nativePattern.findNext(input.toString(), startIndex, nativePattern)\n    }\n\n    /**\n     * Returns a sequence of all occurrences of a regular expression within the [input] string, beginning at the specified [startIndex].\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of the [input] char sequence.\n     *\n     * @sample samples.text.Regexps.findAll\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun findAll(input: CharSequence, startIndex: Int = 0): Sequence<MatchResult> {\n        if (startIndex < 0 || startIndex > input.length) {\n            throw IndexOutOfBoundsException(\"Start index out of bounds: $startIndex, input length: ${input.length}\")\n        }\n        return generateSequence({ find(input, startIndex) }, { match -> match.next() })\n    }\n\n    /**\n     * Attempts to match the entire [input] CharSequence against the pattern.\n     *\n     * @return An instance of [MatchResult] if the entire input matches or `null` otherwise.\n     */\n    public actual fun matchEntire(input: CharSequence): MatchResult? =\n        initMatchesEntirePattern().findNext(input.toString(), 0, nativePattern)\n\n    @SinceKotlin(\"1.7\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    public actual fun matchAt(input: CharSequence, index: Int): MatchResult? {\n        if (index < 0 || index > input.length) {\n            throw IndexOutOfBoundsException(\"index out of bounds: $index, input length: ${input.length}\")\n        }\n        return initStickyPattern().findNext(input.toString(), index, nativePattern)\n    }\n\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * The replacement string may contain references to the captured groups during a match. Occurrences of `${name}` or `$index`\n     * in the replacement string will be substituted with the subsequences corresponding to the captured groups with the specified name or index.\n     * In case of `$index`, the first digit after '$' is always treated as a part of group reference. Subsequent digits are incorporated\n     * into `index` only if they would form a valid group reference. Only the digits '0'..'9' are considered as potential components\n     * of the group reference. Note that indexes of captured groups start from 1, and the group with index 0 is the whole match.\n     * In case of `${name}`, the `name` can consist of latin letters 'a'..'z' and 'A'..'Z', or digits '0'..'9'. The first character must be\n     * a letter.\n     *\n     * Backslash character '\\' can be used to include the succeeding character as a literal in the replacement string, e.g, `\\$` or `\\\\`.\n     * [Regex.escapeReplacement] can be used if [replacement] have to be treated as a literal string.\n     *\n     * @param input the char sequence to find matches of this regular expression in\n     * @param replacement the expression to replace found matches with\n     * @return the result of replacing each occurrence of this regular expression in [input] with the result of evaluating the [replacement] expression\n     * @throws RuntimeException if [replacement] expression is malformed, or capturing group with specified `name` or `index` does not exist\n     */\n    public actual fun replace(input: CharSequence, replacement: String): String {\n        if (!replacement.contains('\\\\') && !replacement.contains('$')) {\n            return input.toString().nativeReplace(nativePattern, replacement)\n        }\n        return replace(input) { substituteGroupRefs(it, replacement) }\n    }\n\n    /**\n     * Replaces all occurrences of this regular expression in the specified [input] string with the result of\n     * the given function [transform] that takes [MatchResult] and returns a string to be used as a\n     * replacement for that match.\n     */\n    public actual fun replace(input: CharSequence, transform: (MatchResult) -> CharSequence): String {\n        var match = find(input)\n        if (match == null) return input.toString()\n\n        var lastStart = 0\n        val length = input.length\n        val sb = StringBuilder(length)\n        do {\n            val foundMatch = match!!\n            sb.append(input, lastStart, foundMatch.range.start)\n            sb.append(transform(foundMatch))\n            lastStart = foundMatch.range.endInclusive + 1\n            match = foundMatch.next()\n        } while (lastStart < length && match != null)\n\n        if (lastStart < length) {\n            sb.append(input, lastStart, length)\n        }\n\n        return sb.toString()\n    }\n\n    /**\n     * Replaces the first occurrence of this regular expression in the specified [input] string with specified [replacement] expression.\n     *\n     * The replacement string may contain references to the captured groups during a match. Occurrences of `${name}` or `$index`\n     * in the replacement string will be substituted with the subsequences corresponding to the captured groups with the specified name or index.\n     * In case of `$index`, the first digit after '$' is always treated as a part of group reference. Subsequent digits are incorporated\n     * into `index` only if they would form a valid group reference. Only the digits '0'..'9' are considered as potential components\n     * of the group reference. Note that indexes of captured groups start from 1, and the group with index 0 is the whole match.\n     * In case of `${name}`, the `name` can consist of latin letters 'a'..'z' and 'A'..'Z', or digits '0'..'9'. The first character must be\n     * a letter.\n     *\n     * Backslash character '\\' can be used to include the succeeding character as a literal in the replacement string, e.g, `\\$` or `\\\\`.\n     * [Regex.escapeReplacement] can be used if [replacement] have to be treated as a literal string.\n     *\n     * @param input the char sequence to find a match of this regular expression in\n     * @param replacement the expression to replace the found match with\n     * @return the result of replacing the first occurrence of this regular expression in [input] with the result of evaluating the [replacement] expression\n     * @throws RuntimeException if [replacement] expression is malformed, or capturing group with specified `name` or `index` does not exist\n     */\n    public actual fun replaceFirst(input: CharSequence, replacement: String): String {\n        if (!replacement.contains('\\\\') && !replacement.contains('$')) {\n            val nonGlobalOptions = options.toFlags(\"u\")\n            return input.toString().nativeReplace(RegExp(pattern, nonGlobalOptions), replacement)\n        }\n\n        val match = find(input) ?: return input.toString()\n\n        return buildString {\n            append(input.substring(0, match.range.first))\n            append(substituteGroupRefs(match, replacement))\n            append(input.substring(match.range.last + 1, input.length))\n        }\n    }\n\n    /**\n     * Splits the [input] CharSequence to a list of strings around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     */\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun split(input: CharSequence, limit: Int = 0): List<String> {\n        requireNonNegativeLimit(limit)\n        val matches = findAll(input).let { if (limit == 0) it else it.take(limit - 1) }\n        val result = mutableListOf<String>()\n        var lastStart = 0\n\n        for (match in matches) {\n            result.add(input.subSequence(lastStart, match.range.start).toString())\n            lastStart = match.range.endInclusive + 1\n        }\n        result.add(input.subSequence(lastStart, input.length).toString())\n        return result\n    }\n\n    /**\n     * Splits the [input] CharSequence to a sequence of strings around matches of this regular expression.\n     *\n     * @param limit Non-negative value specifying the maximum number of substrings the string can be split to.\n     * Zero by default means no limit is set.\n     * @sample samples.text.Regexps.splitToSequence\n     */\n    @SinceKotlin(\"1.6\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    @Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\n    public actual fun splitToSequence(input: CharSequence, limit: Int = 0): Sequence<String> {\n        requireNonNegativeLimit(limit)\n\n        return sequence {\n            var match = find(input)\n            if (match == null || limit == 1) {\n                yield(input.toString())\n                return@sequence\n            }\n\n            var nextStart = 0\n            var splitCount = 0\n\n            do {\n                val foundMatch = match!!\n                yield(input.substring(nextStart, foundMatch.range.first))\n                nextStart = foundMatch.range.endInclusive + 1\n                match = foundMatch.next()\n            } while (++splitCount != limit - 1 && match != null)\n\n            yield(input.substring(nextStart, input.length))\n        }\n    }\n\n\n    /**\n     * Returns the string representation of this regular expression, namely the [pattern] of this regular expression.\n     *\n     * Note that another regular expression constructed from the same pattern string may have different [options]\n     * and may match strings differently.\n     */\n    public override fun toString(): String = nativePattern.toString()\n\n    actual companion object {\n        /**\n         * Returns a regular expression that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun fromLiteral(literal: String): Regex = Regex(escape(literal))\n\n        /**\n         * Returns a regular expression pattern string that matches the specified [literal] string literally.\n         * No characters of that string will have special meaning when searching for an occurrence of the regular expression.\n         */\n        public actual fun escape(literal: String): String = literal.nativeReplace(patternEscape, \"\\\\$&\")\n\n        /**\n         * Returns a literal replacement expression for the specified [literal] string.\n         * No characters of that string will have special meaning when it is used as a replacement string in [Regex.replace] function.\n         */\n        public actual fun escapeReplacement(literal: String): String = literal.nativeReplace(replacementEscape, \"\\\\$&\")\n\n        private val patternEscape = RegExp(\"\"\"[\\\\^$*+?.()|[\\]{}]\"\"\", \"g\")\n        private val replacementEscape = RegExp(\"\"\"[\\\\$]\"\"\", \"g\")\n\n        internal fun nativeEscapeReplacement(literal: String): String = literal.nativeReplace(nativeReplacementEscape, \"$$$$\")\n        private val nativeReplacementEscape = RegExp(\"\"\"\\$\"\"\", \"g\")\n    }\n}\n\n\n\nprivate fun RegExp.findNext(input: String, from: Int, nextPattern: RegExp): MatchResult? {\n    this.lastIndex = from\n    val match = exec(input)\n    if (match == null) return null\n    val range = match.index..lastIndex - 1\n\n    return object : MatchResult {\n        override val range: IntRange = range\n        override val value: String\n            get() = match[0]!!\n\n        override val groups: MatchGroupCollection = object : MatchNamedGroupCollection, AbstractCollection<MatchGroup?>() {\n            override val size: Int get() = match.length\n            override fun iterator(): Iterator<MatchGroup?> = indices.asSequence().map { this[it] }.iterator()\n            override fun get(index: Int): MatchGroup? = match[index]?.let { MatchGroup(it) }\n\n            override fun get(name: String): MatchGroup? {\n                // An object of named capturing groups whose keys are the names and values are the capturing groups\n                // or undefined if no named capturing groups were defined.\n                val groups = match.asDynamic().groups\n                    ?: throw IllegalArgumentException(\"Capturing group with name {$name} does not exist. No named capturing group was defined in Regex\")\n\n                // If the match was successful but the group specified failed to match any part of the input sequence,\n                // the associated value is 'undefined'. Value for a non-existent key is also 'undefined'. Thus, explicitly check if the key exists.\n                if (!hasOwnPrototypeProperty(groups, name))\n                    throw IllegalArgumentException(\"Capturing group with name {$name} does not exist\")\n\n                val value = groups[name]\n                return if (value == undefined) null else MatchGroup(value as String)\n            }\n        }\n\n        private fun hasOwnPrototypeProperty(o: Any?, name: String): Boolean {\n            return js(\"Object\").prototype.hasOwnProperty.call(o, name).unsafeCast<Boolean>()\n        }\n\n\n        private var groupValues_: List<String>? = null\n\n        override val groupValues: List<String>\n            get() {\n                if (groupValues_ == null) {\n                    groupValues_ = object : AbstractList<String>() {\n                        override val size: Int get() = match.length\n                        override fun get(index: Int): String = match[index] ?: \"\"\n                    }\n                }\n                return groupValues_!!\n            }\n\n        override fun next(): MatchResult? =\n            nextPattern.findNext(input, if (range.isEmpty()) advanceToNextCharacter(range.start) else range.endInclusive + 1, nextPattern)\n\n        private fun advanceToNextCharacter(index: Int): Int {\n            if (index < input.lastIndex) {\n                val code1 = input.asDynamic().charCodeAt(index).unsafeCast<Int>()\n                if (code1 in 0xD800..0xDBFF) {\n                    val code2 = input.asDynamic().charCodeAt(index + 1).unsafeCast<Int>()\n                    if (code2 in 0xDC00..0xDFFF) {\n                        return index + 2\n                    }\n                }\n            }\n            return index + 1\n        }\n    }\n}\n\n// The same code from K/N Regex.kt\nprivate fun substituteGroupRefs(match: MatchResult, replacement: String): String {\n    var index = 0\n    val result = StringBuilder()\n\n    while (index < replacement.length) {\n        val char = replacement[index++]\n        if (char == '\\\\') {\n            if (index == replacement.length)\n                throw IllegalArgumentException(\"The Char to be escaped is missing\")\n\n            result.append(replacement[index++])\n        } else if (char == '$') {\n            if (index == replacement.length)\n                throw IllegalArgumentException(\"Capturing group index is missing\")\n\n            if (replacement[index] == '{') {\n                val endIndex = replacement.readGroupName(++index)\n\n                if (index == endIndex)\n                    throw IllegalArgumentException(\"Named capturing group reference should have a non-empty name\")\n                if (endIndex == replacement.length || replacement[endIndex] != '}')\n                    throw IllegalArgumentException(\"Named capturing group reference is missing trailing '}'\")\n\n                val groupName = replacement.substring(index, endIndex)\n\n                result.append(match.groups[groupName]?.value ?: \"\")\n                index = endIndex + 1    // skip past '}'\n            } else {\n                if (replacement[index] !in '0'..'9')\n                    throw IllegalArgumentException(\"Invalid capturing group reference\")\n\n                val groups = match.groups\n                val endIndex = replacement.readGroupIndex(index, groups.size)\n                val groupIndex = replacement.substring(index, endIndex).toInt()\n\n                if (groupIndex >= groups.size)\n                    throw IndexOutOfBoundsException(\"Group with index $groupIndex does not exist\")\n\n                result.append(groups[groupIndex]?.value ?: \"\")\n                index = endIndex\n            }\n        } else {\n            result.append(char)\n        }\n    }\n    return result.toString()\n}\n\n// The name must be a legal JavaScript identifier. See https://262.ecma-international.org/5.1/#sec-7.6\n// Don't try to validate the referenced group name as it may be time-consuming.\n// If the name is invalid, it won't be found in `match.groups` anyway and will throw.\n// Group names in the target Regex are validated at creation time.\nprivate fun String.readGroupName(startIndex: Int): Int {\n    var index = startIndex\n    while (index < length) {\n        if (this[index] == '}') {\n            break\n        } else {\n            index++\n        }\n    }\n    return index\n}\n\nprivate fun String.readGroupIndex(startIndex: Int, groupCount: Int): Int {\n    // at least one digit after '$' is always captured\n    var index = startIndex + 1\n    var groupIndex = this[startIndex] - '0'\n\n    // capture the largest valid group index\n    while (index < length && this[index] in '0'..'9') {\n        val newGroupIndex = (groupIndex * 10) + (this[index] - '0')\n        if (newGroupIndex in 0 until groupCount) {\n            groupIndex = newGroupIndex\n            index++\n        } else {\n            break\n        }\n    }\n    return index\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n@file:Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n\npackage kotlin.text\n\nimport kotlin.contracts.*\n\n/**\n * A mutable sequence of characters.\n *\n * String builder can be used to efficiently perform multiple string manipulation operations.\n */\nexpect class StringBuilder : Appendable, CharSequence {\n    /** Constructs an empty string builder. */\n    constructor()\n\n    /** Constructs an empty string builder with the specified initial [capacity]. */\n    constructor(capacity: Int)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] char sequence. */\n    constructor(content: CharSequence)\n\n    /** Constructs a string builder that contains the same characters as the specified [content] string. */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    constructor(content: String)\n\n    override val length: Int\n\n    override operator fun get(index: Int): Char\n\n    override fun subSequence(startIndex: Int, endIndex: Int): CharSequence\n\n    override fun append(value: Char): StringBuilder\n    override fun append(value: CharSequence?): StringBuilder\n    override fun append(value: CharSequence?, startIndex: Int, endIndex: Int): StringBuilder\n\n    /**\n     * Reverses the contents of this string builder and returns this instance.\n     *\n     * Surrogate pairs included in this string builder are treated as single characters.\n     * Therefore, the order of the high-low surrogates is never reversed.\n     *\n     * Note that the reverse operation may produce new surrogate pairs that were unpaired low-surrogates and high-surrogates before the operation.\n     * For example, reversing `\"\\uDC00\\uD800\"` produces `\"\\uD800\\uDC00\"` which is a valid surrogate pair.\n     */\n    fun reverse(): StringBuilder\n\n    /**\n     * Appends the string representation of the specified object [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    fun append(value: Any?): StringBuilder\n\n    /**\n     * Appends the string representation of the specified boolean [value] to this string builder and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was appended to this string builder.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: Boolean): StringBuilder\n\n    /**\n     * Appends characters in the specified character array [value] to this string builder and returns this instance.\n     *\n     * Characters are appended in order, starting at the index 0.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun append(value: CharArray): StringBuilder\n\n    /**\n     * Appends the specified string [value] to this string builder and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are appended.\n     */\n    @SinceKotlin(\"1.3\")\n    fun append(value: String?): StringBuilder\n\n    /**\n     * Returns the current capacity of this string builder.\n     *\n     * The capacity is the maximum length this string builder can have before an allocation occurs.\n     */\n    @SinceKotlin(\"1.3\")\n//    @ExperimentalStdlibApi\n    @Deprecated(\"Obtaining StringBuilder capacity is not supported in JS and common code.\", level = DeprecationLevel.ERROR)\n    fun capacity(): Int\n\n    /**\n     * Ensures that the capacity of this string builder is at least equal to the specified [minimumCapacity].\n     *\n     * If the current capacity is less than the [minimumCapacity], a new backing storage is allocated with greater capacity.\n     * Otherwise, this method takes no action and simply returns.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun ensureCapacity(minimumCapacity: Int)\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the first occurrence of the specified [string],\n     * starting at the specified [startIndex].\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun indexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string].\n     * The last occurrence of empty string `\"\"` is considered to be at the index equal to `this.length`.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String): Int\n\n    /**\n     * Returns the index within this string builder of the last occurrence of the specified [string],\n     * starting from the specified [startIndex] toward the beginning.\n     *\n     * Returns `-1` if the specified [string] does not occur in this string builder starting at the specified [startIndex].\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun lastIndexOf(string: String, startIndex: Int): Int\n\n    /**\n     * Inserts the string representation of the specified boolean [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Boolean): StringBuilder\n\n    /**\n     * Inserts the specified character [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Char): StringBuilder\n\n    /**\n     * Inserts characters in the specified character array [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in same order as in the [value] character array, starting at [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharArray): StringBuilder\n\n    /**\n     * Inserts characters in the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n     *\n     * @param index the position in this string builder to insert at.\n     * @param value the character sequence from which characters are inserted. If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: CharSequence?): StringBuilder\n\n    /**\n     * Inserts the string representation of the specified object [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * The overall effect is exactly as if the [value] were converted to a string by the `value.toString()` method,\n     * and then that string was inserted into this string builder at the specified [index].\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: Any?): StringBuilder\n\n    /**\n     * Inserts the string [value] into this string builder at the specified [index] and returns this instance.\n     *\n     * If [value] is `null`, then the four characters `\"null\"` are inserted.\n     *\n     * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun insert(index: Int, value: String?): StringBuilder\n\n    /**\n     *  Sets the length of this string builder to the specified [newLength].\n     *\n     *  If the [newLength] is less than the current length, it is changed to the specified [newLength].\n     *  Otherwise, null characters '\\u0000' are appended to this string builder until its length is less than the [newLength].\n     *\n     *  Note that in Kotlin/JS [set] operator function has non-constant execution time complexity.\n     *  Therefore, increasing length of this string builder and then updating each character by index may slow down your program.\n     *\n     *  @throws IndexOutOfBoundsException or [IllegalArgumentException] if [newLength] is less than zero.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun setLength(newLength: Int)\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [length] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException if [startIndex] is less than zero or greater than the length of this string builder.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int): String\n\n    /**\n     * Returns a new [String] that contains characters in this string builder at [startIndex] (inclusive) and up to the [endIndex] (exclusive).\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun substring(startIndex: Int, endIndex: Int): String\n\n    /**\n     * Attempts to reduce storage used for this string builder.\n     *\n     * If the backing storage of this string builder is larger than necessary to hold its current contents,\n     * then it may be resized to become more space efficient.\n     * Calling this method may, but is not required to, affect the value of the [capacity] property.\n     */\n    @SinceKotlin(\"1.4\")\n    @WasExperimental(ExperimentalStdlibApi::class)\n    fun trimToSize()\n}\n\n\n/**\n * Clears the content of this string builder making it empty and returns this instance.\n *\n * @sample samples.text.Strings.clearStringBuilder\n */\n@SinceKotlin(\"1.3\")\npublic expect fun StringBuilder.clear(): StringBuilder\n\n/**\n * Sets the character at the specified [index] to the specified [value].\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect operator fun StringBuilder.set(index: Int, value: Char)\n\n/**\n * Replaces characters in the specified range of this string builder with characters in the specified string [value] and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to replace.\n * @param endIndex the end (exclusive) of the range to replace.\n * @param value the string to replace with.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] if [startIndex] is less than zero, greater than the length of this string builder, or `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.setRange(startIndex: Int, endIndex: Int, value: String): StringBuilder\n\n/**\n * Removes the character at the specified [index] from this string builder and returns this instance.\n *\n * If the `Char` at the specified [index] is part of a supplementary code point, this method does not remove the entire supplementary character.\n *\n * @param index the index of `Char` to remove.\n *\n * @throws IndexOutOfBoundsException if [index] is out of bounds of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteAt(index: Int): StringBuilder\n\n/**\n * Removes characters in the specified range from this string builder and returns this instance.\n *\n * @param startIndex the beginning (inclusive) of the range to remove.\n * @param endIndex the end (exclusive) of the range to remove.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.deleteRange(startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Copies characters from this string builder into the [destination] character array.\n *\n * @param destination the array to copy to.\n * @param destinationOffset the position in the array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the range to copy, 0 by default.\n * @param endIndex the end (exclusive) of the range to copy, length of this string builder by default.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this string builder indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n *  or when that index is out of the [destination] array indices range.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.toCharArray(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = this.length)\n\n/**\n * Appends characters in a subarray of the specified character array [value] to this string builder and returns this instance.\n *\n * Characters are appended in order, starting at specified [startIndex].\n *\n * @param value the array from which characters are appended.\n * @param startIndex the beginning (inclusive) of the subarray to append.\n * @param endIndex the end (exclusive) of the subarray to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this string builder and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subarray of the specified character array [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in same order as in the [value] array, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the array from which characters are inserted.\n * @param startIndex the beginning (inclusive) of the subarray to insert.\n * @param endIndex the end (exclusive) of the subarray to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharArray, startIndex: Int, endIndex: Int): StringBuilder\n\n/**\n * Inserts characters in a subsequence of the specified character sequence [value] into this string builder at the specified [index] and returns this instance.\n *\n * The inserted characters go in the same order as in the [value] character sequence, starting at [index].\n *\n * @param index the position in this string builder to insert at.\n * @param value the character sequence from which a subsequence is inserted.\n * @param startIndex the beginning (inclusive) of the subsequence to insert.\n * @param endIndex the end (exclusive) of the subsequence to insert.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException if [index] is less than zero or greater than the length of this string builder.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun StringBuilder.insertRange(index: Int, value: CharSequence, startIndex: Int, endIndex: Int): StringBuilder\n\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\n@Deprecated(\"Use append(value: Any?) instead\", ReplaceWith(\"append(value = obj)\"), DeprecationLevel.WARNING)\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.append(obj: Any?): StringBuilder = this.append(obj)\n\n/**\n * Builds new string by populating newly created [StringBuilder] using provided [builderAction]\n * and then converting it to [String].\n */\n@kotlin.internal.InlineOnly\npublic inline fun buildString(builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder().apply(builderAction).toString()\n}\n\n/**\n * Builds new string by populating newly created [StringBuilder] initialized with the given [capacity]\n * using provided [builderAction] and then converting it to [String].\n */\n@SinceKotlin(\"1.1\")\n@kotlin.internal.InlineOnly\npublic inline fun buildString(capacity: Int, builderAction: StringBuilder.() -> Unit): String {\n    contract { callsInPlace(builderAction, InvocationKind.EXACTLY_ONCE) }\n    return StringBuilder(capacity).apply(builderAction).toString()\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: String?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/**\n * Appends all arguments to the given StringBuilder.\n */\npublic fun StringBuilder.append(vararg value: Any?): StringBuilder {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this StringBuilder. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(): StringBuilder = append('\\n')\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharSequence?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: String?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Any?): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: CharArray): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Char): StringBuilder = append(value).appendLine()\n\n/** Appends [value] to this [StringBuilder], followed by a line feed character (`\\n`). */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun StringBuilder.appendLine(value: Boolean): StringBuilder = append(value).appendLine()\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(ch: Char, fromIndex: Int): Int = nativeIndexOf(ch.toString(), fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(ch: Char, fromIndex: Int): Int = nativeLastIndexOf(ch.toString(), fromIndex)\n\n/**\n * Returns `true` if this string starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, 0)\n    else\n        return regionMatches(0, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if a substring of this string starting at the specified offset [startIndex] starts with the specified prefix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.startsWith(prefix: String, startIndex: Int, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeStartsWith(prefix, startIndex)\n    else\n        return regionMatches(startIndex, prefix, 0, prefix.length, ignoreCase)\n}\n\n/**\n * Returns `true` if this string ends with the specified suffix.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.endsWith(suffix: String, ignoreCase: Boolean = false): Boolean {\n    if (!ignoreCase)\n        return nativeEndsWith(suffix)\n    else\n        return regionMatches(length - suffix.length, suffix, 0, suffix.length, ignoreCase)\n}\n\n@Deprecated(\"Use Regex.matches() instead\", ReplaceWith(\"regex.toRegex().matches(this)\"))\n@DeprecatedSinceKotlin(warningSince = \"1.6\")\npublic fun String.matches(regex: String): Boolean {\n    @Suppress(\"DEPRECATION\")\n    val result = this.match(regex)\n    return result != null && result.size != 0\n}\n\n/**\n * Returns `true` if this string is empty or consists solely of whitespace characters.\n *\n * @sample samples.text.Strings.stringIsBlank\n */\npublic actual fun CharSequence.isBlank(): Boolean = length == 0 || indices.all { this[it].isWhitespace() }\n\n/**\n * Returns `true` if this string is equal to [other], optionally ignoring character case.\n *\n * Two strings are considered to be equal if they have the same length and the same character at the same index.\n * If [ignoreCase] is true, the result of `Char.uppercaseChar().lowercaseChar()` on each character is compared.\n *\n * @param ignoreCase `true` to ignore character case when comparing strings. By default `false`.\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String?.equals(other: String?, ignoreCase: Boolean = false): Boolean {\n    if (this == null) return other == null\n    if (other == null) return false\n    if (!ignoreCase) return this == other\n\n    if (this.length != other.length) return false\n\n    for (index in 0 until this.length) {\n        val thisChar = this[index]\n        val otherChar = other[index]\n        if (!thisChar.equals(otherChar, ignoreCase)) {\n            return false\n        }\n    }\n\n    return true\n}\n\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun CharSequence.regionMatches(thisOffset: Int, other: CharSequence, otherOffset: Int, length: Int, ignoreCase: Boolean = false): Boolean =\n    regionMatchesImpl(thisOffset, other, otherOffset, length, ignoreCase)\n\n\n/**\n * Returns a copy of this string having its first letter titlecased using the rules of the default locale,\n * or the original string if it's empty or already starts with a title case letter.\n *\n * The title case of a character is usually the same as its upper case with several exceptions.\n * The particular list of characters with the special title case form depends on the underlying platform.\n *\n * @sample samples.text.Strings.capitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { if (it.isLowerCase()) it.titlecase() else it.toString() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.capitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).uppercase() + substring(1) else this\n}\n\n/**\n * Returns a copy of this string having its first letter lowercased using the rules of the default locale,\n * or the original string if it's empty or already starts with a lower case letter.\n *\n * @sample samples.text.Strings.decapitalize\n */\n@Deprecated(\"Use replaceFirstChar instead.\", ReplaceWith(\"replaceFirstChar { it.lowercase() }\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic actual fun String.decapitalize(): String {\n    return if (isNotEmpty()) substring(0, 1).lowercase() + substring(1) else this\n}\n\n/**\n * Returns a string containing this char sequence repeated [n] times.\n * @throws [IllegalArgumentException] when n < 0.\n * @sample samples.text.Strings.repeat\n */\npublic actual fun CharSequence.repeat(n: Int): String {\n    require(n >= 0) { \"Count 'n' must be non-negative, but was $n.\" }\n    return when (n) {\n        0 -> \"\"\n        1 -> this.toString()\n        else -> {\n            var result = \"\"\n            if (!isEmpty()) {\n                var s = this.toString()\n                var count = n\n                while (true) {\n                    if ((count and 1) == 1) {\n                        result += s\n                    }\n                    count = count ushr 1\n                    if (count == 0) {\n                        break\n                    }\n                    s += s\n                }\n            }\n            return result\n        }\n    }\n}\n\n/**\n * Returns a new string obtained by replacing all occurrences of the [oldValue] substring in this string\n * with the specified [newValue] string.\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"gui\" else \"gu\"), Regex.nativeEscapeReplacement(newValue))\n\n/**\n * Returns a new string with all occurrences of [oldChar] replaced with [newChar].\n *\n * @sample samples.text.Strings.replace\n */\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replace(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"gui\" else \"gu\"), newChar.toString())\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldValue: String, newValue: String, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldValue), if (ignoreCase) \"ui\" else \"u\"), Regex.nativeEscapeReplacement(newValue))\n\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.replaceFirst(oldChar: Char, newChar: Char, ignoreCase: Boolean = false): String =\n    nativeReplace(RegExp(Regex.escape(oldChar.toString()), if (ignoreCase) \"ui\" else \"u\"), newChar.toString())\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\nimport kotlin.js.json\nimport kotlin.math.*\n\ninternal actual inline val durationAssertionsEnabled: Boolean get() = true\n\ninternal actual fun formatToExactDecimals(value: Double, decimals: Int): String {\n    val rounded = if (decimals == 0) {\n        value\n    } else {\n        val pow = 10.0.pow(decimals)\n        JsMath.round(abs(value) * pow) / pow * sign(value)\n    }\n    return if (abs(rounded) < 1e21) {\n        // toFixed switches to scientific format after 1e21\n        rounded.asDynamic().toFixed(decimals).unsafeCast<String>()\n    } else {\n        // toPrecision outputs the specified number of digits, but only for positive numbers\n        val positive = abs(rounded)\n        val positiveString = positive.asDynamic().toPrecision(ceil(log10(positive)) + decimals).unsafeCast<String>()\n        if (rounded < 0) \"-$positiveString\" else positiveString\n    }\n}\n\ninternal actual fun formatUpToDecimals(value: Double, decimals: Int): String {\n    return value.asDynamic().toLocaleString(\"en-us\", json(\"maximumFractionDigits\" to decimals)).unsafeCast<String>()\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.time\n\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\npublic actual enum class DurationUnit(internal val scale: Double) {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS(1e0),\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS(1e3),\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS(1e6),\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS(1e9),\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES(60e9),\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS(3600e9),\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS(86400e9);\n}\n\n@SinceKotlin(\"1.3\")\ninternal actual fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> value * (sourceUnit.scale / targetUnit.scale)\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale)\n        else -> value\n    }\n}\n\n@SinceKotlin(\"1.5\")\ninternal actual fun convertDurationUnitOverflow(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> value * (sourceUnit.scale / targetUnit.scale).toLong()\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale).toLong()\n        else -> value\n    }\n}\n\n@SinceKotlin(\"1.5\")\ninternal actual fun convertDurationUnit(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long {\n    val sourceCompareTarget = sourceUnit.scale.compareTo(targetUnit.scale)\n    return when {\n        sourceCompareTarget > 0 -> {\n            val scale = (sourceUnit.scale / targetUnit.scale).toLong()\n            val result = value * scale\n            when {\n                result / scale == value -> result\n                value > 0 -> Long.MAX_VALUE\n                else -> Long.MIN_VALUE\n            }\n        }\n        sourceCompareTarget < 0 -> value / (targetUnit.scale / sourceUnit.scale).toLong()\n        else -> value\n    }\n}\n\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\nimport kotlin.js.JsName\n\n/**\n * Provides a skeletal implementation of the read-only [Collection] interface.\n *\n * @param E the type of elements contained in the collection. The collection is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractCollection<out E> protected constructor() : Collection<E> {\n    abstract override val size: Int\n    abstract override fun iterator(): Iterator<E>\n\n    override fun contains(element: @UnsafeVariance E): Boolean = any { it == element }\n\n    override fun containsAll(elements: Collection<@UnsafeVariance E>): Boolean =\n        elements.all { contains(it) } // use when js will support bound refs: elements.all(this::contains)\n\n    override fun isEmpty(): Boolean = size == 0\n\n    override fun toString(): String = joinToString(\", \", \"[\", \"]\") {\n        if (it === this) \"(this Collection)\" else it.toString()\n    }\n\n    /**\n     * Returns new array of type `Array<Any?>` with the elements of this collection.\n     */\n    @JsName(\"toArray\")\n    protected open fun toArray(): Array<Any?> = copyToArrayImpl(this)\n\n    /**\n     * Fills the provided [array] or creates new array of the same type\n     * and fills it with the elements of this collection.\n     */\n    protected open fun <T> toArray(array: Array<T>): Array<T> = copyToArrayImpl(this, array)\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractList\n * Copyright 2007 Google Inc.\n*/\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [List] interface.\n *\n * This class is intended to help implementing read-only lists so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the list. The list is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractList<out E> protected constructor() : AbstractCollection<E>(), List<E> {\n    abstract override val size: Int\n    abstract override fun get(index: Int): E\n\n    override fun iterator(): Iterator<E> = IteratorImpl()\n\n    override fun indexOf(element: @UnsafeVariance E): Int = indexOfFirst { it == element }\n\n    override fun lastIndexOf(element: @UnsafeVariance E): Int = indexOfLast { it == element }\n\n    override fun listIterator(): ListIterator<E> = ListIteratorImpl(0)\n\n    override fun listIterator(index: Int): ListIterator<E> = ListIteratorImpl(index)\n\n    override fun subList(fromIndex: Int, toIndex: Int): List<E> = SubList(this, fromIndex, toIndex)\n\n    private class SubList<out E>(private val list: AbstractList<E>, private val fromIndex: Int, toIndex: Int) : AbstractList<E>(), RandomAccess {\n        private var _size: Int = 0\n\n        init {\n            checkRangeIndexes(fromIndex, toIndex, list.size)\n            this._size = toIndex - fromIndex\n        }\n\n        override fun get(index: Int): E {\n            checkElementIndex(index, _size)\n\n            return list[fromIndex + index]\n        }\n\n        override val size: Int get() = _size\n    }\n\n    /**\n     * Compares this list with other list instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [List] of the same size, which contains the same elements in the same order.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is List<*>) return false\n\n        return orderedEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this list.\n     */\n    override fun hashCode(): Int = orderedHashCode(this)\n\n    private open inner class IteratorImpl : Iterator<E> {\n        /** the index of the item that will be returned on the next call to [next]`()` */\n        protected var index = 0\n\n        override fun hasNext(): Boolean = index < size\n\n        override fun next(): E {\n            if (!hasNext()) throw NoSuchElementException()\n            return get(index++)\n        }\n    }\n\n    /**\n     * Implementation of [ListIterator] for abstract lists.\n     */\n    private open inner class ListIteratorImpl(index: Int) : IteratorImpl(), ListIterator<E> {\n\n        init {\n            checkPositionIndex(index, this@AbstractList.size)\n            this.index = index\n        }\n\n        override fun hasPrevious(): Boolean = index > 0\n\n        override fun nextIndex(): Int = index\n\n        override fun previous(): E {\n            if (!hasPrevious()) throw NoSuchElementException()\n            return get(--index)\n        }\n\n        override fun previousIndex(): Int = index - 1\n    }\n\n    internal companion object {\n        internal fun checkElementIndex(index: Int, size: Int) {\n            if (index < 0 || index >= size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkPositionIndex(index: Int, size: Int) {\n            if (index < 0 || index > size) {\n                throw IndexOutOfBoundsException(\"index: $index, size: $size\")\n            }\n        }\n\n        internal fun checkRangeIndexes(fromIndex: Int, toIndex: Int, size: Int) {\n            if (fromIndex < 0 || toIndex > size) {\n                throw IndexOutOfBoundsException(\"fromIndex: $fromIndex, toIndex: $toIndex, size: $size\")\n            }\n            if (fromIndex > toIndex) {\n                throw IllegalArgumentException(\"fromIndex: $fromIndex > toIndex: $toIndex\")\n            }\n        }\n\n        internal fun checkBoundsIndexes(startIndex: Int, endIndex: Int, size: Int) {\n            if (startIndex < 0 || endIndex > size) {\n                throw IndexOutOfBoundsException(\"startIndex: $startIndex, endIndex: $endIndex, size: $size\")\n            }\n            if (startIndex > endIndex) {\n                throw IllegalArgumentException(\"startIndex: $startIndex > endIndex: $endIndex\")\n            }\n        }\n\n        internal fun orderedHashCode(c: Collection<*>): Int {\n            var hashCode = 1\n            for (e in c) {\n                hashCode = 31 * hashCode + (e?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun orderedEquals(c: Collection<*>, other: Collection<*>): Boolean {\n            if (c.size != other.size) return false\n\n            val otherIterator = other.iterator()\n            for (elem in c) {\n                val elemOther = otherIterator.next()\n                if (elem != elemOther) {\n                    return false\n                }\n            }\n            return true\n        }\n    }\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n/*\n * Based on GWT AbstractMap\n * Copyright 2007 Google Inc.\n */\n\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Map] interface.\n *\n * The implementor is required to implement [entries] property, which should return read-only set of map entries.\n *\n * @param K the type of map keys. The map is invariant in its key type.\n * @param V the type of map values. The map is covariant in its value type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractMap<K, out V> protected constructor() : Map<K, V> {\n\n    override fun containsKey(key: K): Boolean {\n        return implFindEntry(key) != null\n    }\n\n    override fun containsValue(value: @UnsafeVariance V): Boolean = entries.any { it.value == value }\n\n    internal fun containsEntry(entry: Map.Entry<*, *>?): Boolean {\n        // since entry comes from @UnsafeVariance parameters it can be virtually anything\n        if (entry !is Map.Entry<*, *>) return false\n        val key = entry.key\n        val value = entry.value\n        val ourValue = get(key)\n\n        if (value != ourValue) {\n            return false\n        }\n\n        // Perhaps it was null and we don't contain the key?\n        if (ourValue == null && !containsKey(key)) {\n            return false\n        }\n\n        return true\n    }\n\n\n    /**\n     * Compares this map with other instance with the ordered structural equality.\n     *\n     * @return true, if [other] instance is a [Map] of the same size, all entries of which are contained in the [entries] set of this map.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Map<*, *>) return false\n        if (size != other.size) return false\n\n        return other.entries.all { containsEntry(it) }\n    }\n\n    override operator fun get(key: K): V? = implFindEntry(key)?.value\n\n\n    /**\n     * Returns the hash code value for this map.\n     *\n     * It is the same as the hashCode of [entries] set.\n     */\n    override fun hashCode(): Int = entries.hashCode()\n\n    override fun isEmpty(): Boolean = size == 0\n    override val size: Int get() = entries.size\n\n    /**\n     * Returns a read-only [Set] of all keys in this map.\n     *\n     * Accessing this property first time creates a keys view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val keys: Set<K>\n        get() {\n            if (_keys == null) {\n                _keys = object : AbstractSet<K>() {\n                    override operator fun contains(element: K): Boolean = containsKey(element)\n\n                    override operator fun iterator(): Iterator<K> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<K> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): K = entryIterator.next().key\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _keys!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _keys: Set<K>? = null\n\n\n    override fun toString(): String = entries.joinToString(\", \", \"{\", \"}\") { toString(it) }\n\n    private fun toString(entry: Map.Entry<K, V>): String = toString(entry.key) + \"=\" + toString(entry.value)\n\n    private fun toString(o: Any?): String = if (o === this) \"(this Map)\" else o.toString()\n\n    /**\n     * Returns a read-only [Collection] of all values in this map.\n     *\n     * Accessing this property first time creates a values view from [entries].\n     * All subsequent accesses just return the created instance.\n     */\n    override val values: Collection<V>\n        get() {\n            if (_values == null) {\n                _values = object : AbstractCollection<V>() {\n                    override operator fun contains(element: @UnsafeVariance V): Boolean = containsValue(element)\n\n                    override operator fun iterator(): Iterator<V> {\n                        val entryIterator = entries.iterator()\n                        return object : Iterator<V> {\n                            override fun hasNext(): Boolean = entryIterator.hasNext()\n                            override fun next(): V = entryIterator.next().value\n                        }\n                    }\n\n                    override val size: Int get() = this@AbstractMap.size\n                }\n            }\n            return _values!!\n        }\n\n    @kotlin.jvm.Volatile\n    private var _values: Collection<V>? = null\n\n    private fun implFindEntry(key: K): Map.Entry<K, V>? = entries.firstOrNull { it.key == key }\n\n    internal companion object {\n\n        internal fun entryHashCode(e: Map.Entry<*, *>): Int = with(e) { (key?.hashCode() ?: 0) xor (value?.hashCode() ?: 0) }\n        internal fun entryToString(e: Map.Entry<*, *>): String = with(e) { \"$key=$value\" }\n        internal fun entryEquals(e: Map.Entry<*, *>, other: Any?): Boolean {\n            if (other !is Map.Entry<*, *>) return false\n            return e.key == other.key && e.value == other.value\n        }\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\npackage kotlin.collections\n\n/**\n * Provides a skeletal implementation of the read-only [Set] interface.\n *\n * This class is intended to help implementing read-only sets so it doesn't support concurrent modification tracking.\n *\n * @param E the type of elements contained in the set. The set is covariant in its element type.\n */\n@SinceKotlin(\"1.1\")\npublic abstract class AbstractSet<out E> protected constructor() : AbstractCollection<E>(), Set<E> {\n\n    /**\n     * Compares this set with other set instance with the unordered structural equality.\n     *\n     * @return true, if [other] instance is a [Set] of the same size, all elements of which are contained in this set.\n     */\n    override fun equals(other: Any?): Boolean {\n        if (other === this) return true\n        if (other !is Set<*>) return false\n        return setEquals(this, other)\n    }\n\n    /**\n     * Returns the hash code value for this set.\n     */\n    override fun hashCode(): Int = unorderedHashCode(this)\n\n    internal companion object {\n        internal fun unorderedHashCode(c: Collection<*>): Int {\n            var hashCode = 0\n            for (element in c) {\n                hashCode += (element?.hashCode() ?: 0)\n            }\n            return hashCode\n        }\n\n        internal fun setEquals(c: Set<*>, other: Set<*>): Boolean {\n            if (c.size != other.size) return false\n            return c.containsAll(other)\n        }\n    }\n\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"MapsKt\")\n\npackage kotlin.collections\n\n/**\n * Returns the value for the given key, or the implicit default value for this map.\n * By default no implicit value is provided for maps and a [NoSuchElementException] is thrown.\n * To create a map with implicit default value use [withDefault] method.\n *\n * @throws NoSuchElementException when the map doesn't contain a value for the specified key and no implicit default was provided for that map.\n */\n@kotlin.jvm.JvmName(\"getOrImplicitDefaultNullable\")\n@PublishedApi\ninternal fun <K, V> Map<K, V>.getOrImplicitDefault(key: K): V {\n    if (this is MapWithDefault)\n        return this.getOrImplicitDefault(key)\n\n    return getOrElseNullable(key, { throw NoSuchElementException(\"Key $key is missing in the map.\") })\n}\n\n/**\n * Returns a wrapper of this read-only map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\npublic fun <K, V> Map<K, V>.withDefault(defaultValue: (key: K) -> V): Map<K, V> =\n    when (this) {\n        is MapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MapWithDefaultImpl(this, defaultValue)\n    }\n\n/**\n * Returns a wrapper of this mutable map, having the implicit default value provided with the specified function [defaultValue].\n *\n * This implicit default value is used when the original map doesn't contain a value for the key specified\n * and a value is obtained with [Map.getValue] function, for example when properties are delegated to the map.\n *\n * When this map already has an implicit default value provided with a former call to [withDefault], it is being replaced by this call.\n */\n@kotlin.jvm.JvmName(\"withDefaultMutable\")\npublic fun <K, V> MutableMap<K, V>.withDefault(defaultValue: (key: K) -> V): MutableMap<K, V> =\n    when (this) {\n        is MutableMapWithDefault -> this.map.withDefault(defaultValue)\n        else -> MutableMapWithDefaultImpl(this, defaultValue)\n    }\n\n\nprivate interface MapWithDefault<K, out V> : Map<K, V> {\n    public val map: Map<K, V>\n    public fun getOrImplicitDefault(key: K): V\n}\n\nprivate interface MutableMapWithDefault<K, V> : MutableMap<K, V>, MapWithDefault<K, V> {\n    public override val map: MutableMap<K, V>\n}\n\n\nprivate class MapWithDefaultImpl<K, out V>(public override val map: Map<K, V>, private val default: (key: K) -> V) : MapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: Set<K> get() = map.keys\n    override val values: Collection<V> get() = map.values\n    override val entries: Set<Map.Entry<K, V>> get() = map.entries\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\nprivate class MutableMapWithDefaultImpl<K, V>(public override val map: MutableMap<K, V>, private val default: (key: K) -> V) : MutableMapWithDefault<K, V> {\n    override fun equals(other: Any?): Boolean = map.equals(other)\n    override fun hashCode(): Int = map.hashCode()\n    override fun toString(): String = map.toString()\n    override val size: Int get() = map.size\n    override fun isEmpty(): Boolean = map.isEmpty()\n    override fun containsKey(key: K): Boolean = map.containsKey(key)\n    override fun containsValue(value: @UnsafeVariance V): Boolean = map.containsValue(value)\n    override fun get(key: K): V? = map.get(key)\n    override val keys: MutableSet<K> get() = map.keys\n    override val values: MutableCollection<V> get() = map.values\n    override val entries: MutableSet<MutableMap.MutableEntry<K, V>> get() = map.entries\n\n    override fun put(key: K, value: V): V? = map.put(key, value)\n    override fun remove(key: K): V? = map.remove(key)\n    override fun putAll(from: Map<out K, V>) = map.putAll(from)\n    override fun clear() = map.clear()\n\n    override fun getOrImplicitDefault(key: K): V = map.getOrElseNullable(key, { default(key) })\n}\n\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\nimport kotlin.random.Random\n\n/**\n * Removes a single instance of the specified element from this\n * collection, if it is present.\n *\n * Allows to overcome type-safety restriction of `remove` that requires to pass an element of type `E`.\n *\n * @return `true` if the element has been successfully removed; `false` if it was not present in the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.remove(element: T): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).remove(element)\n\n/**\n * Removes all of this collection's elements that are also contained in the specified collection.\n\n * Allows to overcome type-safety restriction of `removeAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any of the specified elements was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.removeAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).removeAll(elements)\n\n/**\n * Retains only the elements in this collection that are contained in the specified collection.\n *\n * Allows to overcome type-safety restriction of `retainAll` that requires to pass a collection of type `Collection<E>`.\n *\n * @return `true` if any element was removed from the collection, `false` if the collection was not modified.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <@kotlin.internal.OnlyInputTypes T> MutableCollection<out T>.retainAll(elements: Collection<T>): Boolean =\n    @Suppress(\"UNCHECKED_CAST\") (this as MutableCollection<T>).retainAll(elements)\n\n/**\n * Adds the specified [element] to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(element: T) {\n    this.add(element)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Iterable<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] array to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Array<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.plusAssign(elements: Sequence<T>) {\n    this.addAll(elements)\n}\n\n/**\n * Removes a single instance of the specified [element] from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(element: T) {\n    this.remove(element)\n}\n\n/**\n * Removes all elements contained in the given [elements] collection from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Iterable<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] array from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Array<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Removes all elements contained in the given [elements] sequence from this mutable collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> MutableCollection<in T>.minusAssign(elements: Sequence<T>) {\n    this.removeAll(elements)\n}\n\n/**\n * Adds all elements of the given [elements] collection to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Iterable<T>): Boolean {\n    when (elements) {\n        is Collection -> return addAll(elements)\n        else -> {\n            var result: Boolean = false\n            for (item in elements)\n                if (add(item)) result = true\n            return result\n        }\n    }\n}\n\n/**\n * Adds all elements of the given [elements] sequence to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Sequence<T>): Boolean {\n    var result: Boolean = false\n    for (item in elements) {\n        if (add(item)) result = true\n    }\n    return result\n}\n\n/**\n * Adds all elements of the given [elements] array to this [MutableCollection].\n */\npublic fun <T> MutableCollection<in T>.addAll(elements: Array<out T>): Boolean {\n    return addAll(elements.asList())\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Iterable<T>): Boolean {\n    return removeAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Sequence<T>): Boolean {\n    val set = elements.convertToSetForSetOperation()\n    return set.isNotEmpty() && removeAll(set)\n}\n\n/**\n * Removes all elements from this [MutableCollection] that are also contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.removeAll(elements: Array<out T>): Boolean {\n    return elements.isNotEmpty() && removeAll(elements.convertToSetForSetOperation())\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] collection.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Iterable<T>): Boolean {\n    return retainAll(elements.convertToSetForSetOperationWith(this))\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] array.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Array<out T>): Boolean {\n    if (elements.isNotEmpty())\n        return retainAll(elements.convertToSetForSetOperation())\n    else\n        return retainNothing()\n}\n\n/**\n * Retains only elements of this [MutableCollection] that are contained in the given [elements] sequence.\n */\npublic fun <T> MutableCollection<in T>.retainAll(elements: Sequence<T>): Boolean {\n    val set = elements.convertToSetForSetOperation()\n    if (set.isNotEmpty())\n        return retainAll(set)\n    else\n        return retainNothing()\n}\n\nprivate fun MutableCollection<*>.retainNothing(): Boolean {\n    val result = isNotEmpty()\n    clear()\n    return result\n}\n\n\n/**\n * Removes all elements from this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableIterable] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableIterable<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableIterable<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    var result = false\n    with(iterator()) {\n        while (hasNext())\n            if (predicate(next()) == predicateResultToRemove) {\n                remove()\n                result = true\n            }\n    }\n    return result\n}\n\n\n/**\n * Removes the element at the specified [index] from this list.\n * In Kotlin one should use the [MutableList.removeAt] function instead.\n */\n@Deprecated(\"Use removeAt(index) instead.\", ReplaceWith(\"removeAt(index)\"), level = DeprecationLevel.ERROR)\n@kotlin.internal.InlineOnly\npublic inline fun <T> MutableList<T>.remove(index: Int): T = removeAt(index)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirst(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(0)\n\n/**\n * Removes the first element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeFirstOrNull(): T? = if (isEmpty()) null else removeAt(0)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or throws [NoSuchElementException] if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLast(): T = if (isEmpty()) throw NoSuchElementException(\"List is empty.\") else removeAt(lastIndex)\n\n/**\n * Removes the last element from this mutable list and returns that removed element, or returns `null` if this list is empty.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T> MutableList<T>.removeLastOrNull(): T? = if (isEmpty()) null else removeAt(lastIndex)\n\n/**\n * Removes all elements from this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when no elements were removed and collection was not modified.\n */\npublic fun <T> MutableList<T>.removeAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, true)\n\n/**\n * Retains only elements of this [MutableList] that match the given [predicate].\n *\n * @return `true` if any element was removed from this collection, or `false` when all elements were retained and collection was not modified.\n */\npublic fun <T> MutableList<T>.retainAll(predicate: (T) -> Boolean): Boolean = filterInPlace(predicate, false)\n\nprivate fun <T> MutableList<T>.filterInPlace(predicate: (T) -> Boolean, predicateResultToRemove: Boolean): Boolean {\n    if (this !is RandomAccess)\n        return (this as MutableIterable<T>).filterInPlace(predicate, predicateResultToRemove)\n\n    var writeIndex: Int = 0\n    for (readIndex in 0..lastIndex) {\n        val element = this[readIndex]\n        if (predicate(element) == predicateResultToRemove)\n            continue\n\n        if (writeIndex != readIndex)\n            this[writeIndex] = element\n\n        writeIndex++\n    }\n    if (writeIndex < size) {\n        for (removeIndex in lastIndex downTo writeIndex)\n            removeAt(removeIndex)\n\n        return true\n    } else {\n        return false\n    }\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.collections\n\n/** An iterator over a sequence of values of type `Byte`. */\npublic abstract class ByteIterator : Iterator<Byte> {\n    override final fun next() = nextByte()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextByte(): Byte\n}\n\n/** An iterator over a sequence of values of type `Char`. */\npublic abstract class CharIterator : Iterator<Char> {\n    override final fun next() = nextChar()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextChar(): Char\n}\n\n/** An iterator over a sequence of values of type `Short`. */\npublic abstract class ShortIterator : Iterator<Short> {\n    override final fun next() = nextShort()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextShort(): Short\n}\n\n/** An iterator over a sequence of values of type `Int`. */\npublic abstract class IntIterator : Iterator<Int> {\n    override final fun next() = nextInt()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextInt(): Int\n}\n\n/** An iterator over a sequence of values of type `Long`. */\npublic abstract class LongIterator : Iterator<Long> {\n    override final fun next() = nextLong()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextLong(): Long\n}\n\n/** An iterator over a sequence of values of type `Float`. */\npublic abstract class FloatIterator : Iterator<Float> {\n    override final fun next() = nextFloat()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextFloat(): Float\n}\n\n/** An iterator over a sequence of values of type `Double`. */\npublic abstract class DoubleIterator : Iterator<Double> {\n    override final fun next() = nextDouble()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextDouble(): Double\n}\n\n/** An iterator over a sequence of values of type `Boolean`. */\npublic abstract class BooleanIterator : Iterator<Boolean> {\n    override final fun next() = nextBoolean()\n\n    /** Returns the next value in the sequence without boxing. */\n    public abstract fun nextBoolean(): Boolean\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"SequencesKt\")\n@file:OptIn(ExperimentalTypeInference::class)\n\npackage kotlin.sequences\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.experimental.ExperimentalTypeInference\n\n/**\n * Builds a [Sequence] lazily yielding values one by one.\n *\n * @see kotlin.sequences.generateSequence\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"DEPRECATION\")\npublic fun <T> sequence(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Sequence<T> = Sequence { iterator(block) }\n\n/**\n * Builds an [Iterator] lazily yielding values one by one.\n *\n * @sample samples.collections.Sequences.Building.buildIterator\n * @sample samples.collections.Iterables.Building.iterable\n */\n@SinceKotlin(\"1.3\")\n@Suppress(\"DEPRECATION\")\npublic fun <T> iterator(@BuilderInference block: suspend SequenceScope<T>.() -> Unit): Iterator<T> {\n    val iterator = SequenceBuilderIterator<T>()\n    iterator.nextStep = block.createCoroutineUnintercepted(receiver = iterator, completion = iterator)\n    return iterator\n}\n\n/**\n * The scope for yielding values of a [Sequence] or an [Iterator], provides [yield] and [yieldAll] suspension functions.\n *\n * @see sequence\n * @see iterator\n *\n * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.3\")\npublic abstract class SequenceScope<in T> internal constructor() {\n    /**\n     * Yields a value to the [Iterator] being built and suspends\n     * until the next value is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     * @sample samples.collections.Sequences.Building.buildFibonacciSequence\n     */\n    public abstract suspend fun yield(value: T)\n\n    /**\n     * Yields all values from the `iterator` to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence of values returned by the given iterator can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public abstract suspend fun yieldAll(iterator: Iterator<T>)\n\n    /**\n     * Yields a collections of values to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(elements: Iterable<T>) {\n        if (elements is Collection && elements.isEmpty()) return\n        return yieldAll(elements.iterator())\n    }\n\n    /**\n     * Yields potentially infinite sequence of values  to the [Iterator] being built\n     * and suspends until all these values are iterated and the next one is requested.\n     *\n     * The sequence can be potentially infinite.\n     *\n     * @sample samples.collections.Sequences.Building.buildSequenceYieldAll\n     */\n    public suspend fun yieldAll(sequence: Sequence<T>) = yieldAll(sequence.iterator())\n}\n\nprivate typealias State = Int\n\nprivate const val State_NotReady: State = 0\nprivate const val State_ManyNotReady: State = 1\nprivate const val State_ManyReady: State = 2\nprivate const val State_Ready: State = 3\nprivate const val State_Done: State = 4\nprivate const val State_Failed: State = 5\n\nprivate class SequenceBuilderIterator<T> : SequenceScope<T>(), Iterator<T>, Continuation<Unit> {\n    private var state = State_NotReady\n    private var nextValue: T? = null\n    private var nextIterator: Iterator<T>? = null\n    var nextStep: Continuation<Unit>? = null\n\n    override fun hasNext(): Boolean {\n        while (true) {\n            when (state) {\n                State_NotReady -> {}\n                State_ManyNotReady ->\n                    if (nextIterator!!.hasNext()) {\n                        state = State_ManyReady\n                        return true\n                    } else {\n                        nextIterator = null\n                    }\n                State_Done -> return false\n                State_Ready, State_ManyReady -> return true\n                else -> throw exceptionalState()\n            }\n\n            state = State_Failed\n            val step = nextStep!!\n            nextStep = null\n            step.resume(Unit)\n        }\n    }\n\n    override fun next(): T {\n        when (state) {\n            State_NotReady, State_ManyNotReady -> return nextNotReady()\n            State_ManyReady -> {\n                state = State_ManyNotReady\n                return nextIterator!!.next()\n            }\n            State_Ready -> {\n                state = State_NotReady\n                @Suppress(\"UNCHECKED_CAST\")\n                val result = nextValue as T\n                nextValue = null\n                return result\n            }\n            else -> throw exceptionalState()\n        }\n    }\n\n    private fun nextNotReady(): T {\n        if (!hasNext()) throw NoSuchElementException() else return next()\n    }\n\n    private fun exceptionalState(): Throwable = when (state) {\n        State_Done -> NoSuchElementException()\n        State_Failed -> IllegalStateException(\"Iterator has failed.\")\n        else -> IllegalStateException(\"Unexpected state of the iterator: $state\")\n    }\n\n\n    override suspend fun yield(value: T) {\n        nextValue = value\n        state = State_Ready\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    override suspend fun yieldAll(iterator: Iterator<T>) {\n        if (!iterator.hasNext()) return\n        nextIterator = iterator\n        state = State_ManyReady\n        return suspendCoroutineUninterceptedOrReturn { c ->\n            nextStep = c\n            COROUTINE_SUSPENDED\n        }\n    }\n\n    // Completion continuation implementation\n    override fun resumeWith(result: Result<Unit>) {\n        result.getOrThrow() // just rethrow exception if it is there\n        state = State_Done\n    }\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Marks coroutine context element that intercepts coroutine continuations.\n * The coroutines framework uses [ContinuationInterceptor.Key] to retrieve the interceptor and\n * intercepts all coroutine continuations with [interceptContinuation] invocations.\n *\n * [ContinuationInterceptor] behaves like a [polymorphic element][AbstractCoroutineContextKey], meaning that\n * its implementation delegates [get][CoroutineContext.Element.get] and [minusKey][CoroutineContext.Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n * [ContinuationInterceptor] subtypes can be extracted from the coroutine context using either [ContinuationInterceptor.Key]\n * or subtype key if it extends [AbstractCoroutineContextKey].\n */\n@SinceKotlin(\"1.3\")\npublic interface ContinuationInterceptor : CoroutineContext.Element {\n    /**\n     * The key that defines *the* context interceptor.\n     */\n    companion object Key : CoroutineContext.Key<ContinuationInterceptor>\n\n    /**\n     * Returns continuation that wraps the original [continuation], thus intercepting all resumptions.\n     * This function is invoked by coroutines framework when needed and the resulting continuations are\n     * cached internally per each instance of the original [continuation].\n     *\n     * This function may simply return original [continuation] if it does not want to intercept this particular continuation.\n     *\n     * When the original [continuation] completes, coroutine framework invokes [releaseInterceptedContinuation]\n     * with the resulting continuation if it was intercepted, that is if `interceptContinuation` had previously\n     * returned a different continuation instance.\n     */\n    public fun <T> interceptContinuation(continuation: Continuation<T>): Continuation<T>\n\n    /**\n     * Invoked for the continuation instance returned by [interceptContinuation] when the original\n     * continuation completes and will not be used anymore. This function is invoked only if [interceptContinuation]\n     * had returned a different continuation instance from the one it was invoked with.\n     *\n     * Default implementation does nothing.\n     *\n     * @param continuation Continuation instance returned by this interceptor's [interceptContinuation] invocation.\n     */\n    public fun releaseInterceptedContinuation(continuation: Continuation<*>) {\n        /* do nothing by default */\n    }\n\n    public override operator fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? {\n        // getPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            @Suppress(\"UNCHECKED_CAST\")\n            return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n        }\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (ContinuationInterceptor === key) this as E else null\n    }\n\n\n    public override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext {\n        // minusPolymorphicKey specialized for ContinuationInterceptor key\n        @OptIn(ExperimentalStdlibApi::class)\n        if (key is AbstractCoroutineContextKey<*, *>) {\n            return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n        }\n        return if (ContinuationInterceptor === key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\n/**\n * Persistent context for the coroutine. It is an indexed set of [Element] instances.\n * An indexed set is a mix between a set and a map.\n * Every element in this set has a unique [Key].\n */\n@SinceKotlin(\"1.3\")\npublic interface CoroutineContext {\n    /**\n     * Returns the element with the given [key] from this context or `null`.\n     */\n    public operator fun <E : Element> get(key: Key<E>): E?\n\n    /**\n     * Accumulates entries of this context starting with [initial] value and applying [operation]\n     * from left to right to current accumulator value and each element of this context.\n     */\n    public fun <R> fold(initial: R, operation: (R, Element) -> R): R\n\n    /**\n     * Returns a context containing elements from this context and elements from  other [context].\n     * The elements from this context with the same key as in the other one are dropped.\n     */\n    public operator fun plus(context: CoroutineContext): CoroutineContext =\n        if (context === EmptyCoroutineContext) this else // fast path -- avoid lambda creation\n            context.fold(this) { acc, element ->\n                val removed = acc.minusKey(element.key)\n                if (removed === EmptyCoroutineContext) element else {\n                    // make sure interceptor is always last in the context (and thus is fast to get when present)\n                    val interceptor = removed[ContinuationInterceptor]\n                    if (interceptor == null) CombinedContext(removed, element) else {\n                        val left = removed.minusKey(ContinuationInterceptor)\n                        if (left === EmptyCoroutineContext) CombinedContext(element, interceptor) else\n                            CombinedContext(CombinedContext(left, element), interceptor)\n                    }\n                }\n            }\n\n    /**\n     * Returns a context containing elements from this context, but without an element with\n     * the specified [key].\n     */\n    public fun minusKey(key: Key<*>): CoroutineContext\n\n    /**\n     * Key for the elements of [CoroutineContext]. [E] is a type of element with this key.\n     */\n    public interface Key<E : Element>\n\n    /**\n     * An element of the [CoroutineContext]. An element of the coroutine context is a singleton context by itself.\n     */\n    public interface Element : CoroutineContext {\n        /**\n         * A key of this coroutine context element.\n         */\n        public val key: Key<*>\n\n        public override operator fun <E : Element> get(key: Key<E>): E? =\n            @Suppress(\"UNCHECKED_CAST\")\n            if (this.key == key) this as E else null\n\n        public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n            operation(initial, this)\n\n        public override fun minusKey(key: Key<*>): CoroutineContext =\n            if (this.key == key) EmptyCoroutineContext else this\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines\n\nimport kotlin.coroutines.CoroutineContext.Element\nimport kotlin.coroutines.CoroutineContext.Key\n\n/**\n * Base class for [CoroutineContext.Element] implementations.\n */\n@SinceKotlin(\"1.3\")\npublic abstract class AbstractCoroutineContextElement(public override val key: Key<*>) : Element\n\n/**\n * Base class for [CoroutineContext.Key] associated with polymorphic [CoroutineContext.Element] implementation.\n * Polymorphic element implementation implies delegating its [get][Element.get] and [minusKey][Element.minusKey]\n * to [getPolymorphicElement] and [minusPolymorphicKey] respectively.\n *\n * Polymorphic elements can be extracted from the coroutine context using both element key and its supertype key.\n * Example of polymorphic elements:\n * ```\n * open class BaseElement : CoroutineContext.Element {\n *     companion object Key : CoroutineContext.Key<BaseElement>\n *     override val key: CoroutineContext.Key<*> get() = Key\n *     // It is important to use getPolymorphicKey and minusPolymorphicKey\n *     override fun <E : CoroutineContext.Element> get(key: CoroutineContext.Key<E>): E? = getPolymorphicElement(key)\n *     override fun minusKey(key: CoroutineContext.Key<*>): CoroutineContext = minusPolymorphicKey(key)\n * }\n *\n * class DerivedElement : BaseElement() {\n *     companion object Key : AbstractCoroutineContextKey<BaseElement, DerivedElement>(BaseElement, { it as? DerivedElement })\n * }\n * // Now it is possible to query both `BaseElement` and `DerivedElement`\n * someContext[BaseElement] // Returns BaseElement?, non-null both for BaseElement and DerivedElement instances\n * someContext[DerivedElement] // Returns DerivedElement?, non-null only for DerivedElement instance\n * ```\n * @param B base class of a polymorphic element\n * @param baseKey an instance of base key\n * @param E element type associated with the current key\n * @param safeCast a function that can safely cast abstract [CoroutineContext.Element] to the concrete [E] type\n *                 and return the element if it is a subtype of [E] or `null` otherwise.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic abstract class AbstractCoroutineContextKey<B : Element, E : B>(\n    baseKey: Key<B>,\n    private val safeCast: (element: Element) -> E?\n) : Key<E> {\n    private val topmostKey: Key<*> = if (baseKey is AbstractCoroutineContextKey<*, *>) baseKey.topmostKey else baseKey\n\n    internal fun tryCast(element: Element): E? = safeCast(element)\n    internal fun isSubKey(key: Key<*>): Boolean = key === this || topmostKey === key\n}\n\n/**\n * Returns the current element if it is associated with the given [key] in a polymorphic manner or `null` otherwise.\n * This method returns non-null value if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun <E : Element> Element.getPolymorphicElement(key: Key<E>): E? {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        @Suppress(\"UNCHECKED_CAST\")\n        return if (key.isSubKey(this.key)) key.tryCast(this) as? E else null\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return if (this.key === key) this as E else null\n}\n\n/**\n * Returns empty coroutine context if the element is associated with the given [key] in a polymorphic manner\n * or `null` otherwise.\n * This method returns empty context if either [Element.key] is equal to the given [key] or if the [key] is associated\n * with [Element.key] via [AbstractCoroutineContextKey].\n * See [AbstractCoroutineContextKey] for the example of usage.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalStdlibApi\npublic fun Element.minusPolymorphicKey(key: Key<*>): CoroutineContext {\n    if (key is AbstractCoroutineContextKey<*, *>) {\n        return if (key.isSubKey(this.key) && key.tryCast(this) != null) EmptyCoroutineContext else this\n    }\n    return if (this.key === key) EmptyCoroutineContext else this\n}\n\n/**\n * An empty coroutine context.\n */\n@SinceKotlin(\"1.3\")\npublic object EmptyCoroutineContext : CoroutineContext, Serializable {\n    private const val serialVersionUID: Long = 0\n    private fun readResolve(): Any = EmptyCoroutineContext\n\n    public override fun <E : Element> get(key: Key<E>): E? = null\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R = initial\n    public override fun plus(context: CoroutineContext): CoroutineContext = context\n    public override fun minusKey(key: Key<*>): CoroutineContext = this\n    public override fun hashCode(): Int = 0\n    public override fun toString(): String = \"EmptyCoroutineContext\"\n}\n\n//--------------------- internal impl ---------------------\n\n// this class is not exposed, but is hidden inside implementations\n// this is a left-biased list, so that `plus` works naturally\n@SinceKotlin(\"1.3\")\ninternal class CombinedContext(\n    private val left: CoroutineContext,\n    private val element: Element\n) : CoroutineContext, Serializable {\n\n    override fun <E : Element> get(key: Key<E>): E? {\n        var cur = this\n        while (true) {\n            cur.element[key]?.let { return it }\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return next[key]\n            }\n        }\n    }\n\n    public override fun <R> fold(initial: R, operation: (R, Element) -> R): R =\n        operation(left.fold(initial, operation), element)\n\n    public override fun minusKey(key: Key<*>): CoroutineContext {\n        element[key]?.let { return left }\n        val newLeft = left.minusKey(key)\n        return when {\n            newLeft === left -> this\n            newLeft === EmptyCoroutineContext -> element\n            else -> CombinedContext(newLeft, element)\n        }\n    }\n\n    private fun size(): Int {\n        var cur = this\n        var size = 2\n        while (true) {\n            cur = cur.left as? CombinedContext ?: return size\n            size++\n        }\n    }\n\n    private fun contains(element: Element): Boolean =\n        get(element.key) == element\n\n    private fun containsAll(context: CombinedContext): Boolean {\n        var cur = context\n        while (true) {\n            if (!contains(cur.element)) return false\n            val next = cur.left\n            if (next is CombinedContext) {\n                cur = next\n            } else {\n                return contains(next as Element)\n            }\n        }\n    }\n\n    override fun equals(other: Any?): Boolean =\n        this === other || other is CombinedContext && other.size() == size() && other.containsAll(this)\n\n    override fun hashCode(): Int = left.hashCode() + element.hashCode()\n\n    override fun toString(): String =\n        \"[\" + fold(\"\") { acc, element ->\n            if (acc.isEmpty()) element.toString() else \"$acc, $element\"\n        } + \"]\"\n\n    private fun writeReplace(): Any {\n        val n = size()\n        val elements = arrayOfNulls<CoroutineContext>(n)\n        var index = 0\n        fold(Unit) { _, element -> elements[index++] = element }\n        check(index == n)\n        @Suppress(\"UNCHECKED_CAST\")\n        return Serialized(elements as Array<CoroutineContext>)\n    }\n\n    private class Serialized(val elements: Array<CoroutineContext>) : Serializable {\n        companion object {\n            private const val serialVersionUID: Long = 0L\n        }\n\n        private fun readResolve(): Any = elements.fold(EmptyCoroutineContext, CoroutineContext::plus)\n    }\n}\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"IntrinsicsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.coroutines.intrinsics\n\nimport kotlin.contracts.*\nimport kotlin.coroutines.*\nimport kotlin.internal.InlineOnly\n\n/**\n * Obtains the current continuation instance inside suspend functions and either suspends\n * currently running coroutine or returns result immediately without suspension.\n *\n * If the [block] returns the special [COROUTINE_SUSPENDED] value, it means that suspend function did suspend the execution and will\n * not return any result immediately. In this case, the [Continuation] provided to the [block] shall be\n * resumed by invoking [Continuation.resumeWith] at some moment in the\n * future when the result becomes available to resume the computation.\n *\n * Otherwise, the return value of the [block] must have a type assignable to [T] and represents the result of this suspend function.\n * It means that the execution was not suspended and the [Continuation] provided to the [block] shall not be invoked.\n * As the result type of the [block] is declared as `Any?` and cannot be correctly type-checked,\n * its proper return type remains on the conscience of the suspend function's author.\n *\n * Invocation of [Continuation.resumeWith] resumes coroutine directly in the invoker's thread without going through the\n * [ContinuationInterceptor] that might be present in the coroutine's [CoroutineContext].\n * It is the invoker's responsibility to ensure that a proper invocation context is established.\n * [Continuation.intercepted] can be used to acquire the intercepted continuation.\n *\n * Note that it is not recommended to call either [Continuation.resume] nor [Continuation.resumeWithException] functions synchronously\n * in the same stackframe where suspension function is run. Use [suspendCoroutine] as a safer way to obtain current\n * continuation instance.\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\n@Suppress(\"UNUSED_PARAMETER\", \"RedundantSuspendModifier\")\npublic suspend inline fun <T> suspendCoroutineUninterceptedOrReturn(crossinline block: (Continuation<T>) -> Any?): T {\n    contract { callsInPlace(block, InvocationKind.EXACTLY_ONCE) }\n    throw NotImplementedError(\"Implementation of suspendCoroutineUninterceptedOrReturn is intrinsic\")\n}\n\n/**\n * This value is used as a return value of [suspendCoroutineUninterceptedOrReturn] `block` argument to state that\n * the execution was suspended and will not return any result immediately.\n *\n * **Note: this value should not be used in general code.** Using it outside of the context of\n * `suspendCoroutineUninterceptedOrReturn` function return value  (including, but not limited to,\n * storing this value in other properties, returning it from other functions, etc)\n * can lead to unspecified behavior of the code.\n */\n// It is implemented as property with getter to avoid ProGuard <clinit> problem with multifile IntrinsicsKt class\n@SinceKotlin(\"1.3\")\npublic val COROUTINE_SUSPENDED: Any get() = CoroutineSingletons.COROUTINE_SUSPENDED\n\n// Using enum here ensures two important properties:\n//  1. It makes SafeContinuation serializable with all kinds of serialization frameworks (since all of them natively support enums)\n//  2. It improves debugging experience, since you clearly see toString() value of those objects and what package they come from\n@SinceKotlin(\"1.3\")\n@PublishedApi // This class is Published API via serialized representation of SafeContinuation, don't rename/move\ninternal enum class CoroutineSingletons { COROUTINE_SUSPENDED, UNDECIDED, RESUMED }\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.internal\n\n// a mod b (in arithmetical sense)\nprivate fun mod(a: Int, b: Int): Int {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\nprivate fun mod(a: Long, b: Long): Long {\n    val mod = a % b\n    return if (mod >= 0) mod else mod + b\n}\n\n// (a - b) mod c\nprivate fun differenceModulo(a: Int, b: Int, c: Int): Int {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\nprivate fun differenceModulo(a: Long, b: Long, c: Long): Long {\n    return mod(mod(a, c) - mod(b, c), c)\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Int, end: Int, step: Int): Int = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n\n/**\n * Calculates the final element of a bounded arithmetic progression, i.e. the last element of the progression which is in the range\n * from [start] to [end] in case of a positive [step], or from [end] to [start] in case of a negative\n * [step].\n *\n * No validation on passed parameters is performed. The given parameters should satisfy the condition:\n *\n * - either `step > 0` and `start <= end`,\n * - or `step < 0` and `start >= end`.\n *\n * @param start first element of the progression\n * @param end ending bound for the progression\n * @param step increment, or difference of successive elements in the progression\n * @return the final element of the progression\n * @suppress\n */\n@PublishedApi\ninternal fun getProgressionLastElement(start: Long, end: Long, step: Long): Long = when {\n    step > 0 -> if (start >= end) end else end - differenceModulo(end, start, step)\n    step < 0 -> if (start <= end) end else end + differenceModulo(start, end, -step)\n    else -> throw kotlin.IllegalArgumentException(\"Step is zero.\")\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\nimport kotlin.math.nextDown\n\n/**\n * An abstract class that is implemented by random number generator algorithms.\n *\n * The companion object [Random.Default] is the default instance of [Random].\n *\n * To get a seeded instance of random generator use [Random] function.\n *\n * @sample samples.random.Randoms.defaultRandom\n */\n@SinceKotlin(\"1.3\")\npublic abstract class Random {\n\n    /**\n     * Gets the next random [bitCount] number of bits.\n     *\n     * Generates an `Int` whose lower [bitCount] bits are filled with random values and the remaining upper bits are zero.\n     *\n     * @param bitCount number of bits to generate, must be in range 0..32, otherwise the behavior is unspecified.\n     *\n     * @sample samples.random.Randoms.nextBits\n     */\n    public abstract fun nextBits(bitCount: Int): Int\n\n    /**\n     * Gets the next random `Int` from the random number generator.\n     *\n     * Generates an `Int` random value uniformly distributed between `Int.MIN_VALUE` and `Int.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextInt\n     */\n    public open fun nextInt(): Int = nextBits(32)\n\n    /**\n     * Gets the next random non-negative `Int` from the random number generator less than the specified [until] bound.\n     *\n     * Generates an `Int` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(until: Int): Int = nextInt(0, until)\n\n    /**\n     * Gets the next random `Int` from the random number generator in the specified range.\n     *\n     * Generates an `Int` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextIntFromUntil\n     */\n    public open fun nextInt(from: Int, until: Int): Int {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0 || n == Int.MIN_VALUE) {\n            val rnd = if (n and -n == n) {\n                val bitCount = fastLog2(n)\n                nextBits(bitCount)\n            } else {\n                var v: Int\n                do {\n                    val bits = nextInt().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextInt()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random `Long` from the random number generator.\n     *\n     * Generates a `Long` random value uniformly distributed between `Long.MIN_VALUE` and `Long.MAX_VALUE` (inclusive).\n     *\n     * @sample samples.random.Randoms.nextLong\n     */\n    public open fun nextLong(): Long = nextInt().toLong().shl(32) + nextInt()\n\n    /**\n     * Gets the next random non-negative `Long` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Long` random value uniformly distributed between `0` (inclusive) and the specified [until] bound (exclusive).\n     *\n     * @param until must be positive.\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(until: Long): Long = nextLong(0, until)\n\n    /**\n     * Gets the next random `Long` from the random number generator in the specified range.\n     *\n     * Generates a `Long` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextLongFromUntil\n     */\n    public open fun nextLong(from: Long, until: Long): Long {\n        checkRangeBounds(from, until)\n        val n = until - from\n        if (n > 0) {\n            val rnd: Long\n            if (n and -n == n) {\n                val nLow = n.toInt()\n                val nHigh = (n ushr 32).toInt()\n                rnd = when {\n                    nLow != 0 -> {\n                        val bitCount = fastLog2(nLow)\n                        // toUInt().toLong()\n                        nextBits(bitCount).toLong() and 0xFFFF_FFFF\n                    }\n                    nHigh == 1 ->\n                        // toUInt().toLong()\n                        nextInt().toLong() and 0xFFFF_FFFF\n                    else -> {\n                        val bitCount = fastLog2(nHigh)\n                        nextBits(bitCount).toLong().shl(32) + (nextInt().toLong() and 0xFFFF_FFFF)\n                    }\n                }\n            } else {\n                var v: Long\n                do {\n                    val bits = nextLong().ushr(1)\n                    v = bits % n\n                } while (bits - v + (n - 1) < 0)\n                rnd = v\n            }\n            return from + rnd\n        } else {\n            while (true) {\n                val rnd = nextLong()\n                if (rnd in from until until) return rnd\n            }\n        }\n    }\n\n    /**\n     * Gets the next random [Boolean] value.\n     *\n     * @sample samples.random.Randoms.nextBoolean\n     */\n    public open fun nextBoolean(): Boolean = nextBits(1) != 0\n\n    /**\n     * Gets the next random [Double] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextDouble\n     */\n    public open fun nextDouble(): Double = doubleFromParts(nextBits(26), nextBits(27))\n\n    /**\n     * Gets the next random non-negative `Double` from the random number generator less than the specified [until] bound.\n     *\n     * Generates a `Double` random value uniformly distributed between 0 (inclusive) and [until] (exclusive).\n     *\n     * @throws IllegalArgumentException if [until] is negative or zero.\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(until: Double): Double = nextDouble(0.0, until)\n\n    /**\n     * Gets the next random `Double` from the random number generator in the specified range.\n     *\n     * Generates a `Double` random value uniformly distributed between the specified [from] (inclusive) and [until] (exclusive) bounds.\n     *\n     * [from] and [until] must be finite otherwise the behavior is unspecified.\n     *\n     * @throws IllegalArgumentException if [from] is greater than or equal to [until].\n     *\n     * @sample samples.random.Randoms.nextDoubleFromUntil\n     */\n    public open fun nextDouble(from: Double, until: Double): Double {\n        checkRangeBounds(from, until)\n        val size = until - from\n        val r = if (size.isInfinite() && from.isFinite() && until.isFinite()) {\n            val r1 = nextDouble() * (until / 2 - from / 2)\n            from + r1 + r1\n        } else {\n            from + nextDouble() * size\n        }\n        return if (r >= until) until.nextDown() else r\n    }\n\n    /**\n     * Gets the next random [Float] value uniformly distributed between 0 (inclusive) and 1 (exclusive).\n     *\n     * @sample samples.random.Randoms.nextFloat\n     */\n    public open fun nextFloat(): Float = nextBits(24) / (1 shl 24).toFloat()\n\n    /**\n     * Fills a subrange of the specified byte [array] starting from [fromIndex] inclusive and ending [toIndex] exclusive\n     * with random bytes.\n     *\n     * @return [array] with the subrange filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray, fromIndex: Int = 0, toIndex: Int = array.size): ByteArray {\n        require(fromIndex in 0..array.size && toIndex in 0..array.size) { \"fromIndex ($fromIndex) or toIndex ($toIndex) are out of range: 0..${array.size}.\" }\n        require(fromIndex <= toIndex) { \"fromIndex ($fromIndex) must be not greater than toIndex ($toIndex).\" }\n\n        val steps = (toIndex - fromIndex) / 4\n\n        var position = fromIndex\n        repeat(steps) {\n            val v = nextInt()\n            array[position] = v.toByte()\n            array[position + 1] = v.ushr(8).toByte()\n            array[position + 2] = v.ushr(16).toByte()\n            array[position + 3] = v.ushr(24).toByte()\n            position += 4\n        }\n\n        val remainder = toIndex - position\n        val vr = nextBits(remainder * 8)\n        for (i in 0 until remainder) {\n            array[position + i] = vr.ushr(i * 8).toByte()\n        }\n\n        return array\n    }\n\n    /**\n     * Fills the specified byte [array] with random bytes and returns it.\n     *\n     * @return [array] filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(array: ByteArray): ByteArray = nextBytes(array, 0, array.size)\n\n    /**\n     * Creates a byte array of the specified [size], filled with random bytes.\n     *\n     * @sample samples.random.Randoms.nextBytes\n     */\n    public open fun nextBytes(size: Int): ByteArray = nextBytes(ByteArray(size))\n\n\n    /**\n     * The default random number generator.\n     *\n     * On JVM this generator is thread-safe, its methods can be invoked from multiple threads.\n     *\n     * @sample samples.random.Randoms.defaultRandom\n     */\n    companion object Default : Random(), Serializable {\n        private val defaultRandom: Random = defaultPlatformRandom()\n\n        private object Serialized : Serializable {\n            private const val serialVersionUID = 0L\n\n            private fun readResolve(): Any = Random\n        }\n\n        private fun writeReplace(): Any = Serialized\n\n        override fun nextBits(bitCount: Int): Int = defaultRandom.nextBits(bitCount)\n        override fun nextInt(): Int = defaultRandom.nextInt()\n        override fun nextInt(until: Int): Int = defaultRandom.nextInt(until)\n        override fun nextInt(from: Int, until: Int): Int = defaultRandom.nextInt(from, until)\n\n        override fun nextLong(): Long = defaultRandom.nextLong()\n        override fun nextLong(until: Long): Long = defaultRandom.nextLong(until)\n        override fun nextLong(from: Long, until: Long): Long = defaultRandom.nextLong(from, until)\n\n        override fun nextBoolean(): Boolean = defaultRandom.nextBoolean()\n\n        override fun nextDouble(): Double = defaultRandom.nextDouble()\n        override fun nextDouble(until: Double): Double = defaultRandom.nextDouble(until)\n        override fun nextDouble(from: Double, until: Double): Double = defaultRandom.nextDouble(from, until)\n\n        override fun nextFloat(): Float = defaultRandom.nextFloat()\n\n        override fun nextBytes(array: ByteArray): ByteArray = defaultRandom.nextBytes(array)\n        override fun nextBytes(size: Int): ByteArray = defaultRandom.nextBytes(size)\n        override fun nextBytes(array: ByteArray, fromIndex: Int, toIndex: Int): ByteArray =\n            defaultRandom.nextBytes(array, fromIndex, toIndex)\n    }\n}\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Int` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Int): Random = XorWowRandom(seed, seed.shr(31))\n\n/**\n * Returns a repeatable random number generator seeded with the given [seed] `Long` value.\n *\n * Two generators with the same seed produce the same sequence of values within the same version of Kotlin runtime.\n *\n * *Note:* Future versions of Kotlin may change the algorithm of this seeded number generator so that it will return\n * a sequence of values different from the current one for a given seed.\n *\n * On JVM the returned generator is NOT thread-safe. Do not invoke it from multiple threads without proper synchronization.\n *\n * @sample samples.random.Randoms.seededRandom\n */\n@SinceKotlin(\"1.3\")\npublic fun Random(seed: Long): Random = XorWowRandom(seed.toInt(), seed.shr(32).toInt())\n\n\n/**\n * Gets the next random `Int` from the random number generator in the specified [range].\n *\n * Generates an `Int` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextInt(range: IntRange): Int = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Int.MAX_VALUE -> nextInt(range.first, range.last + 1)\n    range.first > Int.MIN_VALUE -> nextInt(range.first - 1, range.last) + 1\n    else -> nextInt()\n}\n\n/**\n * Gets the next random `Long` from the random number generator in the specified [range].\n *\n * Generates a `Long` random value uniformly distributed in the specified [range]:\n * from `range.start` inclusive to `range.endInclusive` inclusive.\n *\n * @throws IllegalArgumentException if [range] is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun Random.nextLong(range: LongRange): Long = when {\n    range.isEmpty() -> throw IllegalArgumentException(\"Cannot get random in empty range: $range\")\n    range.last < Long.MAX_VALUE -> nextLong(range.first, range.last + 1)\n    range.first > Long.MIN_VALUE -> nextLong(range.first - 1, range.last) + 1\n    else -> nextLong()\n}\n\n\ninternal expect fun defaultPlatformRandom(): Random\ninternal expect fun doubleFromParts(hi26: Int, low27: Int): Double\n\ninternal fun fastLog2(value: Int): Int = 31 - value.countLeadingZeroBits()\n\n/** Takes upper [bitCount] bits (0..32) from this number. */\ninternal fun Int.takeUpperBits(bitCount: Int): Int =\n    this.ushr(32 - bitCount) and (-bitCount).shr(31)\n\ninternal fun checkRangeBounds(from: Int, until: Int) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Long, until: Long) = require(until > from) { boundsErrorMessage(from, until) }\ninternal fun checkRangeBounds(from: Double, until: Double) = require(until > from) { boundsErrorMessage(from, until) }\n\ninternal fun boundsErrorMessage(from: Any, until: Any) = \"Random range is empty: [$from, $until).\"\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.random\n\n/**\n * Random number generator, using Marsaglia's \"xorwow\" algorithm\n *\n * Cycles after 2^192 - 2^32 repetitions.\n *\n * For more details, see Marsaglia, George (July 2003). \"Xorshift RNGs\". Journal of Statistical Software. 8 (14). doi:10.18637/jss.v008.i14\n *\n * Available at https://www.jstatsoft.org/v08/i14/paper\n *\n */\ninternal class XorWowRandom internal constructor(\n    private var x: Int,\n    private var y: Int,\n    private var z: Int,\n    private var w: Int,\n    private var v: Int,\n    private var addend: Int\n) : Random(), Serializable {\n\n    internal constructor(seed1: Int, seed2: Int) :\n            this(seed1, seed2, 0, 0, seed1.inv(), (seed1 shl 10) xor (seed2 ushr 4))\n\n    init {\n        require((x or y or z or w or v) != 0) { \"Initial state must have at least one non-zero element.\" }\n\n        // some trivial seeds can produce several values with zeroes in upper bits, so we discard first 64\n        repeat(64) { nextInt() }\n    }\n\n    override fun nextInt(): Int {\n        // Equivalent to the xorxow algorithm\n        // From Marsaglia, G. 2003. Xorshift RNGs. J. Statis. Soft. 8, 14, p. 5\n        var t = x\n        t = t xor (t ushr 2)\n        x = y\n        y = z\n        z = w\n        val v0 = v\n        w = v0\n        t = (t xor (t shl 1)) xor v0 xor (v0 shl 4)\n        v = t\n        addend += 362437\n        return t + addend\n    }\n\n    override fun nextBits(bitCount: Int): Int =\n        nextInt().takeUpperBits(bitCount)\n\n    private companion object {\n        private const val serialVersionUID: Long = 0L\n    }\n}\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\n/**\n * An iterator over a progression of values of type `Char`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class CharProgressionIterator(first: Char, last: Char, val step: Int) : CharIterator() {\n    private val finalElement: Int = last.code\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first.code else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextChar(): Char {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value.toChar()\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Int`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class IntProgressionIterator(first: Int, last: Int, val step: Int) : IntIterator() {\n    private val finalElement: Int = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Int = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextInt(): Int {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n/**\n * An iterator over a progression of values of type `Long`.\n * @property step the number by which the value is incremented on each step.\n */\ninternal class LongProgressionIterator(first: Long, last: Long, val step: Long) : LongIterator() {\n    private val finalElement: Long = last\n    private var hasNext: Boolean = if (step > 0) first <= last else first >= last\n    private var next: Long = if (hasNext) first else finalElement\n\n    override fun hasNext(): Boolean = hasNext\n\n    override fun nextLong(): Long {\n        val value = next\n        if (value == finalElement) {\n            if (!hasNext) throw kotlin.NoSuchElementException()\n            hasNext = false\n        }\n        else {\n            next += step\n        }\n        return value\n    }\n}\n\n","/*\n * Copyright 2010-2022 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin.ranges\n\nimport kotlin.internal.getProgressionLastElement\n\n/**\n * A progression of values of type `Char`.\n */\npublic open class CharProgression\n    internal constructor\n    (\n            start: Char,\n            endInclusive: Char,\n            step: Int\n    ) : Iterable<Char> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Char = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Char = getProgressionLastElement(start.code, endInclusive.code, step).toChar()\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): CharIterator = CharProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is CharProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first.code + last.code) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates CharProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Char, rangeEnd: Char, step: Int): CharProgression = CharProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Int`.\n */\npublic open class IntProgression\n    internal constructor\n    (\n            start: Int,\n            endInclusive: Int,\n            step: Int\n    ) : Iterable<Int> {\n    init {\n        if (step == 0) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Int.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Int.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Int = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Int = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Int = step\n\n    override fun iterator(): IntIterator = IntProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is IntProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * first + last) + step)\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates IntProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Int.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Int, rangeEnd: Int, step: Int): IntProgression = IntProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n/**\n * A progression of values of type `Long`.\n */\npublic open class LongProgression\n    internal constructor\n    (\n            start: Long,\n            endInclusive: Long,\n            step: Long\n    ) : Iterable<Long> {\n    init {\n        if (step == 0L) throw kotlin.IllegalArgumentException(\"Step must be non-zero.\")\n        if (step == Long.MIN_VALUE) throw kotlin.IllegalArgumentException(\"Step must be greater than Long.MIN_VALUE to avoid overflow on negation.\")\n    }\n\n    /**\n     * The first element in the progression.\n     */\n    public val first: Long = start\n\n    /**\n     * The last element in the progression.\n     */\n    public val last: Long = getProgressionLastElement(start, endInclusive, step)\n\n    /**\n     * The step of the progression.\n     */\n    public val step: Long = step\n\n    override fun iterator(): LongIterator = LongProgressionIterator(first, last, step)\n\n    /**\n     * Checks if the progression is empty.\n     *\n     * Progression with a positive step is empty if its first element is greater than the last element.\n     * Progression with a negative step is empty if its first element is less than the last element.\n     */\n    public open fun isEmpty(): Boolean = if (step > 0) first > last else first < last\n\n    override fun equals(other: Any?): Boolean =\n        other is LongProgression && (isEmpty() && other.isEmpty() ||\n        first == other.first && last == other.last && step == other.step)\n\n    override fun hashCode(): Int =\n        if (isEmpty()) -1 else (31 * (31 * (first xor (first ushr 32)) + (last xor (last ushr 32))) + (step xor (step ushr 32))).toInt()\n\n    override fun toString(): String = if (step > 0) \"$first..$last step $step\" else \"$first downTo $last step ${-step}\"\n\n    companion object {\n        /**\n         * Creates LongProgression within the specified bounds of a closed range.\n         *\n         * The progression starts with the [rangeStart] value and goes toward the [rangeEnd] value not excluding it, with the specified [step].\n         * In order to go backwards the [step] must be negative.\n         *\n         * [step] must be greater than `Long.MIN_VALUE` and not equal to zero.\n         */\n        public fun fromClosedRange(rangeStart: Long, rangeEnd: Long, step: Long): LongProgression = LongProgression(rangeStart, rangeEnd, step)\n    }\n}\n\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"RangesKt\")\n\npackage kotlin.ranges\n\n/**\n * Represents a range of [Comparable] values.\n */\nprivate open class ComparableRange<T : Comparable<T>>(\n    override val start: T,\n    override val endInclusive: T\n) : ClosedRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endInclusive == other.endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..$endInclusive\"\n}\n\n/**\n * Creates a range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than or equal to [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\npublic operator fun <T : Comparable<T>> T.rangeTo(that: T): ClosedRange<T> = ComparableRange(this, that)\n\n/**\n * Represents a range of [Comparable] values.\n */\n@OptIn(ExperimentalStdlibApi::class)\nprivate open class ComparableOpenEndRange<T : Comparable<T>>(\n    override val start: T,\n    override val endExclusive: T\n) : OpenEndRange<T> {\n\n    override fun equals(other: Any?): Boolean {\n        return other is ComparableOpenEndRange<*> && (isEmpty() && other.isEmpty() ||\n                start == other.start && endExclusive == other.endExclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * start.hashCode() + endExclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$start..<$endExclusive\"\n}\n\n/**\n * Creates an open-ended range from this [Comparable] value to the specified [that] value.\n *\n * This value needs to be smaller than [that] value, otherwise the returned range will be empty.\n * @sample samples.ranges.Ranges.rangeFromComparable\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun <T : Comparable<T>> T.rangeUntil(that: T): OpenEndRange<T> = ComparableOpenEndRange(this, that)\n\n\n/**\n * Represents a range of floating point numbers.\n * Extends [ClosedRange] interface providing custom operation [lessThanOrEquals] for comparing values of range domain type.\n *\n * This interface is implemented by floating point ranges returned by [Float.rangeTo] and [Double.rangeTo] operators to\n * achieve IEEE-754 comparison order instead of total order of floating point numbers.\n */\n@SinceKotlin(\"1.1\")\npublic interface ClosedFloatingPointRange<T : Comparable<T>> : ClosedRange<T> {\n    override fun contains(value: T): Boolean = lessThanOrEquals(start, value) && lessThanOrEquals(value, endInclusive)\n    override fun isEmpty(): Boolean = !lessThanOrEquals(start, endInclusive)\n\n    /**\n     * Compares two values of range domain type and returns true if first is less than or equal to second.\n     */\n    fun lessThanOrEquals(a: T, b: T): Boolean\n}\n\n\n/**\n * A closed range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedDoubleRange(\n    start: Double,\n    endInclusive: Double\n) : ClosedFloatingPointRange<Double> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Double get() = _start\n    override val endInclusive: Double get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromDouble\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Double.rangeTo(that: Double): ClosedFloatingPointRange<Double> = ClosedDoubleRange(this, that)\n\n/**\n * An open-ended range of values of type `Double`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\n@OptIn(ExperimentalStdlibApi::class)\nprivate class OpenEndDoubleRange(\n    start: Double,\n    endExclusive: Double\n) : OpenEndRange<Double> {\n    private val _start = start\n    private val _endExclusive = endExclusive\n    override val start: Double get() = _start\n    override val endExclusive: Double get() = _endExclusive\n\n    private fun lessThanOrEquals(a: Double, b: Double): Boolean = a <= b\n\n    override fun contains(value: Double): Boolean = value >= _start && value < _endExclusive\n    override fun isEmpty(): Boolean = !(_start < _endExclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is OpenEndDoubleRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endExclusive == other._endExclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endExclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..<$_endExclusive\"\n}\n\n/**\n * Creates an open-ended range from this [Double] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun Double.rangeUntil(that: Double): OpenEndRange<Double> = OpenEndDoubleRange(this, that)\n\n\n/**\n * A closed range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\nprivate class ClosedFloatRange(\n    start: Float,\n    endInclusive: Float\n) : ClosedFloatingPointRange<Float> {\n    private val _start = start\n    private val _endInclusive = endInclusive\n    override val start: Float get() = _start\n    override val endInclusive: Float get() = _endInclusive\n\n    override fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value <= _endInclusive\n    override fun isEmpty(): Boolean = !(_start <= _endInclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is ClosedFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endInclusive == other._endInclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endInclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..$_endInclusive\"\n}\n\n/**\n * Creates a range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n * @sample samples.ranges.Ranges.rangeFromFloat\n */\n@SinceKotlin(\"1.1\")\npublic operator fun Float.rangeTo(that: Float): ClosedFloatingPointRange<Float> = ClosedFloatRange(this, that)\n\n\n/**\n * An open-ended range of values of type `Float`.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\n@OptIn(ExperimentalStdlibApi::class)\nprivate class OpenEndFloatRange(\n    start: Float,\n    endExclusive: Float\n) : OpenEndRange<Float> {\n    private val _start = start\n    private val _endExclusive = endExclusive\n    override val start: Float get() = _start\n    override val endExclusive: Float get() = _endExclusive\n\n    private fun lessThanOrEquals(a: Float, b: Float): Boolean = a <= b\n\n    override fun contains(value: Float): Boolean = value >= _start && value < _endExclusive\n    override fun isEmpty(): Boolean = !(_start < _endExclusive)\n\n    override fun equals(other: Any?): Boolean {\n        return other is OpenEndFloatRange && (isEmpty() && other.isEmpty() ||\n                _start == other._start && _endExclusive == other._endExclusive)\n    }\n\n    override fun hashCode(): Int {\n        return if (isEmpty()) -1 else 31 * _start.hashCode() + _endExclusive.hashCode()\n    }\n\n    override fun toString(): String = \"$_start..<$_endExclusive\"\n}\n\n/**\n * Creates an open-ended range from this [Float] value to the specified [that] value.\n *\n * Numbers are compared with the ends of this range according to IEEE-754.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic operator fun Float.rangeUntil(that: Float): OpenEndRange<Float> = OpenEndFloatRange(this, that)\n\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : ClosedRange<T>, R : Iterable<T> =\n    element != null && contains(element)\n\n/**\n * Returns `true` if this iterable range contains the specified [element].\n *\n * Always returns `false` if the [element] is `null`.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\n@kotlin.internal.InlineOnly\npublic inline operator fun <T, R> R.contains(element: T?): Boolean where T : Any, R : OpenEndRange<T>, R : Iterable<T> =\n    element != null && contains(element)\n\ninternal fun checkStepIsPositive(isPositive: Boolean, step: Number) {\n    if (!isPositive) throw IllegalArgumentException(\"Step must be positive, was: $step.\")\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n/**\n * An object to which char sequences and values can be appended.\n */\nexpect interface Appendable {\n    /**\n     * Appends the specified character [value] to this Appendable and returns this instance.\n     *\n     * @param value the character to append.\n     */\n    fun append(value: Char): Appendable\n\n    /**\n     * Appends the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence to append. If [value] is `null`, then the four characters `\"null\"` are appended to this Appendable.\n     */\n    fun append(value: CharSequence?): Appendable\n\n    /**\n     * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n     *\n     * @param value the character sequence from which a subsequence is appended. If [value] is `null`,\n     *  then characters are appended as if [value] contained the four characters `\"null\"`.\n     * @param startIndex the beginning (inclusive) of the subsequence to append.\n     * @param endIndex the end (exclusive) of the subsequence to append.\n     *\n     * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n     */\n    fun append(value: CharSequence?, startIndex: Int, endIndex: Int): Appendable\n}\n\n/**\n * Appends a subsequence of the specified character sequence [value] to this Appendable and returns this instance.\n *\n * @param value the character sequence from which a subsequence is appended.\n * @param startIndex the beginning (inclusive) of the subsequence to append.\n * @param endIndex the end (exclusive) of the subsequence to append.\n *\n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of the [value] character sequence indices or when `startIndex > endIndex`.\n */\n@SinceKotlin(\"1.4\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun <T : Appendable> T.appendRange(value: CharSequence, startIndex: Int, endIndex: Int): T {\n    @Suppress(\"UNCHECKED_CAST\")\n    return append(value, startIndex, endIndex) as T\n}\n\n/**\n * Appends all arguments to the given [Appendable].\n */\npublic fun <T : Appendable> T.append(vararg value: CharSequence?): T {\n    for (item in value)\n        append(item)\n    return this\n}\n\n/** Appends a line feed character (`\\n`) to this Appendable. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(): Appendable = append('\\n')\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: CharSequence?): Appendable = append(value).appendLine()\n\n/** Appends value to the given Appendable and a line feed character (`\\n`) after it. */\n@SinceKotlin(\"1.4\")\n@kotlin.internal.InlineOnly\npublic inline fun Appendable.appendLine(value: Char): Appendable = append(value).appendLine()\n\n\ninternal fun <T> Appendable.appendElement(element: T, transform: ((T) -> CharSequence)?) {\n    when {\n        transform != null -> append(transform(element))\n        element is CharSequence? -> append(element)\n        element is Char -> append(element)\n        else -> append(element.toString())\n    }\n}\n","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CharsKt\")\n\npackage kotlin.text\n\n/**\n * Returns the numeric value of the decimal digit that this Char represents.\n * Throws an exception if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(): Int {\n    return digitOf(this, 10).also {\n        if (it < 0) throw IllegalArgumentException(\"Char $this is not a decimal digit\")\n    }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this Char is not a valid digit in the specified [radix].\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *  - The Char is one of the fullwidth Latin capital letters '\\uFF21' through '\\uFF3A' and its [code] is less than `radix + 0xFF21 - 10`. In this case, `this.code - 0xFF21 + 10` is returned.\n *  - The Char is one of the fullwidth Latin small letters '\\uFF41' through '\\uFF5A' and its [code] is less than `radix + 0xFF41 - 10`. In this case, `this.code - 0xFF41 + 10` is returned.\n *\n * @sample samples.text.Chars.digitToInt\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToInt(radix: Int): Int {\n    return digitToIntOrNull(radix) ?: throw IllegalArgumentException(\"Char $this is not a digit in the given radix=$radix\")\n}\n\n/**\n *\n * Returns the numeric value of the decimal digit that this Char represents, or `null` if this Char is not a valid decimal digit.\n *\n * A Char is considered to represent a decimal digit if [isDigit] is true for the Char.\n * In this case, the Unicode decimal digit value of the character is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(): Int? {\n    return digitOf(this, 10).takeIf { it >= 0 }\n}\n\n/**\n * Returns the numeric value of the digit that this Char represents in the specified [radix], or `null` if this Char is not a valid digit in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36`.\n *\n * A Char is considered to represent a digit in the specified [radix] if at least one of the following is true:\n *  - [isDigit] is `true` for the Char and the Unicode decimal digit value of the character is less than the specified [radix]. In this case the decimal digit value is returned.\n *  - The Char is one of the uppercase Latin letters 'A' through 'Z' and its [code] is less than `radix + 'A'.code - 10`. In this case, `this.code - 'A'.code + 10` is returned.\n *  - The Char is one of the lowercase Latin letters 'a' through 'z' and its [code] is less than `radix + 'a'.code - 10`. In this case, `this.code - 'a'.code + 10` is returned.\n *  - The Char is one of the fullwidth Latin capital letters '\\uFF21' through '\\uFF3A' and its [code] is less than `radix + 0xFF21 - 10`. In this case, `this.code - 0xFF21 + 10` is returned.\n *  - The Char is one of the fullwidth Latin small letters '\\uFF41' through '\\uFF5A' and its [code] is less than `radix + 0xFF41 - 10`. In this case, `this.code - 0xFF41 + 10` is returned.\n *\n * @sample samples.text.Chars.digitToIntOrNull\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Char.digitToIntOrNull(radix: Int): Int? {\n    checkRadix(radix)\n    return digitOf(this, radix).takeIf { it >= 0 }\n}\n\n/**\n * Returns the Char that represents this decimal digit.\n * Throws an exception if this value is not in the range `0..9`.\n *\n * If this value is in `0..9`, the decimal digit Char with code `'0'.code + this` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(): Char {\n    if (this in 0..9) {\n        return '0' + this\n    }\n    throw IllegalArgumentException(\"Int $this is not a decimal digit\")\n}\n\n/**\n * Returns the Char that represents this numeric digit value in the specified [radix].\n * Throws an exception if the [radix] is not in the range `2..36` or if this value is not in the range `0 until radix`.\n *\n * If this value is less than `10`, the decimal digit Char with code `'0'.code + this` is returned.\n * Otherwise, the uppercase Latin letter with code `'A'.code + this - 10` is returned.\n *\n * @sample samples.text.Chars.digitToChar\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic fun Int.digitToChar(radix: Int): Char {\n    if (radix !in 2..36) {\n        throw IllegalArgumentException(\"Invalid radix: $radix. Valid radix values are in range 2..36\")\n    }\n    if (this < 0 || this >= radix) {\n        throw IllegalArgumentException(\"Digit $this does not represent a valid digit in radix $radix\")\n    }\n    return if (this < 10) {\n        '0' + this\n    } else {\n        'A' + this - 10\n    }\n}\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use lowercaseChar() instead.\", ReplaceWith(\"lowercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toLowerCase(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [lowercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercaseChar(): Char\n\n/**\n * Converts this character to lower case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\u0130'.lowercase()` returns `\"\\u0069\\u0307\"`,\n * where `'\\u0130'` is the LATIN CAPITAL LETTER I WITH DOT ABOVE character (`İ`).\n * If this character has no lower case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.lowercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.lowercase(): String\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n */\n@Deprecated(\"Use uppercaseChar() instead.\", ReplaceWith(\"uppercaseChar()\"))\n@DeprecatedSinceKotlin(warningSince = \"1.5\")\npublic expect fun Char.toUpperCase(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [uppercase] function.\n * If this character has no mapping equivalent, the character itself is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercaseChar(): Char\n\n/**\n * Converts this character to upper case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.uppercase()` returns `\"\\u0046\\u0046\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no upper case mapping, the result of `toString()` of this char is returned.\n *\n * @sample samples.text.Chars.uppercase\n */\n@SinceKotlin(\"1.5\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic expect fun Char.uppercase(): String\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function performs one-to-one character mapping.\n * To support one-to-many character mapping use the [titlecase] function.\n * If this character has no mapping equivalent, the result of calling [uppercaseChar] is returned.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.titlecaseChar(): Char\n\n/**\n * Converts this character to title case using Unicode mapping rules of the invariant locale.\n *\n * This function supports one-to-many character mapping, thus the length of the returned string can be greater than one.\n * For example, `'\\uFB00'.titlecase()` returns `\"\\u0046\\u0066\"`,\n * where `'\\uFB00'` is the LATIN SMALL LIGATURE FF character (`ﬀ`).\n * If this character has no title case mapping, the result of [uppercase] is returned instead.\n *\n * @sample samples.text.Chars.titlecase\n */\n@SinceKotlin(\"1.5\")\npublic fun Char.titlecase(): String = titlecaseImpl()\n\n/**\n * Concatenates this Char and a String.\n *\n * @sample samples.text.Chars.plus\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun Char.plus(other: String): String = this.toString() + other\n\n/**\n * Returns `true` if this character is equal to the [other] character, optionally ignoring character case.\n *\n * Two characters are considered equal ignoring case if `Char.uppercaseChar().lowercaseChar()` on each character produces the same result.\n *\n * @param ignoreCase `true` to ignore character case when comparing characters. By default `false`.\n * @sample samples.text.Chars.equals\n */\npublic fun Char.equals(other: Char, ignoreCase: Boolean = false): Boolean {\n    if (this == other) return true\n    if (!ignoreCase) return false\n\n    val thisUpper = this.uppercaseChar()\n    val otherUpper = other.uppercaseChar()\n\n    return thisUpper == otherUpper || thisUpper.lowercaseChar() == otherUpper.lowercaseChar()\n}\n\n/**\n * Returns `true` if this character is a Unicode surrogate code unit.\n */\npublic fun Char.isSurrogate(): Boolean = this in Char.MIN_SURROGATE..Char.MAX_SURROGATE\n\n/**\n * Returns the Unicode general category of this character.\n */\n@SinceKotlin(\"1.5\")\npublic expect val Char.category: CharCategory\n\n/**\n * Returns `true` if this character (Unicode code point) is defined in Unicode.\n *\n * A character is considered to be defined in Unicode if its [category] is not [CharCategory.UNASSIGNED].\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDefined(): Boolean\n\n/**\n * Returns `true` if this character is a letter.\n *\n * A character is considered to be a letter if its [category] is [CharCategory.UPPERCASE_LETTER],\n * [CharCategory.LOWERCASE_LETTER], [CharCategory.TITLECASE_LETTER], [CharCategory.MODIFIER_LETTER], or [CharCategory.OTHER_LETTER].\n *\n * @sample samples.text.Chars.isLetter\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetter(): Boolean\n\n/**\n * Returns `true` if this character is a letter or digit.\n *\n * @see isLetter\n * @see isDigit\n *\n * @sample samples.text.Chars.isLetterOrDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLetterOrDigit(): Boolean\n\n/**\n * Returns `true` if this character is a digit.\n *\n * A character is considered to be a digit if its [category] is [CharCategory.DECIMAL_DIGIT_NUMBER].\n *\n * @sample samples.text.Chars.isDigit\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isDigit(): Boolean\n\n/**\n * Returns `true` if this character is upper case.\n *\n * A character is considered to be an upper case character if its [category] is [CharCategory.UPPERCASE_LETTER],\n * or it has contributory property `Other_Uppercase` as defined by the Unicode Standard.\n *\n * @sample samples.text.Chars.isUpperCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isUpperCase(): Boolean\n\n/**\n * Returns `true` if this character is lower case.\n *\n * A character is considered to be a lower case character if its [category] is [CharCategory.LOWERCASE_LETTER],\n * or it has contributory property `Other_Lowercase` as defined by the Unicode Standard.\n *\n * @sample samples.text.Chars.isLowerCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isLowerCase(): Boolean\n\n/**\n * Returns `true` if this character is a title case letter.\n *\n * A character is considered to be a title case letter if its [category] is [CharCategory.TITLECASE_LETTER].\n *\n * @sample samples.text.Chars.isTitleCase\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isTitleCase(): Boolean\n\n/**\n * Returns `true` if this character is an ISO control character.\n *\n * A character is considered to be an ISO control character if its [category] is [CharCategory.CONTROL],\n * meaning the Char is in the range `'\\u0000'..'\\u001F'` or in the range `'\\u007F'..'\\u009F'`.\n *\n * @sample samples.text.Chars.isISOControl\n */\n@SinceKotlin(\"1.5\")\npublic expect fun Char.isISOControl(): Boolean\n\n/**\n * Determines whether a character is whitespace according to the Unicode standard.\n * Returns `true` if the character is whitespace.\n *\n * @sample samples.text.Chars.isWhitespace\n */\npublic expect fun Char.isWhitespace(): Boolean\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Defines names for Unicode symbols used in proper Typography.\n */\npublic object Typography {\n    /** The character &#x22; – quotation mark */\n    public const val quote: Char = '\\u0022'\n    /** The character &#x24; – dollar sign */\n    public const val dollar: Char = '\\u0024'\n    /** The character &#x26; – ampersand */\n    public const val amp: Char = '\\u0026'\n    /** The character &#x3C; – less-than sign */\n    public const val less: Char = '\\u003C'\n    /** The character &#x3E; – greater-than sign */\n    public const val greater: Char = '\\u003E'\n    /** The non-breaking space character */\n    public const val nbsp: Char = '\\u00A0'\n    /** The character &#xD7; */\n    public const val times: Char = '\\u00D7'\n    /** The character &#xA2; */\n    public const val cent: Char = '\\u00A2'\n    /** The character &#xA3; */\n    public const val pound: Char = '\\u00A3'\n    /** The character &#xA7; */\n    public const val section: Char = '\\u00A7'\n    /** The character &#xA9; */\n    public const val copyright: Char = '\\u00A9'\n    /** The character &#xAB; */\n    @SinceKotlin(\"1.6\")\n    public const val leftGuillemet: Char = '\\u00AB'\n    /** The character &#xBB; */\n    @SinceKotlin(\"1.6\")\n    public const val rightGuillemet: Char = '\\u00BB'\n    /** The character &#xAE; */\n    public const val registered: Char = '\\u00AE'\n    /** The character &#xB0; */\n    public const val degree: Char = '\\u00B0'\n    /** The character &#xB1; */\n    public const val plusMinus: Char = '\\u00B1'\n    /** The character &#xB6; */\n    public const val paragraph: Char = '\\u00B6'\n    /** The character &#xB7; */\n    public const val middleDot: Char = '\\u00B7'\n    /** The character &#xBD; */\n    public const val half: Char = '\\u00BD'\n    /** The character &#x2013; */\n    public const val ndash: Char = '\\u2013'\n    /** The character &#x2014; */\n    public const val mdash: Char = '\\u2014'\n    /** The character &#x2018; */\n    public const val leftSingleQuote: Char = '\\u2018'\n    /** The character &#x2019; */\n    public const val rightSingleQuote: Char = '\\u2019'\n    /** The character &#x201A; */\n    public const val lowSingleQuote: Char = '\\u201A'\n    /** The character &#x201C; */\n    public const val leftDoubleQuote: Char = '\\u201C'\n    /** The character &#x201D; */\n    public const val rightDoubleQuote: Char = '\\u201D'\n    /** The character &#x201E; */\n    public const val lowDoubleQuote: Char = '\\u201E'\n    /** The character &#x2020; */\n    public const val dagger: Char = '\\u2020'\n    /** The character &#x2021; */\n    public const val doubleDagger: Char = '\\u2021'\n    /** The character &#x2022; */\n    public const val bullet: Char = '\\u2022'\n    /** The character &#x2026; */\n    public const val ellipsis: Char = '\\u2026'\n    /** The character &#x2032; */\n    public const val prime: Char = '\\u2032'\n    /** The character &#x2033; */\n    public const val doublePrime: Char = '\\u2033'\n    /** The character &#x20AC; */\n    public const val euro: Char = '\\u20AC'\n    /** The character &#x2122; */\n    public const val tm: Char = '\\u2122'\n    /** The character &#x2248; */\n    public const val almostEqual: Char = '\\u2248'\n    /** The character &#x2260; */\n    public const val notEqual: Char = '\\u2260'\n    /** The character &#x2264; */\n    public const val lessOrEqual: Char = '\\u2264'\n    /** The character &#x2265; */\n    public const val greaterOrEqual: Char = '\\u2265'\n\n    /** The character &#xAB; */\n    @Deprecated(\"This constant has a typo in the name. Use leftGuillemet instead.\", ReplaceWith(\"Typography.leftGuillemet\"))\n    @DeprecatedSinceKotlin(\"1.6\")\n    public const val leftGuillemete: Char = '\\u00AB'\n\n    /** The character &#xBB; */\n    @Deprecated(\"This constant has a typo in the name. Use rightGuillemet instead.\", ReplaceWith(\"Typography.rightGuillemet\"))\n    @DeprecatedSinceKotlin(\"1.6\")\n    public const val rightGuillemete: Char = '\\u00BB'\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.ranges\n\n/**\n * Represents a range of values (for example, numbers or characters) where both the lower and upper bounds are included in the range.\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\npublic interface ClosedRange<T : Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (inclusive).\n     */\n    public val endInclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     *\n     * A value belongs to the closed range if it is greater than or equal to the [start] bound and less than or equal to the [endInclusive] bound.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value <= endInclusive\n\n    /**\n     * Checks whether the range is empty.\n     *\n     * The range is empty if its start value is greater than the end value.\n     */\n    public fun isEmpty(): Boolean = start > endInclusive\n}\n\n/**\n * Represents a range of values (for example, numbers or characters) where the upper bound is not included in the range.\n * See the [Kotlin language documentation](https://kotlinlang.org/docs/reference/ranges.html) for more information.\n */\n@SinceKotlin(\"1.7\")\n@ExperimentalStdlibApi\npublic interface OpenEndRange<T : Comparable<T>> {\n    /**\n     * The minimum value in the range.\n     */\n    public val start: T\n\n    /**\n     * The maximum value in the range (exclusive).\n     *\n     * @throws IllegalStateException can be thrown if the exclusive end bound cannot be represented\n     * with a value of type [T].\n     */\n    public val endExclusive: T\n\n    /**\n     * Checks whether the specified [value] belongs to the range.\n     *\n     * A value belongs to the open-ended range if it is greater than or equal to the [start] bound and strictly less than the [endExclusive] bound.\n     */\n    public operator fun contains(value: T): Boolean = value >= start && value < endExclusive\n\n    /**\n     * Checks whether the range is empty.\n     *\n     * The open-ended range is empty if its start value is greater than or equal to the end value.\n     */\n    public fun isEmpty(): Boolean = start >= endExclusive\n}","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/**\n * Represents a collection of captured groups in a single match of a regular expression.\n *\n * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n *\n * An element of the collection at the particular index can be `null`,\n * if the corresponding group in the regular expression is optional and\n * there was no match captured by that group.\n */\npublic interface MatchGroupCollection : Collection<MatchGroup?> {\n\n    /** Returns a group with the specified [index].\n     *\n     * @return An instance of [MatchGroup] if the group with the specified [index] was matched or `null` otherwise.\n     *\n     * Groups are indexed from 1 to the count of groups in the regular expression. A group with the index 0\n     * corresponds to the entire match.\n     */\n    public operator fun get(index: Int): MatchGroup?\n}\n\n/**\n * Extends [MatchGroupCollection] by introducing a way to get matched groups by name, when regex supports it.\n */\n@SinceKotlin(\"1.1\")\npublic interface MatchNamedGroupCollection : MatchGroupCollection {\n    /**\n     * Returns a named group with the specified [name].\n     * @return An instance of [MatchGroup] if the group with the specified [name] was matched or `null` otherwise.\n     * @throws IllegalArgumentException if there is no group with the specified [name] defined in the regex pattern.\n     * @throws UnsupportedOperationException if this match group collection doesn't support getting match groups by name,\n     * for example, when it's not supported by the current platform.\n     */\n    public operator fun get(name: String): MatchGroup?\n}\n\n/**\n * Represents the results from a single regular expression match.\n */\npublic interface MatchResult {\n    /** The range of indices in the original string where match was captured. */\n    public val range: IntRange\n    /** The substring from the input string captured by this match. */\n    public val value: String\n    /**\n     * A collection of groups matched by the regular expression.\n     *\n     * This collection has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     */\n    public val groups: MatchGroupCollection\n    /**\n     * A list of matched indexed group values.\n     *\n     * This list has size of `groupCount + 1` where `groupCount` is the count of groups in the regular expression.\n     * Groups are indexed from 1 to `groupCount` and group with the index 0 corresponds to the entire match.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding item in [groupValues] is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val groupValues: List<String>\n\n    /**\n     * An instance of [MatchResult.Destructured] wrapper providing components for destructuring assignment of group values.\n     *\n     * component1 corresponds to the value of the first group, component2 — of the second, and so on.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public val destructured: Destructured get() = Destructured(this)\n\n    /** Returns a new [MatchResult] with the results for the next match, starting at the position\n     *  at which the last match ended (at the character after the last matched character).\n     */\n    public fun next(): MatchResult?\n\n    /**\n     * Provides components for destructuring assignment of group values.\n     *\n     * [component1] corresponds to the value of the first group, [component2] — of the second, and so on.\n     *\n     * If the group in the regular expression is optional and there were no match captured by that group,\n     * corresponding component value is an empty string.\n     *\n     * @sample samples.text.Regexps.matchDestructuringToGroupValues\n     */\n    public class Destructured internal constructor(public val match: MatchResult) {\n        @kotlin.internal.InlineOnly\n        public operator inline fun component1():  String = match.groupValues[1]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component2():  String = match.groupValues[2]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component3():  String = match.groupValues[3]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component4():  String = match.groupValues[4]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component5():  String = match.groupValues[5]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component6():  String = match.groupValues[6]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component7():  String = match.groupValues[7]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component8():  String = match.groupValues[8]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component9():  String = match.groupValues[9]\n        @kotlin.internal.InlineOnly\n        public operator inline fun component10(): String = match.groupValues[10]\n\n        /**\n         *  Returns destructured group values as a list of strings.\n         *  First value in the returned list corresponds to the value of the first group, and so on.\n         *\n         * @sample samples.text.Regexps.matchDestructuringToGroupValues\n         */\n        public fun toList(): List<String> = match.groupValues.subList(1, match.groupValues.size)\n    }\n}","/*\n * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass()\n@file:kotlin.jvm.JvmName(\"DurationUnitKt\")\n\npackage kotlin.time\n\n\n/**\n * The list of possible time measurement units, in which a duration can be expressed.\n *\n * The smallest time unit is [NANOSECONDS] and the largest is [DAYS], which corresponds to exactly 24 [HOURS].\n */\n@SinceKotlin(\"1.6\")\n@WasExperimental(ExperimentalTime::class)\npublic expect enum class DurationUnit {\n    /**\n     * Time unit representing one nanosecond, which is 1/1000 of a microsecond.\n     */\n    NANOSECONDS,\n    /**\n     * Time unit representing one microsecond, which is 1/1000 of a millisecond.\n     */\n    MICROSECONDS,\n    /**\n     * Time unit representing one millisecond, which is 1/1000 of a second.\n     */\n    MILLISECONDS,\n    /**\n     * Time unit representing one second.\n     */\n    SECONDS,\n    /**\n     * Time unit representing one minute.\n     */\n    MINUTES,\n    /**\n     * Time unit representing one hour.\n     */\n    HOURS,\n    /**\n     * Time unit representing one day, which is always equal to 24 hours.\n     */\n    DAYS;\n}\n\n/** Converts the given time duration [value] expressed in the specified [sourceUnit] into the specified [targetUnit]. */\n@SinceKotlin(\"1.3\")\ninternal expect fun convertDurationUnit(value: Double, sourceUnit: DurationUnit, targetUnit: DurationUnit): Double\n\n// overflown result is unspecified\n@SinceKotlin(\"1.5\")\ninternal expect fun convertDurationUnitOverflow(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long\n\n// overflown result is coerced in the Long range boundaries\n@SinceKotlin(\"1.5\")\ninternal expect fun convertDurationUnit(value: Long, sourceUnit: DurationUnit, targetUnit: DurationUnit): Long\n\n\n@SinceKotlin(\"1.3\")\n@Suppress(\"REDUNDANT_ELSE_IN_WHEN\")\ninternal fun DurationUnit.shortName(): String = when (this) {\n    DurationUnit.NANOSECONDS -> \"ns\"\n    DurationUnit.MICROSECONDS -> \"us\"\n    DurationUnit.MILLISECONDS -> \"ms\"\n    DurationUnit.SECONDS -> \"s\"\n    DurationUnit.MINUTES -> \"m\"\n    DurationUnit.HOURS -> \"h\"\n    DurationUnit.DAYS -> \"d\"\n    else -> error(\"Unknown unit: $this\")\n}\n\n@SinceKotlin(\"1.5\")\ninternal fun durationUnitByShortName(shortName: String): DurationUnit = when (shortName) {\n    \"ns\" -> DurationUnit.NANOSECONDS\n    \"us\" -> DurationUnit.MICROSECONDS\n    \"ms\" -> DurationUnit.MILLISECONDS\n    \"s\" -> DurationUnit.SECONDS\n    \"m\" -> DurationUnit.MINUTES\n    \"h\" -> DurationUnit.HOURS\n    \"d\" -> DurationUnit.DAYS\n    else -> throw IllegalArgumentException(\"Unknown duration unit short name: $shortName\")\n}\n\n@SinceKotlin(\"1.5\")\ninternal fun durationUnitByIsoChar(isoChar: Char, isTimeComponent: Boolean): DurationUnit =\n    when {\n        !isTimeComponent -> {\n            when (isoChar) {\n                'D' -> DurationUnit.DAYS\n                else -> throw IllegalArgumentException(\"Invalid or unsupported duration ISO non-time unit: $isoChar\")\n            }\n        }\n        else -> {\n            when (isoChar) {\n                'H' -> DurationUnit.HOURS\n                'M' -> DurationUnit.MINUTES\n                'S' -> DurationUnit.SECONDS\n                else -> throw IllegalArgumentException(\"Invalid duration ISO time unit: $isoChar\")\n            }\n        }\n    }","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmName(\"TuplesKt\")\n\npackage kotlin\n\n\n/**\n * Represents a generic pair of two values.\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Pair exhibits value semantics, i.e. two pairs are equal if both components are equal.\n *\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.pairDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @property first First value.\n * @property second Second value.\n * @constructor Creates a new instance of Pair.\n */\npublic data class Pair<out A, out B>(\n    public val first: A,\n    public val second: B\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Pair] including its [first] and [second] values.\n     */\n    public override fun toString(): String = \"($first, $second)\"\n}\n\n/**\n * Creates a tuple of type [Pair] from this and [that].\n *\n * This can be useful for creating [Map] literals with less noise, for example:\n * @sample samples.collections.Maps.Instantiation.mapFromPairs\n */\npublic infix fun <A, B> A.to(that: B): Pair<A, B> = Pair(this, that)\n\n/**\n * Converts this pair into a list.\n * @sample samples.misc.Tuples.pairToList\n */\npublic fun <T> Pair<T, T>.toList(): List<T> = listOf(first, second)\n\n/**\n * Represents a triad of values\n *\n * There is no meaning attached to values in this class, it can be used for any purpose.\n * Triple exhibits value semantics, i.e. two triples are equal if all three components are equal.\n * An example of decomposing it into values:\n * @sample samples.misc.Tuples.tripleDestructuring\n *\n * @param A type of the first value.\n * @param B type of the second value.\n * @param C type of the third value.\n * @property first First value.\n * @property second Second value.\n * @property third Third value.\n */\npublic data class Triple<out A, out B, out C>(\n    public val first: A,\n    public val second: B,\n    public val third: C\n) : Serializable {\n\n    /**\n     * Returns string representation of the [Triple] including its [first], [second] and [third] values.\n     */\n    public override fun toString(): String = \"($first, $second, $third)\"\n}\n\n/**\n * Converts this triple into a list.\n * @sample samples.misc.Tuples.tripleToList\n */\npublic fun <T> Triple<T, T, T>.toList(): List<T> = listOf(first, second, third)\n","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.cancellation\n\n@SinceKotlin(\"1.4\")\npublic actual open class CancellationException : IllegalStateException {\n    actual constructor() : super()\n    actual constructor(message: String?) : super(message)\n    constructor(message: String?, cause: Throwable?) : super(message, cause)\n    constructor(cause: Throwable?) : super(cause)\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.js\n\nimport getKClass\nimport kotlin.reflect.KClass\nimport kotlin.reflect.js.internal.KClassImpl\n\n/**\n * Represents the constructor of a class. Instances of `JsClass` can be passed to JavaScript APIs that expect a constructor reference.\n */\nexternal interface JsClass<T : Any> {\n    /**\n     * Returns the unqualified name of the class represented by this instance.\n     */\n    val name: String\n}\n\n/**\n * Obtains a constructor reference for the given `KClass`.\n */\nval <T : Any> KClass<T>.js: JsClass<T>\n    get() = (this as KClassImpl<T>).jClass\n\n/**\n * Obtains a `KClass` instance for the given constructor reference.\n */\nval <T : Any> JsClass<T>.kotlin: KClass<T>\n    get() = getKClass(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n@file:kotlin.jvm.JvmName(\"ComparisonsKt\")\n@file:kotlin.jvm.JvmMultifileClass\n\npackage kotlin.comparisons\n\n/**\n * Compares two values using the specified functions [selectors] to calculate the result of the comparison.\n * The functions are called sequentially, receive the given values [a] and [b] and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for [a] and [b] values do not\n * compare as equal, the result of that comparison is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSelectors\n */\npublic fun <T> compareValuesBy(a: T, b: T, vararg selectors: (T) -> Comparable<*>?): Int {\n    require(selectors.size > 0)\n    return compareValuesByImpl(a, b, selectors)\n}\n\nprivate fun <T> compareValuesByImpl(a: T, b: T, selectors: Array<out (T) -> Comparable<*>?>): Int {\n    for (fn in selectors) {\n        val v1 = fn(a)\n        val v2 = fn(b)\n        val diff = compareValues(v1, v2)\n        if (diff != 0) return diff\n    }\n    return 0\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return [Comparable] objects.\n * The result of comparison of these [Comparable] instances is returned.\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareValuesBy(a: T, b: T, selector: (T) -> Comparable<*>?): Int {\n    return compareValues(selector(a), selector(b))\n}\n\n/**\n * Compares two values using the specified [selector] function to calculate the result of the comparison.\n * The function is applied to the given values [a] and [b] and return objects of type K which are then being\n * compared with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.compareValuesByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareValuesBy(a: T, b: T, comparator: Comparator<in K>, selector: (T) -> K): Int {\n    return comparator.compare(selector(a), selector(b))\n}\n\n//// Not so useful without type inference for receiver of expression\n//// compareValuesWith(v1, v2, compareBy { it.prop1 } thenByDescending { it.prop2 })\n///**\n// * Compares two values using the specified [comparator].\n// */\n//@Suppress(\"NOTHING_TO_INLINE\")\n//public inline fun <T> compareValuesWith(a: T, b: T, comparator: Comparator<T>): Int = comparator.compare(a, b)\n//\n\n\n/**\n * Compares two nullable [Comparable] values. Null is considered less than any value.\n *\n * @sample samples.comparisons.Comparisons.compareValues\n */\npublic fun <T : Comparable<*>> compareValues(a: T?, b: T?): Int {\n    if (a === b) return 0\n    if (a == null) return -1\n    if (b == null) return 1\n\n    @Suppress(\"UNCHECKED_CAST\")\n    return (a as Comparable<Any>).compareTo(b)\n}\n\n/**\n * Creates a comparator using the sequence of functions to calculate a result of comparison.\n * The functions are called sequentially, receive the given values `a` and `b` and return [Comparable]\n * objects. As soon as the [Comparable] instances returned by a function for `a` and `b` values do not\n * compare as equal, the result of that comparison is returned from the [Comparator].\n *\n * @sample samples.comparisons.Comparisons.compareByWithSelectors\n */\npublic fun <T> compareBy(vararg selectors: (T) -> Comparable<*>?): Comparator<T> {\n    require(selectors.size > 0)\n    return Comparator { a, b -> compareValuesByImpl(a, b, selectors) }\n}\n\n\n/**\n * Creates a comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, selector) }\n\n/**\n * Creates a comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * @sample samples.comparisons.Comparisons.compareByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(a, b, comparator, selector) }\n\n/**\n * Creates a descending comparator using the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithSingleSelector\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> compareByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, selector) }\n\n/**\n * Creates a descending comparator using the [selector] function to transform values being compared and then applying\n * the specified [comparator] to compare transformed values.\n *\n * Note that an order of [comparator] is reversed by this wrapper.\n *\n * @sample samples.comparisons.Comparisons.compareByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> compareByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b -> compareValuesBy(b, a, comparator, selector) }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenBy\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenBy(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, selector)\n    }\n\n/**\n * Creates a comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenBy(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenBy.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(a, b, comparator, selector)\n    }\n\n/**\n * Creates a descending comparator using the primary comparator and\n * the function to transform value to a [Comparable] instance for comparison.\n *\n * @sample samples.comparisons.Comparisons.thenByDescending\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenByDescending(crossinline selector: (T) -> Comparable<*>?): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, selector)\n    }\n\n/**\n * Creates a descending comparator comparing values after the primary comparator defined them equal. It uses\n * the [selector] function to transform values and then compares them with the given [comparator].\n *\n * @sample samples.comparisons.Comparisons.thenByDescendingWithComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, K> Comparator<T>.thenByDescending(comparator: Comparator<in K>, crossinline selector: (T) -> K): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenByDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else compareValuesBy(b, a, comparator, selector)\n    }\n\n\n/**\n * Creates a comparator using the primary comparator and function to calculate a result of comparison.\n *\n * @sample samples.comparisons.Comparisons.thenComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Comparator<T>.thenComparator(crossinline comparison: (a: T, b: T) -> Int): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@thenComparator.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparison(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.then\n */\npublic infix fun <T> Comparator<T>.then(comparator: Comparator<in T>): Comparator<T> =\n    Comparator { a, b ->\n        val previousCompare = this@then.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(a, b)\n    }\n\n/**\n * Combines this comparator and the given [comparator] such that the latter is applied only\n * when the former considered values equal.\n *\n * @sample samples.comparisons.Comparisons.thenDescending\n */\npublic infix fun <T> Comparator<T>.thenDescending(comparator: Comparator<in T>): Comparator<T> =\n    Comparator<T> { a, b ->\n        val previousCompare = this@thenDescending.compare(a, b)\n        if (previousCompare != 0) previousCompare else comparator.compare(b, a)\n    }\n\n// Not so useful without type inference for receiver of expression\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsFirst(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> -1\n            b == null -> 1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value less than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsFirst(): Comparator<T?> = nullsFirst(naturalOrder())\n\n/**\n * Extends the given [comparator] of non-nullable values to a comparator of nullable values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Any> nullsLast(comparator: Comparator<in T>): Comparator<T?> =\n    Comparator { a, b ->\n        when {\n            a === b -> 0\n            a == null -> 1\n            b == null -> -1\n            else -> comparator.compare(a, b)\n        }\n    }\n\n/**\n * Provides a comparator of nullable [Comparable] values\n * considering `null` value greater than any other value.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastComparator\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T : Comparable<T>> nullsLast(): Comparator<T?> = nullsLast(naturalOrder())\n\n/**\n * Returns a comparator that compares [Comparable] objects in natural order.\n *\n * @sample samples.comparisons.Comparisons.naturalOrderComparator\n */\npublic fun <T : Comparable<T>> naturalOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n\n/**\n * Returns a comparator that compares [Comparable] objects in reversed natural order.\n *\n * @sample samples.comparisons.Comparisons.nullsFirstLastWithComparator\n */\npublic fun <T : Comparable<T>> reverseOrder(): Comparator<T> = @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n\n/**\n *  Returns a comparator that imposes the reverse ordering of this comparator.\n *\n *  @sample samples.comparisons.Comparisons.reversed\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\")\npublic fun <T> Comparator<T>.reversed(): Comparator<T> = when (this) {\n    is ReversedComparator -> this.comparator\n    NaturalOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (ReverseOrderComparator as Comparator<T>)\n    ReverseOrderComparator -> @Suppress(\"UNCHECKED_CAST\") (NaturalOrderComparator as Comparator<T>)\n    else -> ReversedComparator(this)\n}\n\n\nprivate class ReversedComparator<T>(public val comparator: Comparator<T>) : Comparator<T> {\n    override fun compare(a: T, b: T): Int = comparator.compare(b, a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<T> = comparator\n}\n\nprivate object NaturalOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = a.compareTo(b)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = ReverseOrderComparator\n}\n\nprivate object ReverseOrderComparator : Comparator<Comparable<Any>> {\n    override fun compare(a: Comparable<Any>, b: Comparable<Any>): Int = b.compareTo(a)\n    @Suppress(\"VIRTUAL_MEMBER_HIDDEN\")\n    fun reversed(): Comparator<Comparable<Any>> = NaturalOrderComparator\n}\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.coroutines.js.internal\n\nimport kotlin.coroutines.Continuation\nimport kotlin.coroutines.EmptyCoroutineContext\n\n@PublishedApi\n@SinceKotlin(\"1.3\")\ninternal val EmptyContinuation = Continuation<Any?>(EmptyCoroutineContext) { result ->\n    result.getOrThrow()\n}","/*\n * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\n/** Returns the negative [size] if [throwOnMalformed] is false, throws [CharacterCodingException] otherwise. */\nprivate fun malformed(size: Int, index: Int, throwOnMalformed: Boolean): Int {\n    if (throwOnMalformed) throw CharacterCodingException(\"Malformed sequence starting at ${index - 1}\")\n    return -size\n}\n\n/**\n * Returns code point corresponding to UTF-16 surrogate pair,\n * where the first of the pair is the [high] and the second is in the [string] at the [index].\n * Returns zero if the pair is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the pair is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFromSurrogate(string: String, high: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (high !in 0xD800..0xDBFF || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val low = string[index].code\n    if (low !in 0xDC00..0xDFFF) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return 0x10000 + ((high and 0x3FF) shl 10) or (low and 0x3FF)\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of two bytes,\n * where the first byte of the sequence is the [byte1] and the second byte is in the [bytes] array at the [index].\n * Returns zero if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of two bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom2(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (byte1 and 0x1E == 0 || index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    val byte2 = bytes[index].toInt()\n    if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n    return (byte1 shl 6) xor byte2 xor 0xF80\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of three bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of three bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom3(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0) {\n        if (byte2 and 0xE0 != 0xA0) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0xD) {\n        if (byte2 and 0xE0 != 0x80) {\n            // Surrogate code point\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    return (byte1 shl 12) xor (byte2 shl 6) xor byte3 xor -0x1E080\n}\n\n/**\n * Returns code point corresponding to UTF-8 sequence of four bytes,\n * where the first byte of the sequence is the [byte1] and the others are in the [bytes] array starting from the [index].\n * Returns a non-positive value indicating number of bytes from [bytes] included in malformed sequence\n * if the sequence is malformed and [throwOnMalformed] is false.\n *\n * @throws CharacterCodingException if the sequence of four bytes is malformed and [throwOnMalformed] is true.\n */\nprivate fun codePointFrom4(bytes: ByteArray, byte1: Int, index: Int, endIndex: Int, throwOnMalformed: Boolean): Int {\n    if (index >= endIndex) {\n        malformed(0, index, throwOnMalformed)\n    }\n\n    val byte2 = bytes[index].toInt()\n    if (byte1 and 0xF == 0x0) {\n        if (byte2 and 0xF0 <= 0x80) {\n            // Non-shortest form\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF == 0x4) {\n        if (byte2 and 0xF0 != 0x80) {\n            // Out of Unicode code points domain (larger than U+10FFFF)\n            return malformed(0, index, throwOnMalformed)\n        }\n    } else if (byte1 and 0xF > 0x4) {\n        return malformed(0, index, throwOnMalformed)\n    } else if (byte2 and 0xC0 != 0x80) {\n        return malformed(0, index, throwOnMalformed)\n    }\n\n    if (index + 1 == endIndex) {\n        return malformed(1, index, throwOnMalformed)\n    }\n    val byte3 = bytes[index + 1].toInt()\n    if (byte3 and 0xC0 != 0x80) {\n        return malformed(1, index, throwOnMalformed)\n    }\n\n    if (index + 2 == endIndex) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    val byte4 = bytes[index + 2].toInt()\n    if (byte4 and 0xC0 != 0x80) {\n        return malformed(2, index, throwOnMalformed)\n    }\n    return (byte1 shl 18) xor (byte2 shl 12) xor (byte3 shl 6) xor byte4 xor 0x381F80\n}\n\n/**\n * Maximum number of bytes needed to encode a single char.\n *\n * Code points in `0..0x7F` are encoded in a single byte.\n * Code points in `0x80..0x7FF` are encoded in two bytes.\n * Code points in `0x800..0xD7FF` or in `0xE000..0xFFFF` are encoded in three bytes.\n * Surrogate code points in `0xD800..0xDFFF` are not Unicode scalar values, therefore aren't encoded.\n * Code points in `0x10000..0x10FFFF` are represented by a pair of surrogate `Char`s and are encoded in four bytes.\n */\nprivate const val MAX_BYTES_PER_CHAR = 3\n\n/**\n * The byte sequence a malformed UTF-16 char sequence is replaced by.\n */\nprivate val REPLACEMENT_BYTE_SEQUENCE: ByteArray = byteArrayOf(0xEF.toByte(), 0xBF.toByte(), 0xBD.toByte())\n\n/**\n * Encodes the [string] using UTF-8 and returns the resulting [ByteArray].\n *\n * @param string the string to encode.\n * @param startIndex the start offset (inclusive) of the substring to encode.\n * @param endIndex the end offset (exclusive) of the substring to encode.\n * @param throwOnMalformed whether to throw on malformed char sequence or replace by the [REPLACEMENT_BYTE_SEQUENCE].\n *\n * @throws CharacterCodingException if the char sequence is malformed and [throwOnMalformed] is true.\n */\ninternal fun encodeUtf8(string: String, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): ByteArray {\n    require(startIndex >= 0 && endIndex <= string.length && startIndex <= endIndex)\n\n    val bytes = ByteArray((endIndex - startIndex) * MAX_BYTES_PER_CHAR)\n    var byteIndex = 0\n    var charIndex = startIndex\n\n    while (charIndex < endIndex) {\n        val code = string[charIndex++].code\n        when {\n            code < 0x80 ->\n                bytes[byteIndex++] = code.toByte()\n            code < 0x800 -> {\n                bytes[byteIndex++] = ((code shr 6) or 0xC0).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            code < 0xD800 || code >= 0xE000 -> {\n                bytes[byteIndex++] = ((code shr 12) or 0xE0).toByte()\n                bytes[byteIndex++] = (((code shr 6) and 0x3F) or 0x80).toByte()\n                bytes[byteIndex++] = ((code and 0x3F) or 0x80).toByte()\n            }\n            else -> { // Surrogate char value\n                val codePoint = codePointFromSurrogate(string, code, charIndex, endIndex, throwOnMalformed)\n                if (codePoint <= 0) {\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[0]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[1]\n                    bytes[byteIndex++] = REPLACEMENT_BYTE_SEQUENCE[2]\n                } else {\n                    bytes[byteIndex++] = ((codePoint shr 18) or 0xF0).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 12) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = (((codePoint shr 6) and 0x3F) or 0x80).toByte()\n                    bytes[byteIndex++] = ((codePoint and 0x3F) or 0x80).toByte()\n                    charIndex++\n                }\n            }\n        }\n    }\n\n    return if (bytes.size == byteIndex) bytes else bytes.copyOf(byteIndex)\n}\n\n/**\n * The character a malformed UTF-8 byte sequence is replaced by.\n */\nprivate const val REPLACEMENT_CHAR = '\\uFFFD'\n\n/**\n * Decodes the UTF-8 [bytes] array and returns the resulting [String].\n *\n * @param bytes the byte array to decode.\n * @param startIndex the start offset (inclusive) of the array to be decoded.\n * @param endIndex the end offset (exclusive) of the array to be encoded.\n * @param throwOnMalformed whether to throw on malformed byte sequence or replace by the [REPLACEMENT_CHAR].\n *\n * @throws CharacterCodingException if the array is malformed UTF-8 byte sequence and [throwOnMalformed] is true.\n */\ninternal fun decodeUtf8(bytes: ByteArray, startIndex: Int, endIndex: Int, throwOnMalformed: Boolean): String {\n    require(startIndex >= 0 && endIndex <= bytes.size && startIndex <= endIndex)\n\n    var byteIndex = startIndex\n    val stringBuilder = StringBuilder()\n\n    while (byteIndex < endIndex) {\n        val byte = bytes[byteIndex++].toInt()\n        when {\n            byte >= 0 ->\n                stringBuilder.append(byte.toChar())\n            byte shr 5 == -2 -> {\n                val code = codePointFrom2(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 1\n                }\n            }\n            byte shr 4 == -2 -> {\n                val code = codePointFrom3(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    stringBuilder.append(code.toChar())\n                    byteIndex += 2\n                }\n            }\n            byte shr 3 == -2 -> {\n                val code = codePointFrom4(bytes, byte, byteIndex, endIndex, throwOnMalformed)\n                if (code <= 0) {\n                    stringBuilder.append(REPLACEMENT_CHAR)\n                    byteIndex += -code\n                } else {\n                    val high = (code - 0x10000) shr 10 or 0xD800\n                    val low = (code and 0x3FF) or 0xDC00\n                    stringBuilder.append(high.toChar())\n                    stringBuilder.append(low.toChar())\n                    byteIndex += 3\n                }\n            }\n            else -> {\n                malformed(0, byteIndex, throwOnMalformed)\n                stringBuilder.append(REPLACEMENT_CHAR)\n            }\n        }\n    }\n\n    return stringBuilder.toString()\n}","/*\n * Copyright 2010-2020 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.coroutines.*\nimport kotlin.coroutines.intrinsics.*\nimport kotlin.native.concurrent.SharedImmutable\n\n/**\n * Defines deep recursive function that keeps its stack on the heap,\n * which allows very deep recursive computations that do not use the actual call stack.\n * To initiate a call to this deep recursive function use its [invoke] function.\n * As a rule of thumb, it should be used if recursion goes deeper than a thousand calls.\n *\n * The [DeepRecursiveFunction] takes one parameter of type [T] and returns a result of type [R].\n * The [block] of code defines the body of a recursive function. In this block\n * [callRecursive][DeepRecursiveScope.callRecursive] function can be used to make a recursive call\n * to the declared function. Other instances of [DeepRecursiveFunction] can be called\n * in this scope with `callRecursive` extension, too.\n *\n * For example, take a look at the following recursive tree class and a deeply\n * recursive instance of this tree with 100K nodes:\n *\n * ```\n * class Tree(val left: Tree? = null, val right: Tree? = null)\n * val deepTree = generateSequence(Tree()) { Tree(it) }.take(100_000).last()\n * ```\n *\n * A regular recursive function can be defined to compute a depth of a tree:\n *\n * ```\n * fun depth(t: Tree?): Int =\n *     if (t == null) 0 else max(depth(t.left), depth(t.right)) + 1\n * println(depth(deepTree)) // StackOverflowError\n * ```\n *\n * If this `depth` function is called for a `deepTree` it produces `StackOverflowError` because of deep recursion.\n * However, the `depth` function can be rewritten using `DeepRecursiveFunction` in the following way, and then\n * it successfully computes [`depth(deepTree)`][DeepRecursiveFunction.invoke] expression:\n *\n * ```\n * val depth = DeepRecursiveFunction<Tree?, Int> { t ->\n *     if (t == null) 0 else max(callRecursive(t.left), callRecursive(t.right)) + 1\n * }\n * println(depth(deepTree)) // Ok\n * ```\n *\n * Deep recursive functions can also mutually call each other using a heap for the stack via\n * [callRecursive][DeepRecursiveScope.callRecursive] extension. For example, the\n * following pair of mutually recursive functions computes the number of tree nodes at even depth in the tree.\n *\n * ```\n * val mutualRecursion = object {\n *     val even: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else odd.callRecursive(t.left) + odd.callRecursive(t.right) + 1\n *     }\n *     val odd: DeepRecursiveFunction<Tree?, Int> = DeepRecursiveFunction { t ->\n *         if (t == null) 0 else even.callRecursive(t.left) + even.callRecursive(t.right)\n *     }\n * }\n * ```\n *\n * @param [T] the function parameter type.\n * @param [R] the function result type.\n * @param block the function body.\n */\n@SinceKotlin(\"1.7\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic class DeepRecursiveFunction<T, R>(\n    internal val block: suspend DeepRecursiveScope<T, R>.(T) -> R\n)\n\n/**\n * Initiates a call to this deep recursive function, forming a root of the call tree.\n *\n * This operator should not be used from inside of [DeepRecursiveScope] as it uses the call stack slot for\n * initial recursive invocation. From inside of [DeepRecursiveScope] use\n * [callRecursive][DeepRecursiveScope.callRecursive].\n */\n@SinceKotlin(\"1.7\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic operator fun <T, R> DeepRecursiveFunction<T, R>.invoke(value: T): R =\n    DeepRecursiveScopeImpl<T, R>(block, value).runCallLoop()\n\n/**\n * A scope class for [DeepRecursiveFunction] function declaration that defines [callRecursive] methods to\n * recursively call this function or another [DeepRecursiveFunction] putting the call activation frame on the heap.\n *\n * @param [T] function parameter type.\n * @param [R] function result type.\n */\n@RestrictsSuspension\n@SinceKotlin(\"1.7\")\n@WasExperimental(ExperimentalStdlibApi::class)\npublic sealed class DeepRecursiveScope<T, R> {\n    /**\n     * Makes recursive call to this [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular recursive call.\n     */\n    public abstract suspend fun callRecursive(value: T): R\n\n    /**\n     * Makes call to the specified [DeepRecursiveFunction] function putting the call activation frame on the heap,\n     * as opposed to the actual call stack that is used by a regular call.\n     */\n    public abstract suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S\n\n    @Deprecated(\n        level = DeprecationLevel.ERROR,\n        message =\n        \"'invoke' should not be called from DeepRecursiveScope. \" +\n                \"Use 'callRecursive' to do recursion in the heap instead of the call stack.\",\n        replaceWith = ReplaceWith(\"this.callRecursive(value)\")\n    )\n    @Suppress(\"UNUSED_PARAMETER\")\n    public operator fun DeepRecursiveFunction<*, *>.invoke(value: Any?): Nothing =\n        throw UnsupportedOperationException(\"Should not be called from DeepRecursiveScope\")\n}\n\n// ================== Implementation ==================\n\nprivate typealias DeepRecursiveFunctionBlock = suspend DeepRecursiveScope<*, *>.(Any?) -> Any?\n\n@SharedImmutable\nprivate val UNDEFINED_RESULT = Result.success(COROUTINE_SUSPENDED)\n\n@Suppress(\"UNCHECKED_CAST\")\nprivate class DeepRecursiveScopeImpl<T, R>(\n    block: suspend DeepRecursiveScope<T, R>.(T) -> R,\n    value: T\n) : DeepRecursiveScope<T, R>(), Continuation<R> {\n    // Active function block\n    private var function: DeepRecursiveFunctionBlock = block as DeepRecursiveFunctionBlock\n\n    // Value to call function with\n    private var value: Any? = value\n\n    // Continuation of the current call\n    private var cont: Continuation<Any?>? = this as Continuation<Any?>\n\n    // Completion result (completion of the whole call stack)\n    private var result: Result<Any?> = UNDEFINED_RESULT\n\n    override val context: CoroutineContext\n        get() = EmptyCoroutineContext\n\n    override fun resumeWith(result: Result<R>) {\n        this.cont = null\n        this.result = result\n    }\n\n    override suspend fun callRecursive(value: T): R = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling the same function that is currently active\n        this.cont = cont as Continuation<Any?>\n        this.value = value\n        COROUTINE_SUSPENDED\n    }\n\n    override suspend fun <U, S> DeepRecursiveFunction<U, S>.callRecursive(value: U): S = suspendCoroutineUninterceptedOrReturn { cont ->\n        // calling another recursive function\n        val function = block as DeepRecursiveFunctionBlock\n        with(this@DeepRecursiveScopeImpl) {\n            val currentFunction = this.function\n            if (function !== currentFunction) {\n                // calling a different function -- create a trampoline to restore function ref\n                this.function = function\n                this.cont = crossFunctionCompletion(currentFunction, cont as Continuation<Any?>)\n            } else {\n                // calling the same function -- direct\n                this.cont = cont as Continuation<Any?>\n            }\n            this.value = value\n        }\n        COROUTINE_SUSPENDED\n    }\n\n    private fun crossFunctionCompletion(\n        currentFunction: DeepRecursiveFunctionBlock,\n        cont: Continuation<Any?>\n    ): Continuation<Any?> = Continuation(EmptyCoroutineContext) {\n        this.function = currentFunction\n        // When going back from a trampoline we cannot just call cont.resume (stack usage!)\n        // We delegate the cont.resumeWith(it) call to runCallLoop\n        this.cont = cont\n        this.result = it\n    }\n\n    @Suppress(\"UNCHECKED_CAST\")\n    fun runCallLoop(): R {\n        while (true) {\n            // Note: cont is set to null in DeepRecursiveScopeImpl.resumeWith when the whole computation completes\n            val result = this.result\n            val cont = this.cont\n                ?: return (result as Result<R>).getOrThrow() // done -- final result\n            // The order of comparison is important here for that case of rogue class with broken equals\n            if (UNDEFINED_RESULT == result) {\n                // call \"function\" with \"value\" using \"cont\" as completion\n                val r = try {\n                    // This is block.startCoroutine(this, value, cont)\n                    function.startCoroutineUninterceptedOrReturn(this, value, cont)\n                } catch (e: Throwable) {\n                    cont.resumeWithException(e)\n                    continue\n                }\n                // If the function returns without suspension -- calls its continuation immediately\n                if (r !== COROUTINE_SUSPENDED)\n                    cont.resume(r as R)\n            } else {\n                // we returned from a crossFunctionCompletion trampoline -- call resume here\n                this.result = UNDEFINED_RESULT // reset result back\n                cont.resumeWith(result)\n            }\n        }\n    }\n}\n",null,null,null,null,null,null,null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. and Kotlin Programming Language contributors.\n * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin\n\nimport kotlin.internal.InlineOnly\n\n\n/**\n * Returns a hash code value for the object or zero if the object is `null`.\n *\n * @see Any.hashCode\n */\n@SinceKotlin(\"1.3\")\n@InlineOnly\npublic inline fun Any?.hashCode(): Int = this?.hashCode() ?: 0\n",null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,"package pogolitics.api\r\n\r\nimport kotlinx.coroutines.await\r\nimport pogolitics.applicationRoot\r\nimport kotlinx.browser.window\r\n\r\nclass Api() {\r\n    private var index: Array<PokemonIndexEntryDto>? = null\r\n    private var pokemon: PokemonDto? = null\r\n    private var fastMoves: Array<FastMoveDto>? = null\r\n    private var chargedMoves: Array<ChargedMoveDto>? = null\r\n\r\n    suspend fun fetchPokemonIndex(): Array<PokemonIndexEntryDto> {\r\n        if (index == null) {\r\n            index = fetchResource(\"/data/pokemon/index.json\")\r\n                .await()\r\n                .json()\r\n                .await()\r\n                .unsafeCast<Array<PokemonIndexEntryDto>>()\r\n        }\r\n        return index!!\r\n    }\r\n\r\n    suspend fun fetchPokemon(uniqueId: String): PokemonDto {\r\n        if (pokemon == null || pokemon?.uniqueId != uniqueId) {\r\n            pokemon = fetchResource(\"/data/pokemon/$uniqueId.json\")\r\n                    .await()\r\n                    .json()\r\n                    .await()\r\n                    .unsafeCast<PokemonDto>()\r\n            console.log(pokemon)\r\n        }\r\n        return pokemon!!\r\n    }\r\n\r\n    suspend fun fetchFastMoves(): Array<FastMoveDto> {\r\n        if (fastMoves == null) {\r\n            fastMoves = fetchResource(\"/data/attacks/fast.json\")\r\n                    .await()\r\n                    .json()\r\n                    .await()\r\n                    .unsafeCast<Array<FastMoveDto>>()\r\n        }\r\n        return fastMoves!!\r\n    }\r\n\r\n    suspend fun fetchChargedMoves(): Array<ChargedMoveDto> {\r\n        if (chargedMoves == null) {\r\n            chargedMoves = fetchResource(\"/data/attacks/charged.json\")\r\n                    .await()\r\n                    .json()\r\n                    .await()\r\n                    .unsafeCast<Array<ChargedMoveDto>>()\r\n        }\r\n        return chargedMoves!!\r\n    }\r\n\r\n    fun fetchResource(url: String) = window.fetch(applicationRoot + url)\r\n}\r\n","package pogolitics\r\n\r\nimport csstype.TextAlign\r\nimport csstype.number\r\nimport emotion.react.css\r\nimport history.Location\r\nimport js.core.jso\r\nimport kotlinx.coroutines.MainScope\r\nimport kotlinx.coroutines.launch\r\nimport org.w3c.dom.url.URLSearchParams\r\nimport pogolitics.view.NotFoundModel\r\nimport pogolitics.view.NotFoundPage\r\nimport react.*\r\nimport react.router.*\r\nimport react.router.dom.HashRouter\r\nimport kotlinx.browser.window\r\nimport pogolitics.model.PokemonEntry\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.loadingImagePath\r\nimport pogolitics.view.renderPage\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.img\r\nimport kotlin.reflect.KClass\r\n\r\nexternal interface AppState : State {\r\n    var controllerResult: ControllerResult<*, *>?\r\n    var url: String?\r\n    var pageState: Any?\r\n    var pageStateChanged: Boolean\r\n    var pokemonIndex: List<PokemonEntry>?\r\n}\r\n\r\nclass App: Component<Props, AppState>() {\r\n    val appConfig = AppConfig()\r\n\r\n    init {\r\n        state = jso {\r\n            pageStateChanged = false\r\n        }\r\n    }\r\n\r\n    override fun render() = Fragment.create {\r\n        HashRouter {\r\n            Routes {\r\n                appConfig.routing.forEach {\r\n                    routeToPage(it)\r\n                }\r\n                Route {\r\n                    path = \"/\"\r\n                    element = Fragment.create {\r\n                        renderNotFoundPage(\"Invalid path\", null)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun <M, S> ChildrenBuilder.routeToPage(route: AppConfig.Route<M, S>) {\r\n        Route {\r\n            path = route.path\r\n            element = wrapInFc {\r\n                val params: Params = useParams()\r\n                val location: Location = useLocation()\r\n                val url = window.location.href\r\n                if (state.controllerResult != null && state.url == url) {\r\n                    if (state.pageStateChanged) {\r\n                        orderStateReload(route, params, location)\r\n                    }\r\n                    state.pageStateChanged = false\r\n                    renderPage<M, S>()\r\n                } else {\r\n                    state.pageStateChanged = false\r\n                    state.pageState = route.controller.getInitialState(url)\r\n                    orderStateReload(route, params, location)\r\n                    +renderLoadingPage()\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun wrapInFc(block: ChildrenBuilder.(props: Props) -> Unit): ReactNode {\r\n        return FC(block).create() // workaround to be able to call useParams(), perhaps it can be done cleaner\r\n    }\r\n\r\n    private fun renderLoadingPage() = renderPage(null, emptyList()) {\r\n        div {\r\n            css {\r\n                padding = StyleConstants.Padding.big\r\n                textAlign = TextAlign.center\r\n                opacity = number(0.1)\r\n            }\r\n            img { src = loadingImagePath() }\r\n        }\r\n    }\r\n\r\n    private fun ChildrenBuilder.renderNotFoundPage(reason: String, pokemonIndex: List<PokemonEntry>?) {\r\n        NotFoundPage::class.react {\r\n            model = NotFoundModel(reason, pokemonIndex)\r\n        }\r\n    }\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    private fun <S> orderStateReload(route: AppConfig.Route<*, S>, params: Params, location: Location) {\r\n        MainScope().launch {\r\n            val controllerResult =\r\n                route.controller.get(\r\n                    props = params,\r\n                    params = URLSearchParams(location.search),\r\n                    state = state.pageState!! as S\r\n                )\r\n            val pokemonIndex = if (controllerResult.notFoundReason != null) {\r\n                // This might not be the most elegant solution\r\n                // We may think of other approach later\r\n                appConfig.pokemonIndexService.getPokemonList()\r\n            } else {\r\n                emptyList()\r\n            }\r\n            setState({ state ->\r\n                state.url = window.location.href\r\n                state.controllerResult = controllerResult\r\n                state.pokemonIndex = pokemonIndex\r\n                state\r\n            })\r\n        }\r\n    }\r\n\r\n    @Suppress(\"UNCHECKED_CAST\")\r\n    private fun <M, S> ChildrenBuilder.renderPage() {\r\n        return if (state.controllerResult!!.isModelAndView) {\r\n            val component = state.controllerResult!!.view as KClass<Component<PageRProps<M, S>, State>>\r\n            component.react {\r\n                model = state.controllerResult!!.model as M\r\n                //attrs.state = state.pageState!! as S\r\n                updateState = {\r\n                    setState({state ->\r\n                        state.pageState = it\r\n                        state.pageStateChanged = true\r\n                        state\r\n                    })\r\n                }\r\n            }\r\n        } else {\r\n            renderNotFoundPage(state.controllerResult!!.notFoundReason!!, state.pokemonIndex!!)\r\n        }\r\n    }\r\n\r\n}\r\n",null,"package pogolitics\r\n\r\nimport pogolitics.api.Api\r\nimport pogolitics.controller.Controller\r\nimport pogolitics.controller.HomePageController\r\nimport pogolitics.controller.PokemonListController\r\nimport pogolitics.controller.PokemonIndexService\r\nimport pogolitics.controller.SinglePokemonController\r\n\r\nclass AppConfig {\r\n    private val api = Api()\r\n    val pokemonIndexService = PokemonIndexService(api)\r\n\r\n    private val homePageController = HomePageController(pokemonIndexService)\r\n    private val pokemonListController = PokemonListController(pokemonIndexService)\r\n    private val pokemonController = SinglePokemonController(api, pokemonIndexService)\r\n\r\n    // TODO later: move path to controller as well\r\n    val routing: List<Route<out Any, out Any>> = listOf(\r\n        Route(\"/\", true, homePageController),\r\n        Route(\"/pokemon\", true, pokemonListController),\r\n        Route(\"/pokemon/:pokedexNumber\", false, pokemonController)\r\n    )\r\n\r\n    class Route<M, S>(\r\n        val path: String,\r\n        val exact: Boolean,\r\n        val controller: Controller<M, S>\r\n    )\r\n\r\n}","package pogolitics.controller\r\n\r\nimport kotlin.math.floor\r\nimport kotlin.math.sqrt\r\n\r\nclass CpCalculator(\r\n    private val pokemon: PokemonData,\r\n    private val pokemonIv: PokemonIv\r\n) {\r\n    data class PokemonData(\r\n            // TODO think if merging it with MoveSetStatsCalculator PokemonData OR PokemonIndividualValues is a good idea\r\n            // Probably the 2nd one but a little bit dirrerently...\r\n        val baseAttack: Int,\r\n        val baseDefense: Int,\r\n        val baseStamina: Int\r\n    )\r\n\r\n    data class PokemonIv(val attack: Int, val defense: Int, val stamina: Int)\r\n\r\n    data class CalculatedPokemonStatistics(\r\n        val level: Float,\r\n        val cp: Int,\r\n        val matchingInputArgument: Boolean,\r\n        val attack : Double,\r\n        val defense : Double,\r\n        val stamina : Double\r\n    )\r\n\r\n    fun calcStatisticsByLevel(level: Float): CalculatedPokemonStatistics {\r\n        val attack = calcStatValue(pokemon.baseAttack, pokemonIv.attack, level)\r\n        val defense = calcStatValue(pokemon.baseDefense, pokemonIv.defense, level)\r\n        val stamina = calcStatValue(pokemon.baseStamina, pokemonIv.stamina, level)\r\n        val cp = floor(0.1 * attack * sqrt(defense * stamina)).toInt()\r\n        return CalculatedPokemonStatistics(\r\n            level = level,\r\n            cp = cp,\r\n            attack = attack,\r\n            stamina = stamina,\r\n            defense = defense,\r\n            matchingInputArgument = true\r\n        )\r\n    }\r\n\r\n    fun calcStatisticsByCp(cp: Int): CalculatedPokemonStatistics {\r\n        var level = 0.5F // smallest possible value (=1.0) - step (=0.5F)\r\n        do {\r\n            level += 0.5F\r\n        } while (level <= ABSOLUTE_MAX_LEVEL && calcStatisticsByLevel(level).cp <= cp)\r\n        if (level > 1.0F) {\r\n            level -= 0.5F\r\n        }\r\n        val calculatedStatistics = calcStatisticsByLevel(level)\r\n        return calculatedStatistics.copy(matchingInputArgument = calculatedStatistics.cp == cp)\r\n    }\r\n\r\n}","package pogolitics.controller\r\n\r\nobject CpMultiplayer {\r\n    private val map: Map<Float, Double> = mapOf(\r\n        1F    to 0.094,\r\n        1.5F  to 0.1351374318,\r\n        2F    to 0.16639787,\r\n        2.5F  to 0.192650919,\r\n        3F    to 0.21573247,\r\n        3.5F  to 0.2365726613,\r\n        4F    to 0.25572005,\r\n        4.5F  to 0.2735303812,\r\n        5F    to 0.29024988,\r\n        5.5F  to 0.3060573775,\r\n        6F    to 0.3210876,\r\n        6.5F  to 0.3354450362,\r\n        7F    to 0.34921268,\r\n        7.5F  to 0.3624577511,\r\n        8F    to 0.3752356,\r\n        8.5F  to 0.387592416,\r\n        9F    to 0.39956728,\r\n        9.5F  to 0.4111935514,\r\n        10F   to 0.4225,\r\n        10.5F to 0.4329264091,\r\n        11F   to 0.44310755,\r\n        11.5F to 0.4530599591,\r\n        12F   to 0.4627984,\r\n        12.5F to 0.472336093,\r\n        13F   to 0.48168495,\r\n        13.5F to 0.4908558003,\r\n        14F   to 0.49985844,\r\n        14.5F to 0.508701765,\r\n        15F   to 0.51739395,\r\n        15.5F to 0.5259425113,\r\n        16F   to 0.5343543,\r\n        16.5F to 0.5426357375,\r\n        17F   to 0.5507927,\r\n        17.5F to 0.5588305862,\r\n        18F   to 0.5667545,\r\n        18.5F to 0.5745691333,\r\n        19F   to 0.5822789,\r\n        19.5F to 0.5898879072,\r\n        20F   to 0.5974,\r\n        20.5F to 0.6048236651,\r\n        21F   to 0.6121573,\r\n        21.5F to 0.6194041216,\r\n        22F   to 0.6265671,\r\n        22.5F to 0.6336491432,\r\n        23F   to 0.64065295,\r\n        23.5F to 0.6475809666,\r\n        24F   to 0.65443563,\r\n        24.5F to 0.6612192524,\r\n        25F   to 0.667934,\r\n        25.5F to 0.6745818959,\r\n        26F   to 0.6811649,\r\n        26.5F to 0.6876849038,\r\n        27F   to 0.69414365,\r\n        27.5F to 0.70054287,\r\n        28F   to 0.7068842,\r\n        28.5F to 0.7131691091,\r\n        29F   to 0.7193991,\r\n        29.5F to 0.7255756136,\r\n        30F   to 0.7317,\r\n        30.5F to 0.7347410093,\r\n        31F   to 0.7377695,\r\n        31.5F to 0.7407855938,\r\n        32F   to 0.74378943,\r\n        32.5F to 0.7467812109,\r\n        33F   to 0.74976104,\r\n        33.5F to 0.7527290867,\r\n        34F   to 0.7556855,\r\n        34.5F to 0.7586303683,\r\n        35F   to 0.76156384,\r\n        35.5F to 0.7644860647,\r\n        36F   to 0.76739717,\r\n        36.5F to 0.7702972656,\r\n        37F   to 0.7731865,\r\n        37.5F to 0.7760649616,\r\n        38F   to 0.77893275,\r\n        38.5F to 0.7817900548,\r\n        39F   to 0.784637,\r\n        39.5F to 0.7874736075,\r\n        40F   to 0.7903,\r\n        40.5F to 0.792803968,\r\n        41F   to 0.79530001,\r\n        41.5F to 0.797800015,\r\n        42F   to 0.8003,\r\n        42.5F to 0.802799995,\r\n        43F   to 0.8053,\r\n        43.5F to 0.8078,\r\n        44F   to 0.81029999,\r\n        44.5F to 0.812799985,\r\n        45F   to 0.81529999,\r\n        45.5F to 0.81779999,\r\n        46F   to 0.82029999,\r\n        46.5F to 0.82279999,\r\n        47F   to 0.82529999,\r\n        47.5F to 0.82779999,\r\n        48F   to 0.83029999,\r\n        48.5F to 0.83279999,\r\n        49F   to 0.83529999,\r\n        49.5F to 0.83779999,\r\n        50F   to 0.84029999,\r\n        50.5F to 0.84279999,\r\n        51F   to 0.84529999\r\n    )\r\n\r\n    operator fun get(level: Float): Double {\r\n        return map[level] ?: throw IndexOutOfBoundsException(\"Level must be in [1, 51] range and be a multiple of 0.5\")\r\n    }\r\n}\r\n\r\nfun calcStatValue(baseStat: Int, iv: Int = 15, level: Float = 40F): Double {\r\n    return CpMultiplayer[level] * (baseStat + iv)\r\n}","package pogolitics.controller\r\n\r\nimport org.w3c.dom.url.URLSearchParams\r\nimport pogolitics.ControllerResult\r\nimport pogolitics.model.HomePageModel\r\nimport pogolitics.view.HomePage\r\nimport react.router.Params\r\nimport kotlin.reflect.KClass\r\n\r\nclass HomePageController(private val pokemonIndexService: PokemonIndexService): Controller<HomePageModel, Unit> {\r\n\r\n    override fun getInitialState(url: String) {}\r\n\r\n    override suspend fun get(\r\n        props: Params,\r\n        params: URLSearchParams,\r\n        state: Unit\r\n    ): ControllerResult<HomePageModel, KClass<HomePage>> {\r\n        return ControllerResult.modelAndView(\r\n            view = HomePage::class,\r\n            model = HomePageModel(pokemonIndexService.getPokemonList())\r\n        )\r\n    }\r\n}","package pogolitics.controller\r\n\r\nclass MissingDataException(msg: String) : Exception(msg)\r\n","package pogolitics.controller\r\n\r\nimport pogolitics.controller.MoveSetStatsCalculator.*\r\nimport pogolitics.api.ChargedMoveDto\r\nimport pogolitics.api.FastMoveDto\r\nimport pogolitics.api.PokemonDto\r\nimport pogolitics.model.Attack\r\nimport pogolitics.model.BattleMode\r\nimport pogolitics.model.MoveSet\r\nimport pogolitics.model.PokemonType\r\nimport pogolitics.pvpTurns\r\nimport kotlin.time.Duration.Companion.milliseconds\r\n\r\nprivate class PvPMoveSetsMapper(\r\n    pokemonDto: PokemonDto,\r\n    fastMoves: Array<FastMoveDto>,\r\n    chargedMoves: Array<ChargedMoveDto>\r\n) : MoveSetsMapper(pokemonDto, fastMoves, chargedMoves) {\r\n    override fun mapFastMove(moveDto: FastMoveDto): MoveData {\r\n        return MoveData(\r\n            power = moveDto.pvp.power,\r\n            energy = moveDto.pvp.energy,\r\n            duration = moveDto.pvp.duration.pvpTurns,\r\n            type = PokemonType.fromString(moveDto.type)\r\n        )\r\n    }\r\n\r\n    override fun mapChargedMove(moveDto: ChargedMoveDto): MoveData {\r\n        return MoveData(\r\n            power = moveDto.pvp.power,\r\n            energy = moveDto.pvp.energy,\r\n            duration = 1.pvpTurns,\r\n            type = PokemonType.fromString(moveDto.type)\r\n        )\r\n    }\r\n}\r\n\r\nprivate class PvEMoveSetsMapper(\r\n    pokemonDto: PokemonDto,\r\n    fastMoves: Array<FastMoveDto>,\r\n    chargedMoves: Array<ChargedMoveDto>\r\n) : MoveSetsMapper(pokemonDto, fastMoves, chargedMoves) {\r\n    override fun mapFastMove(moveDto: FastMoveDto): MoveData {\r\n        return MoveData(\r\n            power = moveDto.pve.power,\r\n            energy = moveDto.pve.energy,\r\n            duration = moveDto.pve.duration.milliseconds,\r\n            type = PokemonType.fromString(moveDto.type)\r\n        )\r\n    }\r\n\r\n    override fun mapChargedMove(moveDto: ChargedMoveDto): MoveData {\r\n        return MoveData(\r\n            power = moveDto.pve.power,\r\n            energy = moveDto.pve.energy,\r\n            duration = moveDto.pve.duration.milliseconds,\r\n            type = PokemonType.fromString(moveDto.type)\r\n        )\r\n    }\r\n}\r\n\r\nsealed class MoveSetsMapper constructor(\r\n    private val pokemonDto: PokemonDto,\r\n    fastMoves: Array<FastMoveDto>,\r\n    chargedMoves: Array<ChargedMoveDto>\r\n) {\r\n    companion object {\r\n        fun create(\r\n            mode: BattleMode,\r\n            pokemonDto: PokemonDto,\r\n            fastMoves: Array<FastMoveDto>,\r\n            chargedMoves: Array<ChargedMoveDto>\r\n        ): MoveSetsMapper = if (mode == BattleMode.PVP) {\r\n            PvPMoveSetsMapper(pokemonDto, fastMoves, chargedMoves)\r\n        } else {\r\n            PvEMoveSetsMapper(pokemonDto, fastMoves, chargedMoves)\r\n        }\r\n    }\r\n\r\n    private val quickAttacks: Map<String, FastMoveDto> = fastMoves.associateBy { it.id }\r\n    private val chargedAttacks: Map<String, ChargedMoveDto> = chargedMoves.associateBy { it.id }\r\n\r\n    fun getData(pokemonLevel: Float, pokemonAttackIv: Int): List<MoveSet> {\r\n        val pokemon = mapPokemonData(pokemonDto)\r\n        return combinations(pokemonDto.moves.quick, pokemonDto.moves.charged) { fast, charged ->\r\n            val fastMove = quickAttacks[fast.id] ?: throw MissingDataException(\"Unknown attack: ${fast.id}\")\r\n            val chargedMove = chargedAttacks[charged.id] ?: throw MissingDataException(\"Unknown attack: ${charged.id}\")\r\n            val calculator = MoveSetStatsCalculator(\r\n                pokemon = pokemon,\r\n                fast = mapFastMove(fastMove),\r\n                charged = mapChargedMove(chargedMove),\r\n                individualPokemonStats = IndividualPokemonStats(pokemonLevel, pokemonAttackIv)\r\n            )\r\n            MoveSet(\r\n                quickAttack = Attack(PokemonType.fromString(fastMove.type), fastMove.name, fast.elite),\r\n                chargedAttack = Attack(PokemonType.fromString(chargedMove.type), chargedMove.name, charged.elite),\r\n                dps = calculator.dps().toFloat(),\r\n                timeToFirstAttack = calculator.timeToFirstAttack(),\r\n                meanTimeBetweenAttacks = calculator.meanTimeBetweenAttacks()\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun mapPokemonData(pokemonDto: PokemonDto): PokemonData {\r\n        return PokemonData(\r\n            baseAttack = pokemonDto.baseAttack,\r\n            baseDefense = pokemonDto.baseDefense,\r\n            baseStamina = pokemonDto.baseStamina,\r\n            types = pokemonDto.types.let {\r\n                PokemonTypes(PokemonType.fromString(it.primary), it.secondary?.let { PokemonType.fromString(it) })\r\n            }\r\n        )\r\n    }\r\n\r\n    protected abstract fun mapFastMove(moveDto: FastMoveDto): MoveData\r\n\r\n    protected abstract fun mapChargedMove(moveDto: ChargedMoveDto): MoveData\r\n\r\n    private fun <T, U, O> combinations(arr1: Array<T>, arr2: Array<U>, mapper: (T, U) -> O): List<O> {\r\n        return arr1.flatMap { a1 -> arr2.map { a2 -> mapper(a1, a2) } }\r\n    }\r\n}\r\n","package pogolitics.controller\r\n\r\nimport pogolitics.model.PokemonType\r\nimport kotlin.math.ceil\r\nimport kotlin.time.Duration\r\nimport kotlin.time.DurationUnit.SECONDS\r\n\r\nclass MoveSetStatsCalculator(\r\n        private val pokemon: PokemonData,\r\n        private val fast: MoveData,\r\n        private val charged: MoveData,\r\n        private val individualPokemonStats: IndividualPokemonStats\r\n) {\r\n    data class PokemonData(\r\n        val baseAttack: Int,\r\n        val baseDefense: Int,\r\n        val baseStamina: Int,\r\n        private val types: PokemonTypes\r\n    ) {\r\n        fun isOfType(type: PokemonType): Boolean {\r\n            return types.primary == type || types.secondary == type\r\n        }\r\n    }\r\n\r\n    data class PokemonTypes(val primary: PokemonType, val secondary: PokemonType? = null)\r\n\r\n    data class MoveData(\r\n        val power: Int,\r\n        val energy: Int,\r\n        val duration: Duration,\r\n        val type: PokemonType\r\n    )\r\n\r\n    data class IndividualPokemonStats(val level: Float, val attack: Int)\r\n\r\n    // cache fields\r\n    private var dps: Double? = null\r\n    private var effectiveFastAttackDps: Double? = null\r\n\r\n    fun dps(): Double {\r\n        if (dps == null) {\r\n            dps = effectiveFastAttackDps() + chargedAttackDps()\r\n        }\r\n        return dps ?: throw RuntimeException(\"Should not happen\")\r\n    }\r\n\r\n    fun timeToFirstAttack(): Duration = fast.duration * ceil(charged.energy.toDouble() / fast.energy)\r\n\r\n    fun meanTimeBetweenAttacks(): Duration = fast.duration * charged.energy / fast.energy\r\n\r\n    // DPS from fast attack ONLY, if charged attack is used (and therefore takes time to cast)\r\n    fun effectiveFastAttackDps(): Double {\r\n        if (effectiveFastAttackDps == null) {\r\n            effectiveFastAttackDps = fastAttackDps() * (1 - chargedAttackDurationPerSecond())\r\n        }\r\n        return effectiveFastAttackDps ?: throw RuntimeException(\"Should not happen\")\r\n    }\r\n\r\n    // all methods below could be private, but it's useful to be able to look into them (see MoveSetStatsCalculatorTest)\r\n    // DPS if only fast attack is used\r\n   fun fastAttackDps(): Double = damage(fast) / fast.duration.toDouble(SECONDS)\r\n\r\n    private val expectedDefense get() = 100\r\n\r\n    fun fastAttackEnergyGain() = fast.energy / fast.duration.toDouble(SECONDS)\r\n\r\n    fun chargedAttackDurationPerSecond(): Double =\r\n        (charged.duration.toDouble(SECONDS) * fast.energy) /\r\n                (charged.duration.toDouble(SECONDS) * fast.energy + fast.duration.toDouble(SECONDS) * charged.energy)\r\n\r\n   fun effectiveFastAttackEnergyGain(): Double {\r\n        return fastAttackEnergyGain() * (1 - chargedAttackDurationPerSecond())\r\n   }\r\n\r\n   fun chargedAttackDps(): Double {\r\n       return damage(charged) * effectiveFastAttackEnergyGain() / charged.energy\r\n   }\r\n\r\n   fun damage(move: MoveData): Double {\r\n       val stab = if (pokemon.isOfType(move.type)) 1.2 else 1.0\r\n       val attack = calcStatValue(pokemon.baseAttack, individualPokemonStats.attack, individualPokemonStats.level)\r\n       return (0.5 * move.power * attack * stab / expectedDefense) + 0.5 // gamepress formula\r\n       //return floor(0.5 * attack.power * statValue(pokemon.baseAttack) * stab / expectedDefense) + 1; // original formula\r\n   }\r\n}\r\n",null,"package pogolitics.controller\r\n\r\nimport pogolitics.api.Api\r\nimport pogolitics.api.PokemonIndexEntryDto\r\nimport pogolitics.model.PokemonEntry\r\nimport pogolitics.model.PokemonForm\r\n\r\nclass PokemonIndexService(private val api: Api) {\r\n\r\n    suspend fun getPokemonList(): List<PokemonEntry> =\r\n        mapToPokemonEntries(api.fetchPokemonIndex())\r\n\r\n    private fun mapToPokemonEntries(pokemonDtos: Array<PokemonIndexEntryDto>): List<PokemonEntry> =\r\n        pokemonDtos\r\n            .groupBy { it.pokedexNumber }\r\n            .mapValues { (pokedexNumber, entries) ->\r\n                PokemonEntry(\r\n                    pokedexNumber = pokedexNumber,\r\n                    name = entries.first().name,\r\n                    forms = entries\r\n                        .map { PokemonForm.ofNullable(it.form) }\r\n                )\r\n            }\r\n            .values\r\n            .sortedBy { it.pokedexNumber }\r\n}","package pogolitics.controller\r\n\r\nimport org.w3c.dom.url.URLSearchParams\r\nimport pogolitics.ControllerResult\r\nimport pogolitics.model.PokemonListModel\r\nimport pogolitics.view.PokemonListPage\r\nimport react.router.Params\r\nimport kotlin.reflect.KClass\r\n\r\nclass PokemonListController(private val pokemonIndexService: PokemonIndexService) : Controller<PokemonListModel, Unit> {\r\n\r\n    override fun getInitialState(url: String) {}\r\n\r\n    override suspend fun get(\r\n        props: Params,\r\n        params: URLSearchParams,\r\n        state: Unit\r\n    ): ControllerResult<PokemonListModel, KClass<PokemonListPage>> =\r\n        ControllerResult.modelAndView(\r\n            view = PokemonListPage::class,\r\n            model = PokemonListModel(pokemonIndexService.getPokemonList())\r\n        )\r\n\r\n\r\n\r\n}","package pogolitics.controller\r\n\r\nimport js.core.get\r\nimport kotlinx.coroutines.Deferred\r\nimport kotlinx.coroutines.async\r\nimport kotlinx.coroutines.coroutineScope\r\nimport org.w3c.dom.url.URLSearchParams\r\nimport pogolitics.ControllerResult\r\nimport pogolitics.api.*\r\nimport pogolitics.model.*\r\nimport pogolitics.model.SinglePokemonModel.PokemonIndividualStatistics\r\nimport pogolitics.model.SinglePokemonModel.VariablePokemonStatistics\r\nimport pogolitics.view.SinglePokemonPage\r\nimport react.router.Params\r\nimport kotlin.math.sqrt\r\nimport kotlin.reflect.KClass\r\n\r\nclass SinglePokemonController(\r\n    private val api: Api,\r\n    private val pokemonIndexService: PokemonIndexService\r\n): Controller<SinglePokemonModel, PokemonIndividualValuesState> {\r\n\r\n    override fun getInitialState(url: String) =\r\n        PokemonIndividualValuesState(\r\n            level = 40.0F,\r\n            attack = 15,\r\n            defense = 15,\r\n            stamina = 15,\r\n            cp = null\r\n        )\r\n\r\n    override suspend fun get(\r\n        props: Params,\r\n        params: URLSearchParams,\r\n        state: PokemonIndividualValuesState\r\n    ): ControllerResult<SinglePokemonModel, KClass<SinglePokemonPage>> {\r\n        return coroutineScope {\r\n            val form = params.get(\"form\")\r\n            val mode = BattleMode.fromString(params.get(\"mode\") ?: \"pvp\") // TODO display some kind of error page for invalid values\r\n            val pokemonIndex: Deferred<Array<PokemonIndexEntryDto>> = async { api.fetchPokemonIndex() }\r\n            val fastMoves: Deferred<Array<FastMoveDto>> = async { api.fetchFastMoves() }\r\n            val chargedMoves: Deferred<Array<ChargedMoveDto>> = async { api.fetchChargedMoves() }\r\n            val maybePokemon: Deferred<PokemonDto?> = async {\r\n                pokemonIndex.await()\r\n                    .findPokemonUniqueId(props[\"pokedexNumber\"]!!, form)\r\n                    ?.let { uniqueId -> api.fetchPokemon(uniqueId) }\r\n            }\r\n            maybePokemon.await()?.let { pokemon ->\r\n                val pokemonStats = calculatePokemonStatistics(pokemon, state)\r\n                ControllerResult.modelAndView(\r\n                    view = SinglePokemonPage::class,\r\n                    model = SinglePokemonModel(\r\n                        mode = mode,\r\n                        pokemon = toPokemonStaticInfo(pokemon, form),\r\n                        stats = pokemonStats,\r\n                        moveSets = calculateMoveSets(\r\n                            mode = mode,\r\n                            pokemon = pokemon,\r\n                            fastMoves = fastMoves.await(),\r\n                            chargedMoves = chargedMoves.await(),\r\n                            pokemonIvs = pokemonStats\r\n                        ),\r\n                        pokemonIndex = pokemonIndexService.getPokemonList(),\r\n                        focusedElement = state.focus\r\n                    )\r\n                )\r\n            } ?: ControllerResult.notFound(\"No such pokemon\")\r\n        }\r\n    }\r\n\r\n    private fun Array<PokemonIndexEntryDto>.findPokemonUniqueId(pokedexNumber: String, form: String?): String? =\r\n        pokedexNumber.toInt().let { pokedexNumberInt ->\r\n            filter { it.pokedexNumber == pokedexNumberInt }\r\n                .firstOrNull { it.form.equals(form, ignoreCase = true) }\r\n                ?.uniqueId\r\n        }\r\n\r\n    private fun toPokemonStaticInfo(pokemon: PokemonDto, form: String?): SinglePokemonModel.PokemonStaticInfo {\r\n        return SinglePokemonModel.PokemonStaticInfo(\r\n            uniqueId = pokemon.uniqueId,\r\n            pokedexNumber = pokemon.pokedexNumber,\r\n            form = PokemonForm.ofNullable(form),\r\n            name = pokemon.name,\r\n            types = pokemon.types.toModel(),\r\n            baseAttack = pokemon.baseAttack,\r\n            baseDefense = pokemon.baseDefense,\r\n            baseStamina = pokemon.baseStamina,\r\n            hardiness = calculateHardiness(pokemon.baseDefense, pokemon.baseStamina)\r\n        )\r\n    }\r\n\r\n    private fun calculateHardiness(baseDefense: Int, baseStamina: Int): Double =\r\n        sqrt((baseDefense * baseStamina).toDouble())\r\n\r\n    private fun calculateHardiness(defense: Double, stamina: Double): Double =\r\n        sqrt(defense * stamina)\r\n\r\n    private fun calculateMoveSets(\r\n        mode: BattleMode,\r\n        pokemon: PokemonDto,\r\n        fastMoves: Array<FastMoveDto>,\r\n        chargedMoves: Array<ChargedMoveDto>,\r\n        pokemonIvs: PokemonIndividualStatistics,\r\n    ): List<MoveSet> {\r\n        return MoveSetsMapper.create(mode, pokemon, fastMoves, chargedMoves)\r\n            .getData(pokemonIvs.currentStats.level, pokemonIvs.ivs.attack)\r\n    }\r\n\r\n    private fun calculatePokemonStatistics(pokemon: PokemonDto, pokemonIvs: PokemonIndividualValuesState): PokemonIndividualStatistics {\r\n        val calculator = CpCalculator(\r\n            CpCalculator.PokemonData(pokemon.baseAttack, pokemon.baseDefense, pokemon.baseStamina),\r\n            CpCalculator.PokemonIv(pokemonIvs.attack, pokemonIvs.defense, pokemonIvs.stamina)\r\n        )\r\n        if (pokemonIvs.level != null) {\r\n            return PokemonIndividualStatistics(\r\n                ivs = IVs(\r\n                    attack = pokemonIvs.attack,\r\n                    defense = pokemonIvs.defense,\r\n                    stamina = pokemonIvs.stamina\r\n                ),\r\n                currentStats = toVariablePokemonStatistics(calculator.calcStatisticsByLevel(pokemonIvs.level!!)),\r\n                bestGreatLeagueStats = toVariablePokemonStatistics(calculator.calcStatisticsByCp(MAX_GREAT_CP)),\r\n                bestUltraLeagueStats = toVariablePokemonStatistics(calculator.calcStatisticsByCp(MAX_ULTRA_CP)),\r\n                bestStatsWithoutBoost = variablePokemonStatisticsAtBasicMaxLevel(calculator)\r\n            )\r\n        } else {\r\n            return PokemonIndividualStatistics(\r\n                ivs = IVs(\r\n                    attack = pokemonIvs.attack,\r\n                    defense = pokemonIvs.defense,\r\n                    stamina = pokemonIvs.stamina\r\n                ),\r\n                currentStats = toVariablePokemonStatistics(calculator.calcStatisticsByCp(pokemonIvs.cp!!)),\r\n                bestGreatLeagueStats = toVariablePokemonStatistics(calculator.calcStatisticsByCp(MAX_GREAT_CP)),\r\n                bestUltraLeagueStats = toVariablePokemonStatistics(calculator.calcStatisticsByCp(MAX_ULTRA_CP)),\r\n                bestStatsWithoutBoost = variablePokemonStatisticsAtBasicMaxLevel(calculator)\r\n            )\r\n        }\r\n    }\r\n\r\n    private fun variablePokemonStatisticsAtBasicMaxLevel(calculator: CpCalculator): VariablePokemonStatistics {\r\n        return convertToVariablePokemonStatistics(calculator.calcStatisticsByLevel(BASIC_MAX_LEVEL))\r\n    }\r\n\r\n    private fun toVariablePokemonStatistics(calculatedStatistics: CpCalculator.CalculatedPokemonStatistics): VariablePokemonStatistics {\r\n        return convertToVariablePokemonStatistics(calculatedStatistics)\r\n    }\r\n\r\n    private fun convertToVariablePokemonStatistics(calculatedStatistics: CpCalculator.CalculatedPokemonStatistics): VariablePokemonStatistics {\r\n        return VariablePokemonStatistics(\r\n            cp = calculatedStatistics.cp,\r\n            level = calculatedStatistics.level,\r\n            attack = calculatedStatistics.attack,\r\n            defense = calculatedStatistics.defense,\r\n            stamina = calculatedStatistics.stamina,\r\n            hardiness = calculateHardiness(calculatedStatistics.defense, calculatedStatistics.stamina)\r\n        )\r\n    }\r\n\r\n    private fun PokemonDto.TypesDto.toModel(): SinglePokemonModel.PokemonStaticInfo.Types =\r\n        SinglePokemonModel.PokemonStaticInfo.Types(\r\n            primary = PokemonType.fromString(primary),\r\n            secondary = secondary?.let { PokemonType.fromString(it) }\r\n        )\r\n}\r\n\r\n\r\n","package pogolitics\r\n\r\nimport react.Component\r\nimport react.Props\r\nimport react.State\r\nimport kotlin.reflect.KClass\r\n\r\nclass ControllerResult<\r\n    M,\r\n    out V: View<M>\r\n> private constructor(\r\n    val model: M?,\r\n    val view: V?,\r\n    val isModelAndView: Boolean,\r\n    val notFoundReason: String?\r\n) {\r\n    companion object {\r\n        fun <M, V: View<M>> modelAndView(model: M, view: V): ControllerResult<M, V>  {\r\n            return ControllerResult(\r\n                model = model,\r\n                view = view,\r\n                isModelAndView = true,\r\n                notFoundReason = null\r\n            )\r\n        }\r\n\r\n        fun <M, V: View<M>> notFound(reason: String): ControllerResult<M, V> {\r\n            return ControllerResult(\r\n                model = null,\r\n                view = null,\r\n                isModelAndView = false,\r\n                notFoundReason = reason\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\ntypealias View <M> = KClass<out Component<out PageRProps<M, *>, out State>>\r\n\r\ninterface PageRProps<M, S> : Props {\r\n    var model: M\r\n    var updateState: (S) -> Unit\r\n}\r\n\r\ninterface PageRState<T> : State {\r\n    var data: T?\r\n}\r\n","package pogolitics\r\n\r\nobject KeyCodes {\r\n    const val enter = \"Enter\"\r\n    const val numpadEnter = \"NumpadEnter\"\r\n    const val arrowUp = \"ArrowUp\"\r\n    const val arrowDown = \"ArrowDown\"\r\n}","package pogolitics\r\n\r\nimport browser.document\r\nimport dom.Element\r\nimport react.Fragment\r\nimport react.create\r\nimport react.dom.client.createRoot\r\nimport react.react\r\n\r\nfun main() {\r\n    exportForJs()\r\n    document.createElement(\"div\")\r\n        .apply { id = \"root\" }\r\n        .also { document.body.appendChild(it) }\r\n        .also { element: Element ->\r\n            createRoot(element)\r\n                .render(\r\n                    Fragment.create {\r\n                        App::class.react { }\r\n                    }\r\n                )\r\n        }\r\n}\r\n\r\nfun exportForJs() {\r\n    eval(\"window.PGL = {}\")\r\n    eval(\"window.PGL.CpCalculator = CpCalculator\")\r\n    eval(\"window.PGL.calcStatValue = calcStatValue\")\r\n}\r\n","package pogolitics.model\r\n\r\ndata class Attack(val type: PokemonType, val name: String, val elite: Boolean)","package pogolitics.model\r\n\r\nenum class BattleMode {\r\n    PVP, PVE;\r\n\r\n    companion object {\r\n        fun fromString(value: String) = BattleMode.valueOf(value.uppercase())\r\n        val default = PVP\r\n    }\r\n}",null,"package pogolitics.model\r\n\r\ndata class HomePageModel(val pokemonIndex: List<PokemonEntry>)","package pogolitics.model\r\n\r\ndata class IVs(val attack: Int, val defense: Int, val stamina: Int)","package pogolitics.model\r\n\r\nimport kotlin.time.Duration\r\n\r\ndata class MoveSet(\r\n    val quickAttack: Attack,\r\n    val chargedAttack: Attack,\r\n    val dps: Float,\r\n    val timeToFirstAttack: Duration,\r\n    val meanTimeBetweenAttacks: Duration\r\n)","package pogolitics.model\r\n\r\ndata class PokemonEntry(\r\n    val pokedexNumber: Int,\r\n    val name: String,\r\n    val forms: List<PokemonForm>\r\n)","package pogolitics.model\r\n\r\nclass PokemonForm private constructor(val code: String?) {\r\n    val prettyName get(): String? = code?.let {\r\n        if (code.startsWith(\"COPY_\")) {\r\n            code.substring(5)\r\n        } else {\r\n            code\r\n        }.lowercase()\r\n            .replaceFirstChar { it.uppercase() }\r\n            .replace(\"_\", \" \")\r\n    }\r\n\r\n    fun isDefault() = code == null\r\n\r\n    override fun equals(other: Any?): Boolean =\r\n        if (other == null || other !is PokemonForm) {\r\n            false\r\n        } else {\r\n            code == other.code\r\n        }\r\n\r\n    override fun hashCode(): Int = code.hashCode()\r\n\r\n    override fun toString(): String = \"Form($code)\"\r\n\r\n    companion object {\r\n        fun ofNullable(code: String?): PokemonForm = code?.let(::PokemonForm) ?: DEFAULT\r\n\r\n        val DEFAULT = PokemonForm(null)\r\n    }\r\n}",null,"package pogolitics.model\r\n\r\n// TODO use IVs class (turn it to wrapper of this and focus)\r\n// TODO it can actually be read-only i think\r\ndata class PokemonIndividualValuesState(\r\n    var level: Float?,\r\n    var attack: Int,\r\n    var defense: Int,\r\n    var stamina: Int,\r\n    var cp: Int?,\r\n    var focus: SinglePokemonModel.InputElement? = null\r\n) {\r\n    constructor(ivs: IVs, level: Float): this(level, ivs.attack, ivs.defense, ivs.stamina, null)\r\n}","package pogolitics.model\r\n\r\ndata class PokemonListModel(\r\n    val pokemon: List<PokemonEntry>\r\n)","package pogolitics.model\r\n\r\nenum class PokemonType() {\r\n    BUG {\r\n        override val strongAgainst get() = setOf(DARK, GRASS, PSYCHIC)\r\n        override val weakAgainst get() = setOf(FIGHTING, FIRE, FLYING, FAIRY, GHOST, POISON, STEEL)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    DARK {\r\n        override val strongAgainst get() = setOf(GHOST, PSYCHIC)\r\n        override val weakAgainst get() = setOf(DARK, FIGHTING, FAIRY)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    DRAGON {\r\n        override val strongAgainst get() = setOf(DRAGON)\r\n        override val weakAgainst get() = setOf(STEEL)\r\n        override val superWeakAgainst get() = setOf(FAIRY)\r\n    },\r\n    ELECTRIC {\r\n        override val strongAgainst get() = setOf(FLYING, WATER)\r\n        override val weakAgainst get() = setOf(DRAGON, ELECTRIC, GRASS)\r\n        override val superWeakAgainst get() = setOf(GROUND)\r\n    },\r\n    FAIRY {\r\n        override val strongAgainst get() = setOf(DARK, DRAGON, FIGHTING)\r\n        override val weakAgainst get() = setOf(FIRE, POISON, STEEL)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    FIGHTING {\r\n        override val strongAgainst get() = setOf(DARK, ICE, NORMAL, ROCK, STEEL)\r\n        override val weakAgainst get() = setOf(BUG, FAIRY, FLYING, POISON, PSYCHIC)\r\n        override val superWeakAgainst get() = setOf(GHOST)\r\n    },\r\n    FIRE {\r\n        override val strongAgainst get() = setOf(BUG, GRASS, ICE, STEEL)\r\n        override val weakAgainst get() = setOf(DRAGON, FIRE, ROCK, WATER)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    FLYING {\r\n        override val strongAgainst get() = setOf(BUG, FIGHTING, GRASS)\r\n        override val weakAgainst get() = setOf(ELECTRIC, ROCK, STEEL)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    GHOST {\r\n        override val strongAgainst get() = setOf(GHOST, PSYCHIC)\r\n        override val weakAgainst get() = setOf(DARK)\r\n        override val superWeakAgainst get() = setOf(NORMAL)\r\n    },\r\n    GRASS {\r\n        override val strongAgainst get() = setOf(GROUND, ROCK, WATER)\r\n        override val weakAgainst get() = setOf(BUG, DRAGON, FIRE, FLYING, GRASS, POISON, STEEL)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    GROUND {\r\n        override val strongAgainst get() = setOf(ELECTRIC, FIRE, POISON, ROCK, STEEL)\r\n        override val weakAgainst get() = setOf(BUG, GRASS)\r\n        override val superWeakAgainst get() = setOf(FLYING)\r\n    },\r\n    ICE {\r\n        override val strongAgainst get() = setOf(DRAGON, FLYING, GRASS, GROUND)\r\n        override val weakAgainst get() = setOf(FIRE, ICE, STEEL, WATER)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    NORMAL {\r\n        override val strongAgainst get() = setOf<PokemonType>()\r\n        override val weakAgainst get() = setOf(ROCK, STEEL)\r\n        override val superWeakAgainst get() = setOf(GHOST)\r\n    },\r\n    POISON {\r\n        override val strongAgainst get() = setOf(GRASS, FAIRY)\r\n        override val weakAgainst get() = setOf(GHOST, GROUND, POISON, ROCK)\r\n        override val superWeakAgainst get() = setOf(STEEL)\r\n    },\r\n    PSYCHIC {\r\n        override val strongAgainst get() = setOf(FIGHTING, POISON)\r\n        override val weakAgainst get() = setOf(PSYCHIC, STEEL)\r\n        override val superWeakAgainst get() = setOf(DARK)\r\n    },\r\n    ROCK {\r\n        override val strongAgainst get() = setOf(BUG, FIRE, FLYING, ICE)\r\n        override val weakAgainst get() = setOf(FIGHTING, GROUND, STEEL)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    STEEL {\r\n        override val strongAgainst get() = setOf(FAIRY, ICE, ROCK)\r\n        override val weakAgainst get() = setOf(ELECTRIC, FIRE, STEEL, WATER)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    },\r\n    WATER {\r\n        override val strongAgainst get() = setOf(FIRE, GROUND, ROCK)\r\n        override val weakAgainst get() = setOf(DRAGON, GRASS, WATER)\r\n        override val superWeakAgainst get() = setOf<PokemonType>()\r\n    };\r\n\r\n    fun against(type: PokemonType): Effectiveness {\r\n        return when {\r\n            strongAgainst.contains(type) -> Effectiveness.STRONG\r\n            weakAgainst.contains(type) -> Effectiveness.WEAK\r\n            superWeakAgainst.contains(type) -> Effectiveness.SUPER_WEAK\r\n            else -> Effectiveness.REGULAR\r\n        }\r\n    }\r\n\r\n    abstract val strongAgainst: Set<PokemonType>\r\n    abstract val weakAgainst: Set<PokemonType>\r\n    abstract val superWeakAgainst: Set<PokemonType>\r\n\r\n    val displayName get() = name.lowercase().replaceFirstChar { it.uppercase() }\r\n\r\n    companion object {\r\n        fun fromString(value: String): PokemonType = valueOf(value.uppercase())\r\n    }\r\n\r\n    enum class Effectiveness {\r\n        STRONG, REGULAR, WEAK, SUPER_WEAK;\r\n    }\r\n}","package pogolitics.model\r\n\r\ndata class SinglePokemonModel(\r\n    val mode: BattleMode,\r\n    val pokemon: PokemonStaticInfo,\r\n    val stats: PokemonIndividualStatistics,\r\n    val moveSets: List<MoveSet>,\r\n    val pokemonIndex: List<PokemonEntry>,\r\n    val focusedElement: InputElement?\r\n) {\r\n    data class PokemonStaticInfo(\r\n        val uniqueId: String,\r\n        val pokedexNumber: Int,\r\n        val form: PokemonForm,\r\n        val name: String,\r\n        val baseAttack: Int,\r\n        val baseDefense: Int,\r\n        val baseStamina: Int,\r\n        val hardiness: Double,\r\n        val types: Types\r\n    ) {\r\n        data class Types(val primary: PokemonType, val secondary: PokemonType?)\r\n    }\r\n\r\n    data class PokemonIndividualStatistics(\r\n        val ivs: IVs,\r\n        val currentStats: VariablePokemonStatistics,\r\n        val bestGreatLeagueStats: VariablePokemonStatistics,\r\n        val bestUltraLeagueStats: VariablePokemonStatistics,\r\n        val bestStatsWithoutBoost: VariablePokemonStatistics\r\n    )\r\n\r\n    data class VariablePokemonStatistics(\r\n        val cp: Int,\r\n        val level: Float,\r\n        val attack : Double,\r\n        val defense : Double,\r\n        val stamina : Double,\r\n        val hardiness: Double\r\n    )\r\n\r\n    enum class InputElement {\r\n        IV,\r\n        ATTACK,\r\n        DEFENSE,\r\n        STAMINA\r\n    }\r\n}","package pogolitics\r\n\r\nimport kotlin.time.Duration\r\nimport kotlin.time.Duration.Companion.seconds\r\n\r\nfun Float.format(decimalPlaces: Int): String = format(this.toString(), decimalPlaces)\r\nfun Double.format(decimalPlaces: Int): String = format(this.toString(), decimalPlaces)\r\n\r\nprivate fun format(numberAsString: String, decimalPlaces: Int): String {\r\n    val parts = numberAsString.split(\".\")\r\n    val part2 = if (parts.size >= 2) \".\" + parts[1] else \"\"\r\n    return parts[0] + part2.subSequence(0, decimalPlaces + 1)\r\n}\r\n\r\nval Int.pvpTurns get(): Duration = (0.5 * this).seconds\r\n","package pogolitics.view\r\n\r\nimport csstype.Display\r\nimport csstype.FontWeight\r\nimport csstype.LineStyle\r\nimport csstype.TextAlign\r\nimport csstype.TextTransform\r\nimport csstype.pct\r\nimport csstype.px\r\nimport emotion.css.ClassName\r\nimport pogolitics.pointer\r\n\r\nobject BasicStylesheet {\r\n\r\n    val widgetWrapper = ClassName {\r\n        display = Display.block\r\n        margin = StyleConstants.Margin.medium\r\n    }\r\n\r\n    val widgetHeader = ClassName {\r\n        paddingTop = StyleConstants.Padding.medium\r\n        paddingLeft = StyleConstants.Padding.medium\r\n        paddingBottom = StyleConstants.Padding.medium\r\n        paddingRight = StyleConstants.Padding.medium\r\n        backgroundColor = StyleConstants.Colors.primary.bg\r\n        color = StyleConstants.Colors.primary.text\r\n        fontWeight = FontWeight.bold\r\n        textAlign = TextAlign.center\r\n        textTransform = TextTransform.capitalize;\r\n    }\r\n\r\n    val clickablePrimary = ClassName {\r\n        cursor = pointer\r\n        hover {\r\n            color = StyleConstants.Colors.primaryHovered.text\r\n            backgroundColor = StyleConstants.Colors.primaryHovered.bg\r\n        }\r\n    }\r\n\r\n    val clickableWidgetHeader = ClassName(widgetHeader, clickablePrimary) {}\r\n\r\n    object Table {\r\n        val table = ClassName {\r\n            display = Display.table\r\n            width = 100.pct\r\n        }\r\n\r\n        val cell = ClassName {\r\n            display = Display.tableCell\r\n            padding = StyleConstants.Padding.medium\r\n            borderColor = StyleConstants.Colors.lightBorder\r\n            borderStyle = LineStyle.solid\r\n            borderBottomWidth = 1.px\r\n            borderLeftWidth = 1.px\r\n            borderTopWidth = 0.px\r\n            borderRightWidth = 0.px\r\n        }\r\n\r\n        val headerCell = ClassName {\r\n\r\n        }\r\n\r\n        val row = ClassName {\r\n            display = Display.tableRow\r\n            padding = StyleConstants.Padding.small\r\n        }\r\n\r\n        val header = ClassName {\r\n            backgroundColor = StyleConstants.Colors.primary.bg\r\n            color = StyleConstants.Colors.primary.text\r\n            fontWeight = FontWeight.bold\r\n        }\r\n\r\n        val first = ClassName {\r\n            borderLeftWidth = 0.px\r\n        }\r\n\r\n        val left = ClassName {\r\n            textAlign = TextAlign.left\r\n        }\r\n\r\n        val sortable = ClassName(clickablePrimary) {}\r\n    }\r\n}",null,"package pogolitics.view.component\r\n\r\nimport csstype.Display\r\nimport csstype.Margin\r\nimport csstype.rem\r\nimport emotion.css.ClassName\r\nimport pogolitics.model.Attack\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.iconPath\r\nimport react.*\r\nimport react.dom.html.ReactHTML.img\r\nimport emotion.react.css\r\nimport react.dom.html.ReactHTML.span\r\n\r\nval Attack = FC<AttackProps> { props ->\r\n    span {\r\n        css(if (props.attack.elite) AttackStyles.eliteAttackWrapper else AttackStyles.regularAttackWrapper) {}\r\n        PokemonTypeIcon {\r\n            type = props.attack.type\r\n            size = PokemonTypeIconProps.Size.SMALL\r\n        }\r\n        + props.attack.name\r\n    }\r\n}\r\n\r\nprivate object AttackStyles {\r\n    val wrapper = ClassName {\r\n        display = Display.inlineBlock\r\n        paddingRight = StyleConstants.Padding.medium\r\n        borderRadius = StyleConstants.Border.Radius.small\r\n    }\r\n\r\n    val regularAttackWrapper = ClassName(wrapper) {  }\r\n    val eliteAttackWrapper = ClassName(wrapper) {\r\n        color = StyleConstants.Colors.secondarySpecial.text\r\n        backgroundColor = StyleConstants.Colors.secondarySpecial.bg\r\n    }\r\n}\r\n\r\nexternal interface AttackProps: Props {\r\n    var attack: Attack\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.Margin\r\nimport csstype.TextAlign\r\nimport csstype.pct\r\nimport csstype.rem\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.format\r\nimport pogolitics.model.SinglePokemonModel\r\nimport pogolitics.view.BasicStylesheet\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.iconPath\r\nimport react.*\r\nimport react.dom.html.ReactHTML\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.h1\r\nimport react.dom.html.ReactHTML.img\r\nimport react.dom.html.ReactHTML.span\r\n\r\nval BasicPokemonInfo = FC<BasicPokemonInfoRProps> { props ->\r\n    div {\r\n        css(BasicStylesheet.widgetWrapper) {}\r\n        h1 {\r\n            css(BasicPokemonInfoStyles.wrapper) {}\r\n            span {\r\n                css(BasicPokemonInfoStyles.pokemonId) {}\r\n                +\"#${props.data.pokedexNumber}\"\r\n            }\r\n            span {\r\n                +props.data.name\r\n            }\r\n            props.data.form.prettyName?.let { prettyName ->\r\n                span {\r\n                    css(BasicPokemonInfoStyles.pokemonForm) {}\r\n                    +\"(${prettyName})\"\r\n                }\r\n            }\r\n        }\r\n        div {\r\n            css(BasicPokemonInfoStyles.typesWrapper) {}\r\n            span {\r\n                css(BasicPokemonInfoStyles.typeIconWrapper) {}\r\n                PokemonTypeIcon {\r\n                    type = props.data.types.primary\r\n                    size = PokemonTypeIconProps.Size.BIG\r\n                }\r\n            }\r\n            props.data.types.secondary?.let { secondary ->\r\n                span {\r\n                    css(BasicPokemonInfoStyles.typeIconWrapper) {}\r\n                    PokemonTypeIcon {\r\n                        type = secondary\r\n                        size = PokemonTypeIconProps.Size.BIG\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        div {\r\n            css(BasicPokemonInfoStyles.staticStatsWrapper) {}\r\n            StaticStat { name = \"Attack\";  value = props.data.baseAttack.toString() }\r\n            StaticStat { name = \"Defense\"; value = props.data.baseDefense.toString() }\r\n            StaticStat { name = \"Stamina\"; value = props.data.baseStamina.toString() }\r\n            StaticStat {\r\n                name = \"Hardiness\"\r\n                value = props.data.hardiness.format(2)\r\n                info = \"(defense⋅stamina)\"\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate object BasicPokemonInfoStyles {\r\n    val wrapper = ClassName {\r\n        textAlign = TextAlign.center\r\n    }\r\n\r\n    val pokemonId = ClassName {\r\n        color = StyleConstants.Colors.secondary.secondaryText\r\n        marginRight = StyleConstants.Margin.small\r\n        fontSize = 80.pct\r\n    }\r\n\r\n    val pokemonForm = ClassName {\r\n        color = StyleConstants.Colors.secondary.secondaryText\r\n        marginLeft = StyleConstants.Margin.small\r\n        fontSize = 80.pct\r\n    }\r\n\r\n    val staticStatsWrapper = ClassName {\r\n        textAlign = TextAlign.center\r\n    }\r\n\r\n    val typesWrapper = ClassName {\r\n        textAlign = TextAlign.center\r\n        margin = StyleConstants.Margin.medium\r\n        marginBottom = StyleConstants.Margin.semiBig\r\n    }\r\n\r\n    val typeIconWrapper = ClassName {\r\n        margin = StyleConstants.Margin.small\r\n    }\r\n}\r\n\r\nexternal interface BasicPokemonInfoRProps : Props {\r\n    var data: SinglePokemonModel.PokemonStaticInfo\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.FontWeight\r\nimport csstype.None\r\nimport csstype.px\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.view.Page\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.pagePath\r\nimport react.FC\r\nimport react.Props\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.span\r\nimport kotlin.text.Typography.nbsp\r\n\r\nval Breadcrumbs = FC { props: BreadcrumbsProps ->\r\n    div {\r\n        css(BreadcrumbsStyles.breadcrumbsWrapper) {}\r\n        props.page?.let { thePage ->\r\n            thePage.getFullPath().forEachIndexed { index, page ->\r\n                if (index > 0) {\r\n                    span {\r\n                        css(BreadcrumbsStyles.separator) {}\r\n                        +\"»\"\r\n                    }\r\n                }\r\n                span {\r\n                    a {\r\n                        href = pagePath(page)\r\n                        +page.prettyName\r\n                    }\r\n                }\r\n            }\r\n        } ?: +\"$nbsp\" // to keep the component the same height if there is nothing in it\r\n    }\r\n}\r\n\r\ninterface BreadcrumbsProps: Props {\r\n    var page: Page?\r\n}\r\n\r\nprivate object BreadcrumbsStyles {\r\n    val breadcrumbsWrapper = ClassName {\r\n        paddingLeft = StyleConstants.Padding.semiBig\r\n        paddingBottom = StyleConstants.Padding.small\r\n        backgroundColor = StyleConstants.Colors.primary.bg\r\n        color = StyleConstants.Colors.primary.secondaryText\r\n        fontSize = StyleConstants.Font.small\r\n        a {\r\n            color = StyleConstants.Colors.primary.secondaryText\r\n            fontWeight = FontWeight.bold\r\n            hover {\r\n                color = StyleConstants.Colors.primaryHovered.secondaryText\r\n                textDecoration = None.none\r\n            }\r\n        }\r\n    }\r\n\r\n    val separator = ClassName {\r\n        marginLeft = StyleConstants.Padding.small\r\n        marginRight = StyleConstants.Padding.small\r\n    }\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.BoxSizing\r\nimport csstype.Display\r\nimport csstype.number\r\nimport csstype.pct\r\nimport csstype.px\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.view.Page\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.logoPath\r\nimport pogolitics.view.pagePath\r\nimport pogolitics.view.pokemonListPagePath\r\nimport react.FC\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.img\r\n\r\nval Header = FC<HeaderProps> { props ->\r\n    div {\r\n        css(HeaderStyles.headerWrapper) {}\r\n        div {\r\n            css(HeaderStyles.logoWrapper) {}\r\n            a {\r\n                href = pagePath(Page.HOME)\r\n                img { src = logoPath() }\r\n            }\r\n        }\r\n        div {\r\n            css(HeaderStyles.searchInputWrapper) {}\r\n            SearchBox {\r\n                pokemonIndex = props.pokemonIndex\r\n                alwaysOnTop = true\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\ninterface HeaderProps: SearchBoxProps\r\n\r\nprivate object HeaderStyles {\r\n    val headerWrapper = ClassName {\r\n        display = Display.flex\r\n        boxSizing = BoxSizing.contentBox\r\n        height = 50.px\r\n        paddingTop = StyleConstants.Padding.semiBig\r\n        paddingBottom = StyleConstants.Padding.small\r\n        paddingLeft = StyleConstants.Padding.semiBig\r\n        paddingRight = StyleConstants.Padding.medium\r\n        backgroundColor = StyleConstants.Colors.primary.bg\r\n    }\r\n\r\n    val logoWrapper = ClassName {\r\n        flex = number(1.0)\r\n    }\r\n\r\n    val searchInputWrapper = ClassName {\r\n        margin = StyleConstants.Padding.medium\r\n        paddingRight = StyleConstants.Padding.medium\r\n        paddingLeft = StyleConstants.Padding.big\r\n    }\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.*\r\nimport dom.html.HTMLDivElement\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.pointer\r\nimport react.*\r\nimport react.dom.events.MouseEvent\r\nimport react.dom.events.MouseEventHandler\r\nimport react.dom.html.InputType\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.input\r\nimport kotlin.math.round\r\n\r\nval IVBar = FC<IVBarComponentRProps> { props ->\r\n    val styles = IVBarStyles(1.px)\r\n\r\n    val MAX_IV = 15\r\n\r\n    // TODO later, check the thing with always redrawing when onClickFunction (or other) is defined inline\r\n\r\n    val doOnClick: MouseEventHandler<HTMLDivElement> = { mouseEvent: MouseEvent<HTMLDivElement, *> ->\r\n        val target: HTMLDivElement = mouseEvent.target as HTMLDivElement\r\n        val x: Double = mouseEvent.clientX - target.getBoundingClientRect().left\r\n        val barWidth: Double = target.getBoundingClientRect().width\r\n        val ratio = x / barWidth\r\n        val value = 0.5 + ratio * (MAX_IV - 0.5)\r\n        props.onChange(round(value).toInt())\r\n    }\r\n\r\n    div {\r\n        css(styles.componentWrapper) {}\r\n        div {\r\n            css(styles.labelsWrapper) {}\r\n            div {\r\n                css(\r\n                    styles.label,\r\n                    if (props.iv == MAX_IV) {\r\n                        styles.labelIvMax\r\n                    } else styles.none\r\n                ) {}\r\n                +props.name\r\n            }\r\n            div {\r\n                css(styles.inputWrapper) {}\r\n                input {\r\n                    css(styles.input) {}\r\n                    autoFocus = props.autoFocus\r\n                    type = InputType.number\r\n                    min = \"0\"\r\n                    max = \"15\"\r\n                    pattern = \"\\\\d*\"\r\n                    key = \"${props.iv}\"\r\n                    defaultValue = \"${props.iv}\"\r\n                    onChange = {\r\n                        props.onChange(it.target.value.toInt())\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        div {\r\n            css(styles.wrapper) {}\r\n            div {\r\n                css(styles.bar, styles.bg) {\r\n                    width = styles.barWidth(MAX_IV)\r\n                }\r\n                onClick = doOnClick\r\n            }\r\n            div {\r\n                css(\r\n                    styles.bar,\r\n                    styles.content,\r\n                    when (props.iv) {\r\n                        0 ->  styles.iv0\r\n                        MAX_IV -> styles.ivMax\r\n                        else -> styles.none\r\n                    }\r\n                ) {\r\n                    width = styles.barWidth(props.iv)\r\n                }\r\n            }\r\n            div {\r\n                css(styles.scale) {}\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\nexternal interface IVBarComponentRProps: Props {\r\n    var name: String\r\n    var iv: Int\r\n    var autoFocus: Boolean\r\n    var onChange: (Int) -> Unit\r\n}\r\n\r\nclass IVBarStyles(val unit: Length) {\r\n    private val regularColor = Color(\"#f0911d\")\r\n    private val strongColor = Color(\"#e18077\")\r\n    private val gray = Color(\"#e2e2e2\")\r\n\r\n    private val Number.u: Length get() = \"calc($unit * $this)\".unsafeCast<Length>()\r\n\r\n    fun barWidth(width: Int): Length {\r\n        return (20 * (width - 1)).u\r\n    }\r\n\r\n    val componentWrapper = ClassName {\r\n        width = 320.u\r\n        paddingLeft = 6.u\r\n        paddingRight = 6.u\r\n        paddingTop = 10.u\r\n        paddingBottom = 10.u\r\n    }\r\n\r\n    val labelsWrapper = ClassName {\r\n        display = Display.flex\r\n        flexDirection = FlexDirection.row\r\n    }\r\n\r\n    val label = ClassName {\r\n        display = Display.flex\r\n        flexDirection = FlexDirection.columnReverse\r\n        paddingLeft = 5.u\r\n        fontWeight = integer(600)\r\n        color = regularColor\r\n    }\r\n\r\n    val inputWrapper = ClassName {\r\n        flexGrow = number(1.0)\r\n        paddingBottom = 3.u\r\n        paddingRight = 10.u\r\n        textAlign = TextAlign.right\r\n    }\r\n\r\n    val input = ClassName {\r\n        textAlign = TextAlign.right\r\n        maxHeight = 20.u\r\n        fontSize = 80.pct\r\n    }\r\n\r\n    val wrapper = ClassName {\r\n        marginBottom = 20.u\r\n        backgroundColor = NamedColor.white\r\n    }\r\n\r\n    val bar = ClassName {\r\n        height = 20.u\r\n        backgroundColor = regularColor\r\n        marginLeft = 10.u\r\n        marginRight = 10.u\r\n        cursor = pointer\r\n        before {\r\n            content = Content(\"\")\r\n            marginLeft = (-8).u\r\n            position = Position.absolute\r\n            float = Float.left\r\n            height = 20.u\r\n            width = 10.u\r\n            backgroundColor = regularColor\r\n            borderTopLeftRadius = 10.u\r\n            borderBottomLeftRadius = 10.u\r\n            transform = scale(0.8, 1.0)\r\n        }\r\n        after {\r\n            content = Content(\"\")\r\n            marginRight = (-8).u\r\n            float = Float.right\r\n            height = 20.u\r\n            width = 10.u\r\n            backgroundColor = regularColor\r\n            borderTopRightRadius = 10.u\r\n            borderBottomRightRadius = 10.u\r\n            transform = scale(0.8, 1.0)\r\n        }\r\n    }\r\n\r\n    val bg = ClassName {\r\n        backgroundColor = gray\r\n        marginBottom = (-20).u\r\n        before {\r\n            backgroundColor = gray\r\n        }\r\n        after {\r\n            backgroundColor = gray\r\n        }\r\n    }\r\n\r\n    val content = ClassName {\r\n        position = Position.absolute\r\n        pointerEvents = None.none\r\n    }\r\n\r\n    val scale = ClassName {\r\n        marginTop = (-20).u\r\n        paddingBottom = (-20).u\r\n        width = 150.u\r\n        before {\r\n            position = Position.absolute\r\n            content = Content(\"\")\r\n            marginLeft = 100.u\r\n            width = 4.u\r\n            height = 20.u\r\n            backgroundColor = NamedColor.white\r\n            display = Display.block\r\n        }\r\n        after {\r\n            position = Position.absolute\r\n            content = Content(\"\")\r\n            marginLeft = 200.u\r\n            width = 4.u\r\n            height = 20.u\r\n            backgroundColor = NamedColor.white\r\n            display = Display.block\r\n        }\r\n    }\r\n\r\n    val iv0 = ClassName {\r\n        before {\r\n            display = None.none\r\n        }\r\n        after {\r\n            display = None.none\r\n        }\r\n    }\r\n\r\n    val ivMax = ClassName {\r\n        backgroundColor = strongColor\r\n        before {\r\n            backgroundColor = strongColor\r\n        }\r\n        after {\r\n            backgroundColor = strongColor\r\n        }\r\n    }\r\n\r\n    val labelIvMax = ClassName {\r\n        color = strongColor\r\n    }\r\n\r\n    val none = ClassName { }\r\n\r\n}\r\n\r\n","package pogolitics.view.component\r\n\r\nimport csstype.*\r\nimport dom.html.HTMLInputElement\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.KeyCodes\r\nimport pogolitics.model.IVs\r\nimport pogolitics.model.PokemonIndividualValuesState\r\nimport pogolitics.model.SinglePokemonModel\r\nimport pogolitics.model.SinglePokemonModel.InputElement\r\nimport pogolitics.view.BasicStylesheet\r\nimport pogolitics.view.StyleConstants\r\nimport react.*\r\nimport react.dom.events.KeyboardEvent\r\nimport react.dom.events.SyntheticEvent\r\nimport react.dom.html.InputType\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.input\r\nimport react.dom.html.ReactHTML.span\r\n\r\nval IVStatsWidget = FC<IVStatsWidgetRProps> { props ->\r\n    div {\r\n        css(\r\n            BasicStylesheet.widgetWrapper,\r\n            IVStatsWidgetStyles.outerWrapper\r\n        ) {}\r\n        div {\r\n            css(IVStatsWidgetStyles.innerWrapper) {}\r\n            div {\r\n                css(IVStatsWidgetStyles.upperStatsWrapper) {}\r\n                span {\r\n                    span {\r\n                        +\"level: \"\r\n                    }\r\n                    span {\r\n                        input {\r\n                            type = InputType.number\r\n                            min = \"1\"\r\n                            max = \"51\"\r\n                            step = 0.5\r\n                            pattern = \"\\\\d*\"\r\n                            key = \"${props.stats.level}\"\r\n                            defaultValue = \"${props.stats.level}\"\r\n                            autoFocus = props.focus == InputElement.IV\r\n                            val onChangeFunction = { event: SyntheticEvent<*, *> ->\r\n                                props.onChange(props.createStateWith {\r\n                                    focus = InputElement.IV\r\n                                    level = (event.target as HTMLInputElement).value.toFloat()\r\n                                })\r\n                            }\r\n                            onChange = onChangeFunction\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            IVBar {\r\n                name = \"Attack\"\r\n                iv = props.ivs.attack\r\n                autoFocus = props.focus == InputElement.ATTACK\r\n                onChange = { value ->\r\n                    props.onChange(props.createStateWith { focus = InputElement.ATTACK; attack = value })\r\n                }\r\n            }\r\n            IVBar {\r\n                name = \"Defense\"\r\n                iv = props.ivs.defense\r\n                autoFocus = props.focus == InputElement.DEFENSE\r\n                onChange = { value ->\r\n                    props.onChange(props.createStateWith { focus = InputElement.DEFENSE; defense = value })\r\n                }\r\n            }\r\n            IVBar {\r\n                name = \"HP\"\r\n                iv = props.ivs.stamina\r\n                autoFocus = props.focus == InputElement.STAMINA\r\n                onChange = { value ->\r\n                    props.onChange(props.createStateWith { focus = InputElement.STAMINA; stamina = value })\r\n                }\r\n            }\r\n            div {\r\n                css(IVStatsWidgetStyles.lowerStatsWrapper) {}\r\n                span {\r\n                    span {\r\n                        +\"CP: \"\r\n                    }\r\n                    input {\r\n                        css {\r\n                            \"&::-webkit-outer-spin-button\" {\r\n                                appearance = None.none\r\n                                margin = 0.px\r\n                            }\r\n                            \"&::-webkit-inner-spin-button\" {\r\n                                appearance = None.none\r\n                                margin = 0.px\r\n                            }\r\n                            appearance = Appearance.textfield\r\n                        }\r\n                        type = InputType.number\r\n                        min = \"10\"\r\n                        max = \"5000\"\r\n                        key = \"${props.stats.cp}\"\r\n                        defaultValue = \"${props.stats.cp}\"\r\n                        val onChangeFunction = { event: SyntheticEvent<*, *> ->\r\n                            val value = (event.target as HTMLInputElement).value\r\n                            props.onChange(props.createStateWith {\r\n                                level = null\r\n                                cp = value.toInt()\r\n                            })\r\n                        }\r\n                        onBlur = onChangeFunction\r\n                        onKeyUp = { event: KeyboardEvent<*> ->\r\n                            if (event.key == KeyCodes.enter) {\r\n                                onChangeFunction(event)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun IVStatsWidgetRProps.createStateWith(modifier: PokemonIndividualValuesState.() -> Unit): PokemonIndividualValuesState {\r\n    return PokemonIndividualValuesState(\r\n        level = stats.level,\r\n        attack = ivs.attack,\r\n        defense = ivs.defense,\r\n        stamina = ivs.stamina,\r\n        cp = null\r\n    ).also(modifier)\r\n}\r\n\r\nprivate object IVStatsWidgetStyles {\r\n    val outerWrapper = ClassName {\r\n        display = Display.flex\r\n        flexDirection = FlexDirection.column\r\n        alignItems = AlignItems.center\r\n        paddingBottom = StyleConstants.Padding.big\r\n    }\r\n\r\n    val innerWrapper = ClassName {\r\n        display = Display.flex\r\n        flexDirection = FlexDirection.column\r\n        alignItems = AlignItems.center\r\n        border = StyleConstants.Border.thickBorder\r\n        borderRadius = StyleConstants.Border.Radius.big\r\n        padding = StyleConstants.Padding.semiBig\r\n    }\r\n\r\n    val upperStatsWrapper = ClassName {\r\n        marginTop = 10.px\r\n        marginBottom = 15.px\r\n    }\r\n\r\n    val lowerStatsWrapper = ClassName {\r\n        marginTop = 15.px\r\n        marginBottom = 5.px\r\n    }\r\n}\r\n\r\nexternal interface IVStatsWidgetRProps : Props {\r\n    var stats: SinglePokemonModel.VariablePokemonStatistics\r\n    var ivs: IVs\r\n    var onChange: (PokemonIndividualValuesState) -> Unit\r\n    var focus: InputElement?\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.Display\r\nimport csstype.FlexDirection\r\nimport csstype.FlexWrap\r\nimport csstype.FontWeight\r\nimport csstype.JustifyContent\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.format\r\nimport pogolitics.model.SinglePokemonModel\r\nimport pogolitics.pointer\r\nimport pogolitics.view.BasicStylesheet\r\nimport pogolitics.view.StyleConstants\r\nimport react.*\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.span\r\n\r\nval LeagueStatsWidget = FC<LeagueStatsWidgetRProps> { props ->\r\n    div {\r\n        css(BasicStylesheet.widgetWrapper) {}\r\n        div {\r\n            css(BasicStylesheet.clickableWidgetHeader) {}\r\n            onClick = { props.onClick() }\r\n            + (props.name + \" league\")\r\n        }\r\n        div {\r\n            css(LeagueStatsWidgetStyles.contentWrapper) {}\r\n            stat(\"CP\", \"${props.stats.cp}\")\r\n            stat(\"level\", \"${props.stats.level}\")\r\n            stat(\"hardiness\", props.stats.hardiness.format(2))\r\n            stat(\"atk\", props.stats.attack.format(2))\r\n            stat(\"def\", props.stats.defense.format(2))\r\n            stat(\"sta\", props.stats.stamina.format(2))\r\n        }\r\n    }\r\n}\r\n\r\nexternal interface LeagueStatsWidgetRProps: Props {\r\n    var name: String;\r\n    var stats: SinglePokemonModel.VariablePokemonStatistics;\r\n    var onClick: () -> Unit\r\n}\r\n\r\nprivate fun ChildrenBuilder.stat(label: String, value: String) {\r\n    span {\r\n        css(LeagueStatsWidgetStyles.group) {}\r\n        span {\r\n            css(LeagueStatsWidgetStyles.label) {}\r\n            +\"$label: \"\r\n        }\r\n        span {\r\n            css(LeagueStatsWidgetStyles.value) {}\r\n            +value\r\n        }\r\n    }\r\n}\r\n\r\nprivate object LeagueStatsWidgetStyles {\r\n    val cell = ClassName {\r\n        padding = StyleConstants.Padding.small\r\n        display = Display.tableCell\r\n    }\r\n\r\n    val label = ClassName(cell) {\r\n        fontWeight = FontWeight.bold\r\n    }\r\n\r\n    val value = ClassName(cell) {}\r\n\r\n    val group = ClassName {\r\n        marginLeft = StyleConstants.Margin.big\r\n    }\r\n\r\n    val contentWrapper = ClassName {\r\n        display = Display.flex\r\n        flexWrap = FlexWrap.wrap\r\n        flexDirection = FlexDirection.row\r\n        justifyContent = JustifyContent.center\r\n    }\r\n\r\n}\r\n\r\n","package pogolitics.view.component\r\n\r\nimport csstype.ClassName\r\nimport csstype.Content\r\nimport csstype.Display\r\nimport csstype.FontFamily\r\nimport csstype.None\r\nimport csstype.TextAlign\r\nimport csstype.deg\r\nimport csstype.important\r\nimport csstype.pct\r\nimport csstype.px\r\nimport csstype.rotate\r\nimport csstype.scale\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.arial\r\nimport pogolitics.pointer\r\nimport pogolitics.view.StyleConstants\r\nimport react.FC\r\nimport react.Props\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.span\r\n\r\nval NavigationArrow = FC<ArrowProps> { props ->\r\n    a {\r\n        href = props.href\r\n        css(props.direction.style) {}\r\n        span {}\r\n    }\r\n}\r\n\r\ninterface ArrowProps: Props {\r\n    var direction: NavigationDirection\r\n    var href: String\r\n}\r\n\r\nenum class NavigationDirection(val style: ClassName) {\r\n    PREVIOUS(NavigationArrowStyles.arrowPrevious), NEXT(NavigationArrowStyles.arrowNext);\r\n}\r\n\r\nprivate object NavigationArrowStyles {\r\n    private val triangleUp = Char(9662).toString()\r\n\r\n    private val arrow = ClassName {\r\n        display = Display.inlineBlock\r\n        cursor = pointer\r\n        width = 42.px\r\n        height = 42.px\r\n        fontFamily = arial\r\n        fontSize = 48.px\r\n        textAlign = TextAlign.center\r\n        borderRadius = 50.pct\r\n        marginLeft = StyleConstants.Margin.small\r\n        marginRight = StyleConstants.Margin.small\r\n        color = important(StyleConstants.Colors.primary.text)\r\n        backgroundColor = StyleConstants.Colors.primary.bg\r\n        hover {\r\n            backgroundColor = StyleConstants.Colors.primaryHovered.bg\r\n            color = StyleConstants.Colors.primary.text\r\n            textDecoration = None.none\r\n        }\r\n    }\r\n\r\n    val arrowPrevious = ClassName(arrow) {\r\n        span {\r\n            marginLeft = (-4).px\r\n            marginTop = (-15).px\r\n            display = Display.block\r\n            transform = rotate(90.deg)\r\n            after {\r\n                content = Content(triangleUp)\r\n            }\r\n        }\r\n    }\r\n\r\n    val arrowNext = ClassName(arrow) {\r\n        span {\r\n            marginLeft = 4.px\r\n            marginTop = (-15).px\r\n            display = Display.block\r\n            transform = rotate((-90).deg)\r\n            after {\r\n                content = Content(triangleUp)\r\n            }\r\n        }\r\n    }\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.Length\r\nimport csstype.Margin\r\nimport csstype.rem\r\nimport emotion.react.css\r\nimport pogolitics.model.PokemonType\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.iconPath\r\nimport react.FC\r\nimport react.Props\r\nimport react.dom.html.ReactHTML\r\n\r\nval PokemonTypeIcon = FC<PokemonTypeIconProps> { props ->\r\n    ReactHTML.img {\r\n        src = iconPath(props.type)\r\n        css {\r\n            height = props.size.dimensions\r\n            margin = Margin(StyleConstants.Margin.small, StyleConstants.Margin.small)\r\n        }\r\n    }\r\n}\r\n\r\ninterface PokemonTypeIconProps: Props {\r\n    var type: PokemonType\r\n    var size: Size\r\n\r\n    enum class Size(val dimensions: Length) {\r\n        SMALL(1.5.rem),\r\n        BIG(2.5.rem)\r\n    }\r\n}","package pogolitics.view.component\r\n\r\nimport csstype.Border\r\nimport csstype.BoxSizing\r\nimport csstype.Display\r\nimport csstype.FlexDirection\r\nimport csstype.JustifyContent\r\nimport csstype.LineStyle\r\nimport csstype.None\r\nimport csstype.Padding\r\nimport csstype.Position\r\nimport csstype.TextAlign\r\nimport csstype.div\r\nimport csstype.integer\r\nimport csstype.pct\r\nimport csstype.unaryMinus\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.KeyCodes\r\nimport pogolitics.model.PokemonEntry\r\nimport pogolitics.model.PokemonForm\r\nimport pogolitics.view.StyleConstants\r\nimport pogolitics.view.pokemonPagePath\r\nimport react.FC\r\nimport react.Props\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.input\r\nimport react.dom.html.ReactHTML.span\r\nimport react.useState\r\nimport web.location.location\r\n\r\nval SearchBox = FC<SearchBoxProps> { props ->\r\n    val styles = SearchBoxStyles\r\n    val searchResultLimit = 6\r\n    var term: String by useState(\"\")\r\n    var selected: Int by useState(0)\r\n    var hideSearchResults: Boolean by useState(true)\r\n    val filtered = props.getFilteredData(term).take(searchResultLimit)\r\n\r\n    div {\r\n        css(styles.wrapper) {}\r\n        div {\r\n            css(styles.inputWrapper) {}\r\n            input {\r\n                css(styles.input) {}\r\n                value = term\r\n                placeholder = \"Search for pokemon...\"\r\n                onChange = { event ->\r\n                    term = event.target.value\r\n                }\r\n                onKeyUp = { event ->\r\n                    when (event.code) {\r\n                        KeyCodes.enter, KeyCodes.numpadEnter -> {\r\n                            val pokemon = filtered[selected]\r\n                            val url = pokemonPagePath(pokemon.pokedexNumber, pokemon.form)\r\n                            location.href = url\r\n                        }\r\n                        KeyCodes.arrowUp -> selected = (selected - 1).mod(filtered.size)\r\n                        KeyCodes.arrowDown -> selected = (selected + 1).mod(filtered.size)\r\n                        else -> println(event.code) //selected = 0\r\n                    }\r\n                }\r\n                onFocus = { hideSearchResults = false }\r\n                onBlur = { event ->\r\n                    if (event.relatedTarget == null ) {\r\n                        hideSearchResults = true\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        div {\r\n            onMouseDown = { it.stopPropagation() }\r\n            css(styles.searchResultsWrapper) {\r\n                display = if (filtered.isEmpty() || hideSearchResults) None.none else Display.block\r\n                zIndex = if (props.alwaysOnTop) integer(10) else integer(2)\r\n            }\r\n            div {\r\n                css(styles.searchResultsWrapperInner) {}\r\n                filtered.forEachIndexed { index, (pokedexNumber, name, form) ->\r\n                    a {\r\n                        css(if (index == selected) styles.selectedEntryWrapper else styles.entryWrapper) {}\r\n                        href = pokemonPagePath(pokedexNumber, form)\r\n                        span {\r\n                            css(styles.pokemonId) {}\r\n                            +\"#${pokedexNumber} \"\r\n                        }\r\n                        span {\r\n                            css(styles.pokemonName) {}\r\n                            +name\r\n                        }\r\n                        span {\r\n                            css(styles.pokemonForm) {}\r\n                            if (form != PokemonForm.DEFAULT) {\r\n                                +\"(${form.prettyName})\"\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                div {\r\n                    css(styles.searchResultsFooter) {}\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate fun List<PokemonEntry>.toFormEntries(): List<PokemonFormEntry> =\r\n    flatMap { entry ->\r\n        entry.forms.map { form ->\r\n            PokemonFormEntry(entry.pokedexNumber, entry.name, form)\r\n        }\r\n    }\r\n\r\ninterface SearchBoxProps: Props {\r\n    var pokemonIndex: List<PokemonEntry>\r\n    var alwaysOnTop: Boolean\r\n}\r\n\r\nfun SearchBoxProps.getFilteredData(term: String): List<PokemonFormEntry> {\r\n    val searchTerms: List<String> = term.split(\"\\\\s\")\r\n    return if (term.isBlank()) {\r\n        emptyList()\r\n    } else {\r\n        pokemonIndex\r\n            .toFormEntries()\r\n            .mapNotNull { entry -> entry.matches(searchTerms)?.let { Pair(it, entry) } }\r\n            .sortedByDescending { (match, entry) -> calculateOrder(match, entry) }\r\n            .map { (_, entry) -> entry }\r\n    }\r\n}\r\n\r\nprivate object Order {\r\n    val highest = 100\r\n    val high = 99\r\n    val lowest = 0\r\n}\r\nprivate fun calculateOrder(match: MatchedField, entry: PokemonFormEntry): Int =\r\n    when (match) {\r\n        MatchedField.NAME -> if (entry.form.isDefault()) Order.highest else Order.lowest\r\n        MatchedField.POKEDEX_NUMBER -> Order.highest\r\n        MatchedField.FORM -> Order.high\r\n    }\r\n\r\nenum class MatchedField {\r\n    NAME,\r\n    POKEDEX_NUMBER,\r\n    FORM\r\n}\r\n\r\ndata class PokemonFormEntry(val pokedexNumber: Int, val name: String, val form: PokemonForm) {\r\n    fun matches(searchTerms: List<String>): MatchedField? {\r\n        return searchTerms.firstNotNullOfOrNull { term ->\r\n            if (name.contains(term, ignoreCase = true)) {\r\n                MatchedField.NAME\r\n            } else if (pokedexNumber.toString().contains(term)) {\r\n                MatchedField.POKEDEX_NUMBER\r\n            } else if (form.code?.contains(term, ignoreCase = true) == true) {\r\n                MatchedField.FORM\r\n            } else {\r\n                null\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nprivate object SearchBoxStyles {\r\n    val wrapper = ClassName {}\r\n\r\n    val inputWrapper = ClassName {\r\n        textAlign = TextAlign.right\r\n    }\r\n\r\n    val searchResultsWrapper = ClassName {\r\n        display = Display.flex\r\n        justifyContent = JustifyContent.flexEnd\r\n        flexDirection = FlexDirection.column\r\n        position = Position.relative\r\n        width = 100.pct\r\n    }\r\n\r\n    val searchResultsWrapperInner = ClassName {\r\n        backgroundColor = StyleConstants.Colors.secondary.bg\r\n        width = 100.pct\r\n        borderLeft = Border(StyleConstants.Border.thick, LineStyle.solid, StyleConstants.Colors.primary.bg)\r\n        borderRight = Border(StyleConstants.Border.thick, LineStyle.solid, StyleConstants.Colors.primary.bg)\r\n        borderBottom = Border(StyleConstants.Border.thick, LineStyle.solid, StyleConstants.Colors.primary.bg)\r\n        borderBottomLeftRadius = StyleConstants.Border.Radius.medium\r\n        borderBottomRightRadius = StyleConstants.Border.Radius.medium\r\n        boxSizing = BoxSizing.contentBox\r\n        marginLeft = -StyleConstants.Border.thick\r\n    }\r\n\r\n    val entryWrapper = ClassName {\r\n        display = Display.block\r\n        padding = Padding(StyleConstants.Padding.medium, StyleConstants.Padding.big)\r\n        color = backgroundColor\r\n        hover {\r\n            backgroundColor = StyleConstants.Colors.secondarySpecial.bg\r\n            textDecoration = None.none\r\n        }\r\n    }\r\n\r\n    val selectedEntryWrapper = ClassName(entryWrapper) {\r\n        backgroundColor = StyleConstants.Colors.secondarySpecial.bg\r\n        textDecoration = None.none\r\n    }\r\n\r\n    val pokemonId = ClassName {\r\n        color = StyleConstants.Colors.secondary.secondaryText\r\n        marginRight = StyleConstants.Margin.small\r\n        fontSize = StyleConstants.Font.small\r\n    }\r\n\r\n    val pokemonName = ClassName {\r\n        color = StyleConstants.Colors.secondary.text\r\n    }\r\n\r\n    val pokemonForm = ClassName {\r\n        color = StyleConstants.Colors.secondary.secondaryText\r\n        marginLeft = StyleConstants.Margin.small\r\n        fontSize = 80.pct\r\n    }\r\n\r\n    val searchResultsFooter = ClassName {\r\n        height = StyleConstants.Border.Radius.medium / 2// so that the content does not interlap with border radius\r\n    }\r\n\r\n    val input = ClassName {\r\n        width = 100.pct\r\n        // border = 0.px // after inputs have been globally made to have soft border it actually looks nice with it\r\n        padding = StyleConstants.Padding.small\r\n        focus {\r\n            outline = None.none\r\n        }\r\n    }\r\n}",null,null,"package pogolitics.view.component\r\n\r\nimport csstype.Display\r\nimport csstype.TextAlign\r\nimport csstype.px\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.view.BasicStylesheet\r\nimport react.*\r\nimport react.dom.html.ReactHTML.div\r\n\r\nval StaticStat = FC<StaticStatComponentRProps>() { props ->\r\n    div {\r\n        css(StaticStatStyles.wrapper) {}\r\n        div {\r\n            css(BasicStylesheet.Table.table) {}\r\n            div {\r\n                css(BasicStylesheet.Table.row, BasicStylesheet.Table.header) {}\r\n                div {\r\n                    css(\r\n                        BasicStylesheet.Table.cell,\r\n                        BasicStylesheet.Table.headerCell,\r\n                        BasicStylesheet.Table.first\r\n                    ) {}\r\n                    title = props.info\r\n                    +props.name\r\n                }\r\n            }\r\n            div {\r\n                css(BasicStylesheet.Table.row) {}\r\n                div {\r\n                    css(\r\n                        BasicStylesheet.Table.cell,\r\n                        BasicStylesheet.Table.headerCell,\r\n                        BasicStylesheet.Table.first\r\n                    ) {}\r\n                    +props.value\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexternal interface StaticStatComponentRProps: Props {\r\n    var name: String\r\n    var value: String\r\n    var info: String\r\n}\r\n\r\nprivate object StaticStatStyles {\r\n    val wrapper = ClassName {\r\n        display = Display.inlineBlock\r\n        textAlign = TextAlign.center\r\n        marginRight = 1.px\r\n    }\r\n}","package pogolitics.view\r\n\r\nimport pogolitics.applicationRoot\r\nimport pogolitics.model.BattleMode\r\nimport pogolitics.model.PokemonForm\r\nimport pogolitics.model.PokemonType\r\n\r\nfun iconPath(type: PokemonType): String =\r\n    path(\"/img/icon/${type.displayName}.png\")\r\n\r\nfun logoPath(): String =\r\n    path(\"/img/logo/120x50.png\")\r\n\r\nfun loadingImagePath(): String =\r\n    path(\"/img/misc/loading.gif\")\r\n\r\nfun pokemonPagePath(pokedexNumber: Int, form: PokemonForm? = null, mode: BattleMode = BattleMode.default): String =\r\n    pagePath(Page.POKEMON(pokedexNumber, form, mode))\r\n\r\nfun pokemonListPagePath(): String = pagePath(Page.POKEMON_LIST)\r\n\r\nfun pagePath(page: Page): String =\r\n    path(\r\n        baseUrl = \"/\" + page.getFullPath().joinToString(\"/\") { it.pathSegment },\r\n        params = page.urlParams\r\n    )\r\n\r\nsealed class Page(\r\n    val parent: Page?,\r\n    val prettyName: String,\r\n    val pathSegment: String,\r\n    val urlParams: Map<String, String?> = mapOf()\r\n) {\r\n    object HOME: Page(null, \"Home\", \"#\")\r\n    object POKEMON_LIST: Page(HOME, \"Pokemon\", \"pokemon\")\r\n    class POKEMON(pokedexNumber: Int, pokemonForm: PokemonForm?, mode: BattleMode, prettyName: String? = null):\r\n        Page(\r\n            parent = POKEMON_LIST,\r\n            prettyName = prettyName ?: \"$pokedexNumber\",\r\n            pathSegment = \"$pokedexNumber\",\r\n            urlParams = mapOf(\"form\" to pokemonForm?.code, \"mode\" to mode.toString())\r\n        )\r\n\r\n    fun getFullPath(): List<Page> {\r\n        fun rawPagePath(page: Page?): List<Page> =\r\n            if (page == null) {\r\n                listOf()\r\n            } else {\r\n                rawPagePath(page.parent) + page\r\n            }\r\n        return rawPagePath(this)\r\n    }\r\n}\r\n\r\nprivate fun path(baseUrl: String, params: Map<String, String?> = mapOf()): String =\r\n    applicationRoot + baseUrl +\r\n        if (params.isEmpty()) {\r\n            \"\"\r\n        } else {\r\n            \"?\" + params.entries\r\n                .filter { it.value != null }\r\n                .joinToString(\"&\") { \"${it.key}=${it.value}\" }\r\n        }",null,"package pogolitics.view\r\n\r\nimport csstype.Auto\r\nimport csstype.FontWeight\r\nimport csstype.Padding\r\nimport csstype.TextAlign\r\nimport csstype.px\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.PageRProps\r\nimport pogolitics.model.HomePageModel\r\nimport pogolitics.view.component.SearchBox\r\nimport react.Component\r\nimport react.State\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.h2\r\nimport react.dom.html.ReactHTML.h3\r\nimport react.dom.html.ReactHTML.p\r\nimport react.dom.html.ReactHTML.strong\r\n\r\nclass HomePage(props: PageRProps<HomePageModel, Unit>) : Component<PageRProps<HomePageModel, Unit>, State>(props) {\r\n    override fun render() = renderPage(Page.HOME, props.model.pokemonIndex) {\r\n        div {\r\n            css(Styles.outerWrapper) { }\r\n            div {\r\n                css(Styles.searchBoxWrapper) {}\r\n                div {\r\n                    css(Styles.searchBoxWrapperInner) {}\r\n                    SearchBox {\r\n                        pokemonIndex = props.model.pokemonIndex\r\n                    }\r\n                }\r\n            }\r\n            div {\r\n                css(Styles.textWrapper) {}\r\n                h2 { +\"Welcome to Poke-Go-Dex!\" }\r\n                p {+\"\"\"\r\n                    The idea of this project is to create one place that contains all data about pokemon, \r\n                    attacks, etc in Pokemon Go and serve it in a processed form that is useful straight away. \r\n                \"\"\" }\r\n                p { +\"\"\"\r\n                    The main functionality right now is calculating DPS and other stats of each attack set of a given pokémon,\r\n                    so that you can figure out which one is the best. There already other apps that do it, but all of them\r\n                    work only for PvE. This page does it for both PvE and PvP (and that's the reason I started to work on it at all).\r\n                \"\"\" }\r\n                p {\r\n                    strong { +\"To try it out just use the search box above and find the pokémon you want, \" }\r\n                    +\"or go to the \"\r\n                    a { +\"the pokemon index page\"; href = pokemonListPagePath() }\r\n                    +\".\"\r\n                }\r\n                p {\r\n                    +\"If you have more questions check \"\r\n                    a { +\"the FAQ page \"; href = \"https://github.com/rybick/pogolitics/blob/master/docs/FAQ.md\" }\r\n                    +\"on github!\"\r\n                }\r\n                p {\r\n                    +\"All code of Poke-Go-Dex is open source, so feel free to \"\r\n                    a { +\"look through it \"; href = \"https://github.com/rybick/pogolitics\" }\r\n                    +\"or even \"\r\n                    a { +\"contribute your own\"; href = \"https://github.com/rybick/pogolitics/blob/master/docs/FAQ.md\" }\r\n                    +\".\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    object Styles {\r\n        val outerWrapper = ClassName(BasicStylesheet.widgetWrapper) {\r\n\r\n        }\r\n\r\n        val textWrapper = ClassName {\r\n            maxWidth = 800.px\r\n            margin = Auto.auto\r\n            border = StyleConstants.Border.thickBorder\r\n            borderRadius = StyleConstants.Border.Radius.big\r\n            padding = StyleConstants.Padding.huge\r\n            h2 {\r\n                marginBottom = StyleConstants.Margin.big\r\n                textAlign = TextAlign.center\r\n            }\r\n            h3 {\r\n                fontSize = StyleConstants.Font.h3\r\n                paddingTop = StyleConstants.Padding.big\r\n            }\r\n            a {\r\n                fontWeight = FontWeight.bold\r\n            }\r\n        }\r\n\r\n        val searchBoxWrapper = ClassName {\r\n            maxWidth = 600.px\r\n            margin = Auto.auto\r\n        }\r\n\r\n        val searchBoxWrapperInner = ClassName {\r\n            border = StyleConstants.Border.thickBorder\r\n            borderRadius = StyleConstants.Border.Radius.small\r\n            margin = StyleConstants.Margin.huge\r\n            height = 46.px\r\n        }\r\n\r\n    }\r\n}","package pogolitics.view\r\n\r\nimport csstype.Border\r\nimport csstype.BorderStyle\r\nimport csstype.LineStyle\r\nimport csstype.None\r\nimport csstype.px\r\nimport emotion.react.css\r\nimport pogolitics.model.PokemonEntry\r\nimport pogolitics.view.component.Breadcrumbs\r\nimport pogolitics.view.component.Header\r\nimport react.ChildrenBuilder\r\nimport react.Fragment\r\nimport react.ReactNode\r\nimport react.create\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.input\r\n\r\nfun renderPage(\r\n    page: Page?,\r\n    pokemonIndex: List<PokemonEntry>?,\r\n    contentRenderer: ChildrenBuilder.() -> Unit\r\n): ReactNode = Fragment.create {\r\n    // TODO I think Global should be used here, but I don't know how to use it\r\n    div {\r\n        css {\r\n            a {\r\n                color = StyleConstants.Colors.secondaryLink.text\r\n                hover {\r\n                    color = StyleConstants.Colors.secondaryLinkHovered.text\r\n                    textDecoration = None.none\r\n                }\r\n            }\r\n            input {\r\n                border = Border(1.px, LineStyle.solid, StyleConstants.Colors.lightBorder)\r\n            }\r\n            \".btn-primary\" {\r\n                backgroundColor = StyleConstants.Colors.primary.bg\r\n                borderColor = StyleConstants.Colors.primary.bg\r\n            }\r\n            \".btn-primary:hover\" {\r\n                backgroundColor = StyleConstants.Colors.primaryHovered.bg\r\n                borderColor = StyleConstants.Colors.primaryHovered.bg\r\n            }\r\n            \".btn-primary:not(.disabled):not(:disabled):active\" {\r\n                backgroundColor = StyleConstants.Colors.primaryHovered.bg\r\n                borderColor = StyleConstants.Colors.primaryHovered.bg\r\n            }\r\n        }\r\n        if (pokemonIndex != null) {\r\n            Header {\r\n                this.pokemonIndex = pokemonIndex\r\n            }\r\n        }\r\n        Breadcrumbs { this.page = page }\r\n        contentRenderer()\r\n    }\r\n}","package pogolitics.view\r\n\r\nimport emotion.react.css\r\nimport js.core.jso\r\nimport pogolitics.model.MoveSet\r\nimport pogolitics.format\r\nimport pogolitics.view.BasicStylesheet.Table\r\nimport pogolitics.view.component.Attack\r\nimport react.*\r\nimport react.dom.html.ReactHTML.div\r\nimport kotlin.text.Typography.nbsp\r\nimport kotlin.time.DurationUnit\r\n\r\nclass MovesetsTable(props: MovesetsRProps) : Component<MovesetsRProps, MovesetsRState>(props) {\r\n\r\n    init {\r\n        state = jso {\r\n            sort = null\r\n        }\r\n    }\r\n\r\n    private val UP_ICON = Char(9652) //\"&#9652;\"\r\n    private val DOWN_ICON = Char(9662) //\"&#9662;\"\r\n    private val SPACE = nbsp //\"&nbsp;\"\r\n\r\n    override fun render() = Fragment.create {\r\n        div {\r\n            css(BasicStylesheet.widgetWrapper) {}\r\n            div {\r\n                css(Table.table) {}\r\n                div {\r\n                    css(Table.row, Table.header) {}\r\n                    div {\r\n                        css(Table.cell, Table.headerCell, Table.first) {}\r\n                        +\"Moveset\"\r\n                    }\r\n                    div {\r\n                        css(Table.cell, Table.headerCell, Table.sortable) {}\r\n                        onClick = {\r\n                            setState({ state ->\r\n                                val sort = state.sort\r\n                                state.sort = Sort(\r\n                                        columnId = 1,\r\n                                        ascending = if (sort?.columnId == 1) !sort.ascending else false\r\n                                )\r\n                                state\r\n                            })\r\n                        }\r\n                        +(\"DPS\" + getIcon(state.sort, 1))\r\n                        title = \"Damage per second\"\r\n                    }\r\n                    div {\r\n                        css(Table.cell, Table.headerCell, Table.sortable) {}\r\n                        onClick = {\r\n                            setState({ state ->\r\n                                val sort = state.sort\r\n                                state.sort = Sort(\r\n                                        columnId = 2,\r\n                                        ascending = if (sort?.columnId == 2) !sort.ascending else false\r\n                                )\r\n                                state\r\n                            })\r\n                        }\r\n                        +(\"TTFA\" + getIcon(state.sort, 2))\r\n                        title = \"Time to first (charged) attack\"\r\n                    }\r\n                    div {\r\n                        css(Table.cell, Table.headerCell, Table.sortable) {}\r\n                        onClick = {\r\n                            setState({ state ->\r\n                                val sort = state.sort\r\n                                state.sort = Sort(\r\n                                    columnId = 3,\r\n                                    ascending = if (sort?.columnId == 3) !sort.ascending else false\r\n                                )\r\n                                state\r\n                            })\r\n                        }\r\n                        +(\"MTBA\" + getIcon(state.sort, 3))\r\n                        title = \"Mean time between (charged) attacks\"\r\n                    }\r\n                }\r\n                sortValues(props.values, state.sort).forEach {\r\n                    div {\r\n                        css(Table.row) {}\r\n                        div {\r\n                            css(Table.cell, Table.first, Table.left) {}\r\n                            Attack { attack = it.quickAttack }\r\n                            +\" + \"\r\n                            Attack { attack = it.chargedAttack }\r\n                        }\r\n                        div {\r\n                            css(Table.cell) {}\r\n                            +it.dps.format(2)\r\n                        }\r\n                        div {\r\n                            css(Table.cell) {}\r\n                            +(it.timeToFirstAttack.toDouble(DurationUnit.SECONDS).format(2) + \"s\")\r\n                        }\r\n                        div {\r\n                            css(Table.cell) {}\r\n                            +(it.meanTimeBetweenAttacks.toDouble(DurationUnit.SECONDS).format(2) + \"s\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // TODO later make it prettier and more generic\r\n    private fun sortValues(values: List<MoveSet>, sort: Sort?): List<MoveSet> {\r\n        return when(sort?.columnId) {\r\n            1 -> values.sortedBy { -it.dps * sort.ascendFactor }\r\n            2 -> values.sortedBy { -it.timeToFirstAttack * sort.ascendFactor }\r\n            else -> values\r\n        }\r\n    }\r\n\r\n    private fun getIcon(sort: Sort?, columnId: Int): Any? {\r\n        if (sort != null && sort.columnId == columnId) {\r\n            return if (sort.ascending) DOWN_ICON else UP_ICON\r\n        } else {\r\n            return SPACE\r\n        }\r\n    }\r\n}\r\n\r\nfun ChildrenBuilder.moveSetsTable(handler: MovesetsRProps.() -> Unit): Unit =\r\n    MovesetsTable::class.react(handler)\r\n\r\nexternal interface MovesetsRProps: Props {\r\n    var values: List<MoveSet>\r\n}\r\n\r\nexternal interface MovesetsRState: State {\r\n    var sort: Sort?\r\n}\r\n\r\ndata class Sort(val columnId: Int, val ascending: Boolean) {\r\n    val ascendFactor get() = if (ascending) 1 else -1\r\n}\r\n\r\n\r\n\r\n","package pogolitics.view\r\n\r\nimport csstype.TextAlign\r\nimport csstype.pct\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.PageRProps\r\nimport pogolitics.model.PokemonEntry\r\nimport react.Component\r\nimport react.ReactNode\r\nimport react.State\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.p\r\n\r\nclass NotFoundPage(props: PageRProps<NotFoundModel, Unit>) : Component<PageRProps<NotFoundModel, Unit>, State>(props) {\r\n\r\n    override fun render(): ReactNode = renderPage(null, props.model.pokemonIndex) {\r\n        div {\r\n            css(Styles.pageWrapper) {}\r\n            div {\r\n                css(BasicStylesheet.widgetHeader) {}\r\n                + (\"Page Not Found\")\r\n            }\r\n            div {\r\n                css(Styles.contentWrapper) {}\r\n                p { +props.model.reason }\r\n            }\r\n        }\r\n    }\r\n\r\n    private object Styles {\r\n        val pageWrapper = ClassName {\r\n            padding = 10.pct\r\n        }\r\n\r\n        val contentWrapper = ClassName {\r\n            paddingTop = StyleConstants.Padding.big\r\n            paddingBottom = StyleConstants.Padding.big\r\n            textAlign = TextAlign.center\r\n        }\r\n    }\r\n}\r\n\r\ndata class NotFoundModel(val reason: String, val pokemonIndex: List<PokemonEntry>?)","package pogolitics.view\r\n\r\nimport csstype.*\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport pogolitics.PageRProps\r\nimport pogolitics.model.PokemonForm\r\nimport pogolitics.model.PokemonListModel\r\nimport react.ChildrenBuilder\r\nimport react.Component\r\nimport react.State\r\nimport react.dom.html.ReactHTML.a\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.span\r\n\r\nclass PokemonListPage(props: PageRProps<PokemonListModel, Unit>) :\r\n    Component<PageRProps<PokemonListModel, Unit>, State>(props) {\r\n\r\n    override fun render() = renderPage(Page.POKEMON_LIST, props.model.pokemon) {\r\n        div {\r\n            css(BasicStylesheet.widgetWrapper) {}\r\n            div {\r\n                css(BasicStylesheet.Table.table) {}\r\n                div {\r\n                    css(\r\n                        BasicStylesheet.Table.row,\r\n                        BasicStylesheet.Table.header\r\n                    ) {}\r\n                    div {\r\n                        css(\r\n                            BasicStylesheet.Table.cell,\r\n                            BasicStylesheet.Table.headerCell,\r\n                            BasicStylesheet.Table.first\r\n                        ) {}\r\n                        +\"№\"\r\n                    }\r\n                    div {\r\n                        css(\r\n                            BasicStylesheet.Table.cell,\r\n                            BasicStylesheet.Table.headerCell\r\n                        ) {}\r\n                        +\"name\"\r\n                    }\r\n                    div {\r\n                        css(\r\n                            BasicStylesheet.Table.cell,\r\n                            BasicStylesheet.Table.headerCell\r\n                        ) {}\r\n                        +\"forms\"\r\n                    }\r\n                }\r\n                props.model.pokemon.forEach { pokemon ->\r\n                    div {\r\n                        css(BasicStylesheet.Table.row) {}\r\n                        div {\r\n                            css(\r\n                                BasicStylesheet.Table.cell,\r\n                                BasicStylesheet.Table.first,\r\n                                BasicStylesheet.Table.left\r\n                            ) {}\r\n                            +\"#${pokemon.pokedexNumber}\"\r\n                        }\r\n                        div {\r\n                            css(\r\n                                BasicStylesheet.Table.cell,\r\n                                Styles.pokemonName\r\n                            ) {}\r\n                            a {\r\n                                href = pokemonPagePath(pokemon.pokedexNumber)\r\n                                +pokemon.name\r\n                            }\r\n                        }\r\n                        div {\r\n                            css(BasicStylesheet.Table.cell) {}\r\n                            pokemon.forms.forEach {\r\n                                formWidget(pokemon.pokedexNumber, it)\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun ChildrenBuilder.formWidget(pokedexNumber: Int, form: PokemonForm) {\r\n        span {\r\n            css(Styles.form) {}\r\n            a {\r\n                href = pokemonPagePath(pokedexNumber, form)\r\n                +form.prettyNameOrDefault\r\n            }\r\n        }\r\n    }\r\n\r\n    private val PokemonForm?.prettyNameOrDefault get() = this?.prettyName ?: \"Default\"\r\n\r\n    private object Styles {\r\n        val form = ClassName  {\r\n            margin = StyleConstants.Margin.small\r\n            fontWeight = FontWeight.bold\r\n            fontSize = StyleConstants.Font.smaller\r\n            display = Display.inlineBlock\r\n            a {\r\n                backgroundColor = StyleConstants.Colors.primary.bg\r\n                color = StyleConstants.Colors.primary.text\r\n                display = Display.inlineBlock\r\n                borderRadius = 6.px\r\n                padding = StyleConstants.Margin.small\r\n                hover {\r\n                    backgroundColor = StyleConstants.Colors.primaryHovered.bg\r\n                    color = StyleConstants.Colors.primaryHovered.text\r\n                    textDecoration = None.none\r\n                }\r\n            }\r\n        }\r\n\r\n        val pokemonName = ClassName {\r\n            a {\r\n                fontWeight = FontWeight.bold\r\n            }\r\n        }\r\n    }\r\n}","package pogolitics.view\r\n\r\nimport csstype.Display\r\nimport csstype.Float\r\nimport csstype.TextAlign\r\nimport csstype.number\r\nimport csstype.pct\r\nimport emotion.css.ClassName\r\nimport emotion.react.css\r\nimport kotlinx.browser.window\r\nimport pogolitics.PageRProps\r\nimport pogolitics.model.BattleMode\r\nimport pogolitics.model.PokemonIndividualValuesState\r\nimport pogolitics.model.SinglePokemonModel\r\nimport pogolitics.view.component.*\r\nimport react.Component\r\nimport react.State\r\nimport react.SwitchSelector\r\nimport react.dom.html.ReactHTML.div\r\nimport react.dom.html.ReactHTML.span\r\n\r\nclass SinglePokemonPage(props: PageRProps<SinglePokemonModel, PokemonIndividualValuesState>) :\r\n    Component<PageRProps<SinglePokemonModel, PokemonIndividualValuesState>, State>(props) {\r\n\r\n    override fun render() = renderPage(pokemonPage(props.model), props.model.pokemonIndex) {\r\n        div {\r\n            css(Styles.headerWrapper) {}\r\n            NavigationArrow {\r\n               href = pokemonPagePath(props.model.pokemon.pokedexNumber - 1, mode = props.model.mode)\r\n               direction = NavigationDirection.PREVIOUS\r\n            }\r\n            span {\r\n                css(Styles.spacer) {}\r\n                SwitchSelector {\r\n                    checked = BattleMode.PVP == props.model.mode\r\n                    onlabel = \"PvP\"\r\n                    offlabel = \"PvE\"\r\n                    onChange = { checked ->\r\n                        // set timeout to let the animation end.\r\n                        // It would be better to use state instead but this was easier, so I guess TODO one day.\r\n                        window.setTimeout({\r\n                            window.location.href = pokemonPagePath(\r\n                                pokedexNumber = props.model.pokemon.pokedexNumber,\r\n                                form = props.model.pokemon.form,\r\n                                mode = if (checked) BattleMode.PVP else BattleMode.PVE\r\n                            )\r\n                        }, timeout = 300)\r\n                    }\r\n                }\r\n            }\r\n            NavigationArrow {\r\n                href = pokemonPagePath(props.model.pokemon.pokedexNumber + 1, mode = props.model.mode)\r\n                direction = NavigationDirection.NEXT\r\n            }\r\n        }\r\n        div {\r\n            css(Styles.leftWrapper) {}\r\n            BasicPokemonInfo {\r\n                data = props.model.pokemon\r\n            }\r\n        }\r\n        div {\r\n            css(Styles.rightWrapper) {}\r\n            IVStatsWidget {\r\n                stats = props.model.stats.currentStats\r\n                ivs = props.model.stats.ivs\r\n                focus = props.model.focusedElement\r\n                onChange = {\r\n                    props.updateState(it)\r\n                }\r\n            }\r\n            if (props.model.mode == BattleMode.PVP) {\r\n                LeagueStatsWidget {\r\n                    name = \"great\"\r\n                    stats = props.model.stats.bestGreatLeagueStats\r\n                    onClick = {\r\n                        val newState = PokemonIndividualValuesState(\r\n                            props.model.stats.ivs,\r\n                            props.model.stats.bestGreatLeagueStats.level\r\n                        )\r\n                        props.updateState(newState)\r\n                    }\r\n                }\r\n                LeagueStatsWidget {\r\n                    name = \"ultra\"\r\n                    stats = props.model.stats.bestUltraLeagueStats\r\n                    onClick = {\r\n                        val newState = PokemonIndividualValuesState(\r\n                            props.model.stats.ivs,\r\n                            props.model.stats.bestUltraLeagueStats.level\r\n                        )\r\n                        props.updateState(newState)\r\n                    }\r\n                }\r\n                LeagueStatsWidget {\r\n                    name = \"master\"\r\n                    stats = props.model.stats.bestStatsWithoutBoost\r\n                    onClick = {\r\n                        val newState = PokemonIndividualValuesState(\r\n                            props.model.stats.ivs,\r\n                            props.model.stats.bestStatsWithoutBoost.level\r\n                        )\r\n                        props.updateState(newState)\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        div {\r\n            css(Styles.leftWrapper) {}\r\n            moveSetsTable {\r\n                values = props.model.moveSets\r\n            }\r\n        }\r\n        div {\r\n            css(Styles.rightWrapper) {}\r\n            /* space for widgets that will always be last */\r\n        }\r\n    }\r\n    private fun pokemonPage(model: SinglePokemonModel): Page =\r\n        Page.POKEMON(\r\n            pokedexNumber = model.pokemon.pokedexNumber,\r\n            pokemonForm = model.pokemon.form,\r\n            prettyName = model.pokemon.name,\r\n            mode = model.mode\r\n        )\r\n\r\n    private object Styles {\r\n        const val smallScreenMediaQuery = \"screen and (max-width: 700px)\"\r\n\r\n        val headerWrapper = ClassName {\r\n            paddingTop = StyleConstants.Padding.big\r\n            paddingLeft = StyleConstants.Padding.medium\r\n            paddingRight = StyleConstants.Padding.medium\r\n            paddingBottom = StyleConstants.Padding.medium\r\n            display = Display.flex\r\n            fontSize = 160.pct\r\n        }\r\n\r\n        val spacer = ClassName {\r\n            flexGrow = number(1.0)\r\n            textAlign = TextAlign.center\r\n        }\r\n\r\n        val leftWrapper = ClassName {\r\n            width = 50.pct\r\n            float = Float.left\r\n            \"@media $smallScreenMediaQuery\" {\r\n                width = 100.pct\r\n            }\r\n        }\r\n\r\n        val rightWrapper = ClassName {\r\n            width = 50.pct\r\n            float = Float.right\r\n            \"@media $smallScreenMediaQuery\" {\r\n                width = 100.pct\r\n                float = Float.left\r\n            }\r\n        }\r\n    }\r\n}\r\n","package pogolitics.view\r\n\r\nimport csstype.Border\r\nimport csstype.Color\r\nimport csstype.LineStyle\r\nimport csstype.pct\r\nimport csstype.px\r\n\r\n\r\nobject StyleConstants {\r\n    object Colors {\r\n        private val primaryAccent = \"#f0911d\" //\"#0079fb\"\r\n        private val hoveredPrimary = \"#e18077\" // \"#5099ff\"\r\n        private val lightPrimary = \"#fee8dc\" // in between textPrimary and primaryAccent\r\n\r\n        private val white = \"#ffffff\"\r\n        private val black = \"#000000\"\r\n\r\n        private val textPrimary = white\r\n        private val textPrimarySoft = lightPrimary\r\n\r\n        private val none = white // not expected to be used\r\n\r\n        val primary = ColorGroup(bg = primaryAccent, text = textPrimary, secondaryText = textPrimarySoft)\r\n        val primaryHovered = ColorGroup(bg = hoveredPrimary, text = textPrimary, secondaryText = textPrimary)\r\n        val secondary = ColorGroup(bg = white, text = black, secondaryText = \"#aaaaaa\")\r\n        val secondarySpecial = ColorGroup(bg = \"#ededed\", text = \"#000000\", secondaryText = \"#999999\")\r\n        val secondaryLink = ColorGroup(bg = white, text = primaryAccent, secondaryText = none)\r\n        val secondaryLinkHovered = ColorGroup(bg = white, text = hoveredPrimary, secondaryText = none)\r\n        val lightBorder = Color(lightPrimary) //Color(\"rgba(130, 60, 0, 0.25)\")\r\n    }\r\n\r\n    object Padding {\r\n        val small = 5.px\r\n        val medium = 10.px\r\n        val semiBig = 15.px\r\n        val big = 20.px\r\n        val huge = 40.px\r\n    }\r\n\r\n    object Margin {\r\n        val small = 5.px\r\n        val medium = 10.px\r\n        val semiBig = 15.px\r\n        val big = 20.px\r\n        val huge = 40.px\r\n    }\r\n\r\n    object Border {\r\n        val thick = 5.px\r\n        object Radius {\r\n            val small = 5.px\r\n            val medium = 10.px\r\n            val big = 20.px\r\n        }\r\n\r\n        val thickBorder = Border(thick, LineStyle.solid, Colors.primary.bg)\r\n    }\r\n\r\n    object Font {\r\n        val bigger = 110.pct\r\n        val smaller = 90.pct\r\n        val small = 80.pct\r\n        val h3 = 120.pct\r\n    }\r\n\r\n    class ColorGroup(val bg: Color, val text: Color, val secondaryText: Color) {\r\n        constructor(bg: String, text: String, secondaryText: String):\r\n            this(Color(bg), Color(text), Color(secondaryText))\r\n    }\r\n}","package pogolitics.controller\r\n\r\nval ABSOLUTE_MAX_LEVEL = 41.0F\r\nval BASIC_MAX_LEVEL = 40.0F\r\nval MAX_GREAT_CP = 1500\r\nval MAX_ULTRA_CP = 2500","package pogolitics\r\n\r\nimport csstype.Cursor\r\nimport csstype.FontFamily\r\n\r\n// This is a workaround as using Cursor.pointer currently throws a js compilation error,\r\n// as the generated code includes { ..., default: default, ...}, while `deafult` is a JS keyword\r\n// remove this and just use Cursor.pointer when they fix it.\r\nval pointer = \"pointer\".unsafeCast<Cursor>()\r\n\r\nval arial = \"Arial\".unsafeCast<FontFamily>()","package pogolitics\r\n\r\nconst val applicationRoot = \"\" // \"/pogolitics\"\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(159);\n"],"names":["root","factory","exports","module","define","amd","this","StyleSheet","options","_this","_insertTag","tag","before","tags","length","insertionPoint","nextSibling","prepend","container","firstChild","insertBefore","push","isSpeedy","undefined","speedy","ctr","nonce","key","_proto","prototype","hydrate","nodes","forEach","insert","rule","document","createElement","setAttribute","appendChild","createTextNode","createStyleElement","sheet","i","styleSheets","ownerNode","sheetForTag","insertRule","cssRules","e","flush","parentNode","removeChild","abs","Math","String","fromCharCode","Object","assign","trim","value","pattern","replacement","replace","indexof","search","indexOf","index","charCodeAt","begin","end","slice","array","line","column","position","character","characters","node","parent","type","props","children","return","prev","next","peek","caret","token","alloc","dealloc","delimit","delimiter","whitespace","escaping","count","commenter","identifier","COMMENT","callback","output","stringify","element","join","compile","parse","rules","rulesets","pseudo","points","declarations","offset","atrule","property","previous","variable","scanning","ampersand","reference","comment","declaration","ruleset","post","size","j","k","x","y","z","identifierWithPointTracking","fixedElements","WeakMap","compat","isImplicitRule","get","set","parsed","toRules","getRules","parentRules","removeLabel","hash","defaultStylisPlugins","map","exec","ssrStyles","querySelectorAll","Array","call","getAttribute","head","_insert","stylisPlugins","inserted","nodesToHydrate","attrib","split","currentSheet","collection","finalizingPlugins","serializer","concat","selector","serialized","shouldCache","styles","cache","name","registered","insertWithoutScoping","merge","css","className","registeredStyles","rawClassName","classnames","args","cls","arg","toAdd","isArray","_createEmotion","_len","arguments","_key","cx","_len4","_key4","injectGlobal","_len3","_key3","keyframes","_len2","_key2","animation","ids","getRegisteredStyles","bind","fn","create","str","h","len","toString","animationIterationCount","borderImageOutset","borderImageSlice","borderImageWidth","boxFlex","boxFlexGroup","boxOrdinalGroup","columnCount","columns","flex","flexGrow","flexPositive","flexShrink","flexNegative","flexOrder","gridRow","gridRowEnd","gridRowSpan","gridRowStart","gridColumn","gridColumnEnd","gridColumnSpan","gridColumnStart","msGridRow","msGridRowSpan","msGridColumn","msGridColumnSpan","fontWeight","lineHeight","opacity","order","orphans","tabSize","widows","zIndex","zoom","WebkitLineClamp","fillOpacity","floodOpacity","stopOpacity","strokeDasharray","strokeDashoffset","strokeMiterlimit","strokeOpacity","strokeWidth","hyphenateRegex","animationRegex","isCustomProperty","isProcessableValue","processStyleName","styleName","toLowerCase","processStyleValue","match","p1","p2","cursor","handleInterpolation","mergedProps","interpolation","__emotion_styles","anim","obj","string","interpolated","_i","createStringFromObject","previousCursor","result","cached","labelPattern","serializeStyles","stringMode","strings","raw","lastIndex","identifierName","target","source","hasOwnProperty","apply","reactPropsRegex","prop","test","useInsertionEffect","EmotionCacheContext","useLayoutEffect","createContext","HTMLElement","Provider","withEmotionCache","func","forwardRef","ref","useContext","ThemeContext","testOmitPropsOnStringTag","testOmitPropsOnComponent","getDefaultShouldForwardProp","composeShouldForwardProps","isReal","shouldForwardProp","optionsShouldForwardProp","__emotion_forwardProp","propName","_ref","isStringTag","newStyled","createStyled","targetClassName","__emotion_real","baseTag","__emotion_base","label","defaultShouldForwardProp","shouldUseAs","Styled","FinalTag","as","classInterpolations","theme","finalShouldForwardProp","newProps","Fragment","displayName","defaultProps","defineProperty","withComponent","nextTag","nextOptions","tagName","classNames","registerStyles","insertStyles","current","Action","PopStateEventType","createMemoryHistory","entries","initialEntries","initialIndex","v5Compat","entry","createMemoryLocation","state","clampIndex","action","Pop","listener","n","min","max","getCurrentLocation","to","location","createLocation","pathname","warning","charAt","JSON","createHref","createPath","encodeLocation","path","parsePath","Push","nextLocation","splice","Replace","go","delta","listen","createBrowserHistory","getUrlBasedHistory","window","globalHistory","usr","createHashHistory","substr","base","querySelector","href","url","hashIndex","invariant","message","Error","cond","console","warn","getHistoryState","random","parsedPath","searchIndex","createClientSideURL","origin","URL","getLocation","validateLocation","defaultView","history","handlePop","addEventListener","removeEventListener","historyState","pushState","error","replaceState","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","route","treePath","id","has","add","isIndexRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","every","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","flattenRoute","relativePath","caseSensitive","startsWith","joinPaths","computeScore","includes","exploded","explodeOptionalSegments","segments","first","rest","isOptional","endsWith","required","restExploded","subpath","paramRe","isSplat","s","initialScore","some","filter","reduce","segment","branch","matchedParams","matchedPathname","remainingPathname","matchPath","params","pathnameBase","normalizePathname","generatePath","originalPath","_","prefix","__","matcher","paramNames","regexpSource","paramName","RegExp","compilePath","captureGroups","memo","splatValue","decodeURIComponent","safelyDecodeURIComponent","decodeURI","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","json","data","init","responseInit","status","headers","Headers","Response","AbortedDeferredError","DeferredData","constructor","reject","pendingKeys","subscriber","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","aborted","delete","done","subscribe","cancel","abort","v","resolve","unwrappedData","unwrapTrackedPromise","_tracked","isTrackedPromise","_error","_data","defer","redirect","ErrorResponse","statusText","internal","isRouteErrorResponse","validMutationMethodsArr","validMutationMethods","validRequestMethodsArr","validRequestMethods","redirectStatusCodes","redirectPreserveMethodStatusCodes","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","hydrationData","initialMatches","initialErrors","getInternalRouterError","getShortCircuitMatches","router","pendingNavigationController","initialized","m","loader","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","updateState","newState","completeNavigation","isActionReload","isMutationMethod","_isRedirect","keys","mergeLoaderData","getSavedScrollPosition","async","startNavigation","opts","startUninterruptedRevalidation","userMatches","createUseMatchesMatch","saveScrollPosition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","pendingActionData","pendingError","request","createClientSideRequest","submission","findNearestBoundary","actionOutput","interruptActiveLoads","actionMatch","getTargetMatch","callLoaderOrAction","shortCircuited","method","routeId","isRedirectResult","startRedirectNavigation","isErrorResult","boundaryMatch","pendingActionError","isDeferredResult","handleAction","Request","activeSubmission","matchesToLoad","revalidatingFetchers","getMatchesToLoad","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","processLoaderData","deferredData","doneKeys","markFetchersDone","markFetchRedirectsDone","abortStaleFetchLoads","handleLoaders","getFetcher","isFetchActionRedirect","revalidate","redirectLocation","_isFetchActionRedirect","newOrigin","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","abortFetcher","setFetcherError","deleteFetcher","doneFetcher","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","normalizeNavigateOptions","userReplace","fetch","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","didAbortFetchLoads","handleFetcherAction","resolveDeferredData","handleFetcherLoader","dispose","clear","_internalFetchControllers","_internalActiveDeferreds","isFetcher","isSubmissionNavigation","stripHashFromPath","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","values","navigationMatches","boundaryId","boundaryMatches","findIndex","getLoaderMatchesUntilBoundary","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","shouldRevalidateLoader","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","routeChoice","isStaticRequest","isRouteRequest","requestContext","resultType","onReject","handler","context","body","resolvedLocation","response","contentType","text","statusCode","deferred","toUpperCase","URLSearchParams","foundError","loaderHeaders","processRouteLoaderData","newLoaderData","mergedLoaderData","reverse","find","hasErrorBoundary","errorMessage","isRevalidatingLoader","unwrap","resolveData","getAll","handle","pathMatches","t","o","l","c","d","enumerable","Symbol","toStringTag","__esModule","default","p","f","iterator","setPrototypeOf","getPrototypeOf","__proto__","ReferenceError","u","configurable","writable","TypeError","checked","off","on","disabled","setState","onChange","width","height","onstyle","offstyle","style","onClick","toggle","onlabel","offlabel","Component","hmr","transform","insertInto","locals","btoa","unescape","encodeURIComponent","sources","sourceRoot","atob","HTMLIFrameElement","contentDocument","refs","parts","media","sourceMap","insertAt","g","attrs","nc","w","singleton","S","createObjectURL","revokeObjectURL","Blob","rel","E","T","DEBUG","O","Boolean","styleSheet","cssText","childNodes","convertToAbsoluteUrls","protocol","host","for","q","A","B","C","D","isMounted","enqueueForceUpdate","enqueueReplaceState","enqueueSetState","F","updater","G","H","isReactComponent","forceUpdate","I","isPureReactComponent","J","K","L","__self","__source","M","$$typeof","_owner","P","Q","R","keyPrefix","U","V","escape","W","aa","X","N","Y","Z","ba","ReactCurrentDispatcher","ReactCurrentBatchConfig","suspense","ReactCurrentOwner","IsSomeRendererActing","Children","toArray","only","Profiler","PureComponent","StrictMode","Suspense","__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED","cloneElement","_calculateChangedBits","_currentValue","_currentValue2","_threadCount","Consumer","_context","createFactory","createRef","render","isValidElement","lazy","_ctor","_status","_result","compare","useCallback","useDebugValue","useEffect","useImperativeHandle","useMemo","useReducer","useRef","useState","version","getOwnPropertySymbols","propIsEnumerable","propertyIsEnumerable","toObject","val","test1","getOwnPropertyNames","test2","test3","letter","err","shouldUseNative","symbols","ca","da","ea","fa","ha","ia","ja","ka","la","ma","acceptsBooleans","attributeName","attributeNamespace","mustUseProperty","propertyName","sanitizeURL","removeEmptyString","ra","sa","ta","pa","isNaN","qa","oa","removeAttribute","setAttributeNS","xlinkHref","ua","va","wa","ya","za","Aa","Ba","Ca","Da","Ea","Fa","Ga","Ha","Ia","Ja","Ka","La","Ma","stack","Na","Oa","prepareStackTrace","Reflect","construct","Pa","Qa","_payload","_init","Ra","Sa","Ta","nodeName","Va","_valueTracker","getOwnPropertyDescriptor","getValue","setValue","stopTracking","Ua","Wa","Xa","activeElement","Ya","defaultChecked","defaultValue","_wrapperState","initialChecked","Za","initialValue","controlled","ab","bb","cb","db","ownerDocument","eb","fb","selected","defaultSelected","gb","dangerouslySetInnerHTML","hb","ib","jb","textContent","kb","lb","mb","nb","namespaceURI","innerHTML","valueOf","MSApp","execUnsafeLocalFunction","ob","lastChild","nodeType","nodeValue","pb","aspectRatio","gridArea","lineClamp","qb","rb","sb","setProperty","substring","tb","menuitem","area","br","col","embed","hr","img","input","keygen","link","param","track","wbr","ub","vb","is","wb","xb","srcElement","correspondingUseElement","yb","zb","Ab","Bb","Cb","stateNode","Db","Eb","Fb","Gb","Hb","Ib","Jb","Kb","Lb","Mb","Nb","onError","Ob","Pb","Qb","Rb","Sb","Tb","Vb","alternate","flags","Wb","memoizedState","dehydrated","Xb","Zb","child","sibling","Yb","$b","ac","unstable_scheduleCallback","bc","unstable_cancelCallback","cc","unstable_shouldYield","dc","unstable_requestPaint","unstable_now","ec","unstable_getCurrentPriorityLevel","fc","unstable_ImmediatePriority","gc","unstable_UserBlockingPriority","hc","unstable_NormalPriority","ic","unstable_LowPriority","jc","unstable_IdlePriority","kc","lc","oc","clz32","pc","qc","log","LN2","rc","sc","tc","uc","pendingLanes","suspendedLanes","pingedLanes","entangledLanes","entanglements","vc","xc","yc","zc","Ac","eventTimes","Cc","Dc","Ec","Fc","Gc","Hc","Ic","Jc","Kc","Lc","Mc","Nc","Oc","Pc","Qc","Rc","Sc","pointerId","Tc","nativeEvent","blockedOn","domEventName","eventSystemFlags","targetContainers","Vc","Wc","priority","isDehydrated","containerInfo","Xc","Yc","dispatchEvent","Zc","$c","ad","bd","cd","dd","ed","transition","fd","gd","hd","Uc","stopPropagation","jd","kd","ld","md","nd","od","keyCode","charCode","pd","qd","rd","_reactName","_targetInst","currentTarget","isDefaultPrevented","defaultPrevented","returnValue","isPropagationStopped","preventDefault","cancelBubble","persist","isPersistent","wd","xd","yd","sd","eventPhase","bubbles","cancelable","timeStamp","Date","now","isTrusted","td","ud","view","detail","vd","Ad","screenX","screenY","clientX","clientY","pageX","pageY","ctrlKey","shiftKey","altKey","metaKey","getModifierState","zd","button","buttons","relatedTarget","fromElement","toElement","movementX","movementY","Bd","Dd","dataTransfer","Fd","Hd","animationName","elapsedTime","pseudoElement","Id","clipboardData","Jd","Ld","Md","Esc","Spacebar","Left","Up","Right","Down","Del","Win","Menu","Apps","Scroll","MozPrintableKey","Nd","Od","Alt","Control","Meta","Shift","Pd","Qd","code","repeat","locale","which","Rd","Td","pressure","tangentialPressure","tiltX","tiltY","twist","pointerType","isPrimary","Vd","touches","targetTouches","changedTouches","Xd","Yd","deltaX","wheelDeltaX","deltaY","wheelDeltaY","wheelDelta","deltaZ","deltaMode","Zd","$d","ae","be","documentMode","ce","de","ee","fe","ge","he","ie","le","color","date","datetime","email","month","number","password","range","tel","time","week","me","ne","oe","event","listeners","pe","qe","re","se","te","ue","ve","we","xe","ye","ze","oninput","Ae","detachEvent","Be","Ce","attachEvent","De","Ee","Fe","He","Ie","Je","Ke","Le","contains","compareDocumentPosition","Me","contentWindow","Ne","contentEditable","Oe","focusedElem","selectionRange","documentElement","start","selectionStart","selectionEnd","getSelection","extend","rangeCount","anchorNode","anchorOffset","focusNode","focusOffset","createRange","setStart","removeAllRanges","addRange","setEnd","left","scrollLeft","top","scrollTop","focus","Pe","Qe","Re","Se","Te","Ue","Ve","We","animationend","animationiteration","animationstart","transitionend","Xe","Ye","Ze","$e","af","bf","cf","df","ef","ff","gf","hf","lf","mf","nf","Ub","instance","of","pf","qf","rf","sf","capture","passive","tf","uf","parentWindow","vf","wf","na","xa","$a","je","ke","unshift","xf","yf","zf","Af","Bf","Cf","Df","Ef","__html","Ff","setTimeout","Gf","clearTimeout","Hf","Jf","queueMicrotask","If","Kf","Lf","Mf","previousSibling","Nf","Of","Pf","Qf","Rf","Sf","Tf","Uf","Vf","Wf","Xf","Yf","contextTypes","__reactInternalMemoizedUnmaskedChildContext","__reactInternalMemoizedMaskedChildContext","Zf","childContextTypes","$f","ag","bg","getChildContext","cg","__reactInternalMemoizedMergedChildContext","dg","eg","fg","gg","hg","jg","kg","lg","mg","ng","og","pg","qg","rg","sg","tg","ug","vg","wg","xg","yg","zg","Ag","Bg","elementType","deletions","Cg","pendingProps","overflow","treeContext","retryLane","Dg","mode","Eg","Fg","Gg","memoizedProps","Hg","Ig","Jg","Kg","Lg","Mg","Ng","Og","Pg","Qg","Rg","Sg","childLanes","Tg","dependencies","firstContext","lanes","Ug","Vg","memoizedValue","Wg","Xg","Yg","interleaved","Zg","$g","ah","updateQueue","baseState","firstBaseUpdate","lastBaseUpdate","shared","pending","effects","bh","ch","eventTime","lane","payload","dh","eh","fh","gh","hh","ih","jh","kh","nh","_reactInternals","lh","mh","oh","shouldComponentUpdate","ph","contextType","qh","componentWillReceiveProps","UNSAFE_componentWillReceiveProps","rh","getDerivedStateFromProps","getSnapshotBeforeUpdate","UNSAFE_componentWillMount","componentWillMount","componentDidMount","sh","_stringRef","th","uh","vh","wh","xh","yh","implementation","zh","Ah","Bh","Ch","Dh","Eh","Fh","Gh","Hh","Ih","Jh","Kh","Lh","Mh","revealOrder","Nh","Oh","_workInProgressVersionPrimary","Ph","Qh","Rh","Sh","Th","Uh","Vh","Wh","Xh","Yh","Zh","$h","ai","bi","ci","baseQueue","queue","di","ei","fi","lastRenderedReducer","hasEagerState","eagerState","lastRenderedState","dispatch","gi","hi","ii","ji","ki","getSnapshot","li","mi","ni","lastEffect","stores","oi","pi","qi","ri","destroy","deps","si","ti","ui","vi","wi","xi","yi","zi","Ai","Bi","Ci","Di","Ei","Fi","Gi","Hi","Ii","Ji","readContext","useDeferredValue","useTransition","useMutableSource","useSyncExternalStore","useId","unstable_isNewReconciler","identifierPrefix","Ki","digest","Li","Mi","Ni","Oi","Pi","Qi","Ri","getDerivedStateFromError","componentDidCatch","Si","componentStack","Ti","pingCache","Ui","Vi","Wi","Xi","Yi","Zi","$i","aj","bj","cj","dj","ej","baseLanes","cachePool","transitions","fj","gj","hj","ij","jj","UNSAFE_componentWillUpdate","componentWillUpdate","componentDidUpdate","kj","lj","pendingContext","mj","Aj","Cj","Dj","nj","oj","pj","fallback","qj","rj","tj","dataset","dgst","uj","vj","_reactRetry","sj","subtreeFlags","wj","xj","isBackwards","rendering","renderingStartTime","last","tail","tailMode","yj","Ej","Fj","Gj","wasMultiple","multiple","suppressHydrationWarning","onclick","createElementNS","autoFocus","Hj","Ij","Jj","Kj","Lj","WeakSet","Mj","Nj","Oj","Qj","Rj","Sj","Tj","Uj","Vj","Wj","_reactRootContainer","Xj","Yj","Zj","ak","onCommitFiberUnmount","componentWillUnmount","bk","ck","dk","ek","fk","isHidden","gk","hk","display","ik","jk","kk","lk","__reactInternalSnapshotBeforeUpdate","src","Wk","mk","ceil","nk","ok","pk","qk","rk","sk","tk","uk","Infinity","vk","wk","xk","yk","zk","Ak","Bk","Ck","Dk","Ek","callbackNode","expirationTimes","expiredLanes","wc","callbackPriority","ig","Fk","Gk","Hk","Ik","Jk","Kk","Lk","Mk","Nk","Ok","Pk","finishedWork","finishedLanes","Qk","timeoutHandle","Rk","Sk","Tk","Uk","Vk","mutableReadLanes","Bc","Pj","onCommitFiberRoot","mc","onRecoverableError","Xk","onPostCommitFiberRoot","Yk","Zk","al","pendingChildren","bl","mutableSourceEagerHydrationData","cl","pendingSuspenseBoundaries","dl","el","fl","gl","hl","il","jl","zj","$k","ll","reportError","ml","_internalRoot","nl","ol","pl","ql","sl","rl","unmount","unstable_scheduleHydration","form","tl","usingClientEntryPoint","Events","ul","findFiberByHostInstance","bundleType","rendererPackageName","vl","rendererConfig","overrideHookState","overrideHookStateDeletePath","overrideHookStateRenamePath","overrideProps","overridePropsDeletePath","overridePropsRenamePath","setErrorHandler","setSuspenseHandler","scheduleUpdate","currentDispatcherRef","findHostInstanceByFiber","findHostInstancesForRefresh","scheduleRefresh","scheduleRoot","setRefreshHandler","getCurrentFiber","reconcilerVersion","__REACT_DEVTOOLS_GLOBAL_HOOK__","wl","isDisabled","supportsFiber","inject","createPortal","createRoot","unstable_strictMode","findDOMNode","flushSync","hydrateRoot","hydratedSources","_getVersion","_source","unmountComponentAtNode","unstable_batchedUpdates","unstable_renderSubtreeIntoContainer","checkDCE","defaultMethod","defaultEncType","isHtmlElement","object","createSearchParams","createBrowserRouter","parseHydrationData","enhanceManualRouteObjects","createHashRouter","__staticRouterHydrationData","deserializeErrors","__type","BrowserRouter","historyRef","React","Router","navigationType","navigator","HashRouter","HistoryRouter","Link","relative","reloadDocument","useHref","internalOnClick","useLinkClickHandler","NavLink","ariaCurrentProp","classNameProp","styleProp","useResolvedPath","useLocation","routerState","DataRouterStateContext","NavigationContext","nextLocationPathname","isActive","isPending","ariaCurrent","Form","FormImpl","forwardedRef","onSubmit","fetcherKey","submit","useSubmitImpl","useFormAction","submitter","submitMethod","ScrollRestoration","storageKey","useScrollRestoration","DataRouterHook","DataRouterStateHook","useDataRouterContext","hookName","ctx","DataRouterContext","useDataRouterState","replaceProp","useNavigate","isModifiedEvent","shouldProcessLinkClick","useSearchParams","defaultInit","defaultSearchParamsRef","locationSearch","defaultSearchParams","getSearchParamsForLocation","setSearchParams","nextInit","navigateOptions","newSearchParams","useSubmit","UseSubmitImpl","defaultAction","encType","submissionTrigger","FormData","isButtonElement","isInputElement","getFormSubmissionInfo","routeContext","RouteContext","fetcherId","useFetcher","UseFetcher","createFetcherForm","load","fetcherWithComponents","useFetchers","UseFetchers","SCROLL_RESTORATION_STORAGE_KEY","UseScrollRestoration","useMatches","useNavigation","scrollRestoration","useBeforeUnload","scrollY","sessionStorage","setItem","sessionPositions","getItem","disableScrollRestoration","getElementById","scrollIntoView","scrollTo","checkIfSnapshotChanged","inst","latestGetSnapshot","prevValue","nextValue","shim","getServerSnapshot","DataStaticRouterContext","AwaitContext","LocationContext","outlet","RouteErrorContext","useInRouterContext","joinedPathname","useNavigationType","useMatch","routePathnamesJson","activeRef","OutletContext","useOutletContext","useOutlet","useParams","routeMatch","useRoutes","dataRouterStateContext","parentMatches","parentParams","parentPathnameBase","locationFromContext","parsedLocationArg","renderedMatches","_renderMatches","NavigationType","DefaultErrorElement","useRouteError","lightgrey","preStyles","padding","backgroundColor","codeStyles","fontStyle","RenderErrorBoundary","super","errorInfo","component","RenderedRoute","dataStaticRouterContext","errorElement","_deepestRenderedBoundaryId","dataRouterState","errorIndex","reduceRight","getChildren","AwaitRenderStatus","useCurrentRouteId","useRouteContext","thisRoute","UseNavigation","useRevalidator","dataRouterContext","UseRevalidator","UseMatches","useLoaderData","UseLoaderData","useRouteLoaderData","UseRouteLoaderData","useActionData","UseActionData","UseRouteError","useAsyncValue","useAsyncError","RouterProvider","fallbackElement","useSyncExternalStoreShim","static","Routes","MemoryRouter","Navigate","Outlet","Route","_props","basenameProp","locationProp","staticProp","navigationContext","trailingPathname","createRoutesFromChildren","Await","AwaitErrorBoundary","ResolveAwait","neverSettledPromise","renderError","success","renderMatches","routeClone","createMemoryRouter","_defaultValue","_globalName","startTransition","unstable_act","sortIndex","performance","setImmediate","startTime","expirationTime","priorityLevel","scheduling","isInputPending","MessageChannel","port2","port1","onmessage","postMessage","unstable_Profiling","unstable_continueExecution","unstable_forceFrameRate","floor","unstable_getFirstCallbackNode","unstable_next","unstable_pauseExecution","unstable_runWithPriority","delay","unstable_wrapCallback","Kotlin","$module$kotlin_js","defineInlineFunction","Kind","INTERFACE","wrapFunction","CLASS","csstype","Content_61zpoe$","CSS","$module$_emotion_css","$module$kotlin_csstype","$module$_emotion_styled","$$importsForInline$$","kotlin","collections","get_lastIndex_55thoc$","IndexOutOfBoundsException","AbstractList","toSet_us0mfu$","Unit","coroutines","intrinsics","COROUTINE_SUSPENDED","CoroutineImpl","sequences","iterator_o0x0bg$","$module$react","get_js","js","get_js_1yb8b7$","IllegalArgumentException_init_pdl1vj$","react","get_react_2wnr96$","$receiver","$module$kotlin_react_core","Kind_OBJECT","OBJECT","ReactHTML","ReactHTML_instance","$metadata$","kind","simpleName","interfaces","package$react","package$dom","dom","package$html","html","CHILDREN","Kind_INTERFACE","Kind_CLASS","single","single_us0mfu$","ChildrenBuilder","ChildrenBuilder_0","ChildrenBuilderImpl","FC$lambda","closure$block","createElementOrNull","closure$props","FC$lambda$lambda","create_0","block","tmp$","builder","tmp$_0","unaryPlus_lapc4x$","child_m8hz59$","unaryPlus_kzna72$","unaryPlus_pdl1vz$","child_sv8fgx$","invoke_r7bapy$","invoke_gax9jq$","invoke_1uzlnf$","closure$value","invoke_snd3xh$","createChildrenBuilder","FC_4y0n3r$","create_r7bapy$","create_gax9jq$","createElementOrNull_khlwf$","isBooleanArray","Int8Array","$type$","isByteArray","isShortArray","Int16Array","isCharArray","Uint16Array","isIntArray","Int32Array","isFloatArray","Float32Array","isDoubleArray","Float64Array","isLongArray","isArrayish","ArrayBuffer","isView","arrayToString","toByte","toChar","numberToInt","Long","toInt","doubleToInt","toBoxedChar","BoxedChar","unboxChar","equals","obj1","obj2","hashCode","objType","getObjectHashCode","numberHashCode","Number","getStringHashCode","buf","bufFloat64","bufInt32","lowIndex","highIndex","OBJECT_HASH_CODE_PROPERTY_NAME","throwMarkerError","imul","isInheritanceFromInterface","ctor","iface","metadata","superPrototype","superConstructor","identityHashCode","low_","low","high_","high","IntCache_","fromInt","cachedObj","fromNumber","ZERO","TWO_PWR_63_DBL_","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL_","fromBits","lowBits","highBits","fromString","radix","opt_radix","radixToPower","pow","parseInt","power","multiply","TWO_PWR_16_DBL_","TWO_PWR_24_DBL_","TWO_PWR_31_DBL_","TWO_PWR_48_DBL_","TWO_PWR_64_DBL_","ONE","NEG_ONE","TWO_PWR_24_","toNumber","getLowBitsUnsigned","isZero","isNegative","equalsLong","radixLong","div","rem","subtract","remDiv","digits","getHighBits","getLowBits","getNumBitsAbs","bit","isOdd","other","notEqualsLong","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","b00","approx","shiftRight","shiftLeft","res","log2","approxRes","approxRem","modulo","and","or","xor","numBits","shiftRightUnsigned","compareTo_11rb$","inc","dec","unaryPlus","unaryMinus","inv","rangeTo","ranges","LongRange","fun","suspendCall","coroutineResult","coroutineReceiver","compareTo","typeA","doubleCompareTo","primitiveCompareTo","imulEmulated","doubleToRawBits","doubleFromBits","ensureNotNull","throwNPE","searchString","lastIndexOf","subjectString","sign","trunc","NaN","taylor_2_bound","sqrt","taylor_n_bound","upper_taylor_2_bound","upper_taylor_n_bound","sinh","exp","y1","isFinite","cosh","tanh","asinh","acosh","atanh","log1p","x2","x3","expm1","hypot","log10","LOG10E","LOG2E","asUint","fill","relativeStart","relativeEnd","finalValue","normalizeOffset","typedArraySlice","subarray","arrays","TypedArray","Function","self","totalOrderComparator","compareFunction","callGetter","thisObject","klass","propertyDescriptor","isType","proto","klassMetadata","isNumber","isChar","isComparable","Comparable","isCharSequence","CharSequence","ordinal","MIN_HIGH_SURROGATE","MAX_LOW_SURROGATE","initValue","fillArrayVal","NoSuchElementException","IntRange","destination","item","emptySet","setOf","toCollection","hasNext","isEmpty","checkIndexOverflow","emptyList","listOf","optimizeReadOnlyList","optimizeReadOnlySet","separator","postfix","limit","truncated","buffer","step","EMPTY","minimumValue","maximumValue","endInclusive","emptySequence","TakeSequence","TransformingSequence","NotImplementedError","BooleanIterator","ByteIterator","ShortIterator","CharIterator","IntIterator","FloatIterator","DoubleIterator","LongIterator","currentResult","isFailure","currentException","exceptionOrNull","doResume","outcome","exception","completion","Result","createFailure","intercepted","receiver","cause","Exception","RuntimeException","ArrayList","fromIndex","toIndex","comparator","bottom","middle","needle","binarySearchRange","diff","copyToArrayImpl","list","copyToArray","collectionsSort","endIndex","destinationOffset","rangeSize","arrayBufferIsView","subrange","throwIndexOverflow","expectedSize","AbstractCollection","AbstractMutableCollection","AbstractMutableList","AbstractMap","AbstractMutableSet","elements","_stableSortingIsSupported","comparison","getStableSortingIsSupported","mergeSort","median","leftIndex","rightIndex","right","leftValue","rightValue","checkIsMutable","remove","modified","it","_index","changed","times","hasPrevious","newValue","oldValue","iter","modCount","arrayCopy","value1","value2","internalMap","equality","InternalHashCodeMap","initialCapacity","loadFactor","createJsMap","BaseOutput","BufferedOutput","initialResult","ClassCastException","NEGATIVE_INFINITY","toRawBits","bits","round","POSITIVE_INFINITY","isInfinite","hi26","INV_2_26","low27","INV_2_53","KClassImpl","jClass","createEntrySet","chainOrEntry","chain","isChain","chainSize","keyIndex","itemIndex","lastEntry","_head","_tail","old","newEntry","build","println","outputStream","write","messageString","cur","jsClass","PrimitiveKClassImpl","functionClasses","arity","getKClassM","getKClass1","jClasses","ErrorKClass","stringClass","SimpleKClassImpl","kClass","content","uppercase","MAX_HIGH_SURROGATE","MIN_LOW_SURROGATE","isWhitespaceImpl","toIntOrNull","numberFormatError","toLongOrNull","isBlank","digitToIntImpl","toFlags","reversed","isLowSurrogate","isHighSurrogate","concatToString","toInsert","newLength","dstIndex","stringCsq","reset","findNext","substituteGroupRefs","lastStart","foundMatch","nonGlobalOptions","subSequence","requireNonNegativeLimit","sequence","literal","readGroupName","groups","groupName","readGroupIndex","groupIndex","newGroupIndex","groupCount","ignoreCase","JsMath","n1","n2","thisChar","otherChar","uppercaseChar","regionMatches","isWhitespace","regionMatchesImpl","thisOffset","otherOffset","decimals","nativeSign","rounded","toFixed","toPrecision","nativeLog10","positive","positiveString","sourceUnit","targetUnit","sourceCompareTarget","scale","code1","code2","MatchGroup","nextIndex","otherIterator","elem","elemOther","AbstractSet","ourValue","ArrayAsCollection","ArithmeticException","isVarargs","pairs","putAll","filterInPlace","predicateResultToRemove","writeIndex","readIndex","removeIndex","SequenceBuilderIterator","nextStep","SequenceScope","nextByte","nextShort","nextInt","nextLong","nextFloat","nextDouble","nextBoolean","throwOnFailure","GeneratorSequence","seedFunction","nextFunction","FlatteningSequence","itemIterator","nextItemIterator","SubSequence","nextItem","nextState","safe","getOrThrow","removed","interceptor","CombinedContext","baseKey","operation","initial","newLeft","mod","differenceModulo","Random","defaultPlatformRandom","accumulator","until","checkRangeBounds","fastLog2","bitCount","nLow","nHigh","rnd","doubleFromParts","r1","nextDown","steps","remainder","vr","seed","nativeClz32","boundsErrorMessage","v0","takeUpperBits","seed1","seed2","CharProgression","CharRange","IntProgression","LongProgression","getProgressionLastElement","CharProgressionIterator","rangeStart","rangeEnd","IntProgressionIterator","LongProgressionIterator","thisUpper","otherUpper","checkRadix","firstChar","limitBeforeMul","limitForMaxRadix","digitOf","digit","NumberFormatException","padChar","padStart","chars","indices","indexOfAny","charArrayOf","currentStartIndex","findAnyOf","currentIndex","second","endExclusive","nextSearchIndex","MAX_NANOS","MAX_MILLIS","MAX_NANOS_IN_MILLIS","Duration","durationOfMillis","groupValues","convertDurationUnit","toDuration","parseDuration","IllegalArgumentException","unit","durationOfNanos","convertDurationUnitOverflow","maxNsInUnit","valueInNs","roundToLong","nanos","durationOfMillisNormalized","hasSign","isTimeComponent","prevUnit","durationUnitByIsoChar","dotIndex","parseOverLongIsoComponent","whole","toDouble","strictIso","infinityString","INFINITE","afterFirst","allowSpaces","unitName","durationUnitByShortName","toLong","millis","normalNanos","normalMillis","nanosToMillis","millisToNanos","shortName","isoChar","normalValue","unitDiscriminator","durationOfNanosNormalized","otherNanos","thisMillis","otherMillis","resultMillis","otherNanoRemainder","remNanos","totalMillis","roundToInt","intScale","isPositive","coarserUnit","compareBits","inWholeDays","hoursComponent","minutesComponent","secondsComponent","nanosecondsComponent","inWholeHours","inWholeMinutes","inWholeSeconds","inWholeNanoseconds","inWholeMilliseconds","absoluteValue","days","hours","minutes","seconds","nanoseconds","components","hasDays","hasHours","hasMinutes","hasSeconds","fractional","fractionalSize","fracString","isoZeroes","nonZeroDigits","formatToExactDecimals","Pair","that","sortWith","asList","booleanArrayIterator","byteArrayIterator","shortArrayIterator","charArrayIterator","intArrayIterator","longArrayIterator","floatArrayIterator","doubleArrayIterator","captureStackTrace","delegate","NullPointerException","intClass","doubleClass","booleanClass","functionClass","booleanArrayClass","charArrayClass","byteArrayClass","shortArrayClass","intArrayClass","longArrayClass","floatArrayClass","doubleArrayClass","arrayClass","anyClass","throwableClass","emptyMap","toSet","createCoroutineUnintercepted","delimiters","currentOffset","isLimited","DelimitedRangesSequence","collectionSizeOrDefault","isNode","NodeJsOutput","BufferedOutputToConsoleLog","Comparator","AppConfig","appConfig","routing","controllerResult","pageStateChanged","loadingImagePath","big","textAlign","model","NotFoundModel","pokemonIndex","pageState","Api","PokemonIndexService","HomePageController","pokemonIndexService","PokemonListController","SinglePokemonController","mapOf","applicationRoot","FC","renderPage","notFoundReason","getPokemonList","launch","MainScope","isModelAndView","calcStatValue","baseAttack","attack","level","baseDefense","defense","baseStamina","stamina","ABSOLUTE_MAX_LEVEL","cp","calculatedStatistics","iv","baseStat","msg","MoveSetsMapper","pokemonDto","fastMoves","chargedMoves","HomePageModel","moveDto","pvp","energy","duration","pve","PvPMoveSetsMapper","PvEMoveSetsMapper","fast","MissingDataException","charged","MoveSetStatsCalculator","fastMove","chargedMove","MoveSet","Attack","elite","calculator","timeToFirstAttack","meanTimeBetweenAttacks","moves","quick","types","primary","secondary","arr1","mapper","effectiveFastAttackDps","chargedAttackDps","fastAttackDps","chargedAttackDurationPerSecond","SECONDS","fastAttackEnergyGain","effectiveFastAttackEnergyGain","move","stab","pokedexNumber","fetchPokemonIndex","pokemonDtos","PokemonEntry","PokemonListModel","PokemonIndividualValuesState","fetchFastMoves","fetchChargedMoves","await","maybePokemon","SinglePokemonModel","coroutineScope","pokemon","uniqueId","pokemonIvs","currentStats","ivs","CpCalculator","IVs","MAX_GREAT_CP","MAX_ULTRA_CP","BASIC_MAX_LEVEL","ControllerResult","reason","exportForJs","eval","PokemonForm","DEFAULT","strongAgainst","weakAgainst","superWeakAgainst","decimalPlaces","numberAsString","part2","margin","medium","paddingTop","paddingLeft","paddingBottom","paddingRight","textTransform","pointer","primaryHovered","widgetHeader","clickablePrimary","borderColor","lightBorder","borderStyle","borderBottomWidth","borderLeftWidth","borderTopWidth","borderRightWidth","small","eliteAttackWrapper","regularAttackWrapper","PokemonTypeIcon","span","borderRadius","wrapper","secondarySpecial","pokemonId","pokemonForm","prettyName","typeIconWrapper","typesWrapper","hardiness","info","staticStatsWrapper","StaticStat","widgetWrapper","h1","secondaryText","marginRight","fontSize","marginLeft","marginBottom","semiBig","pagePath","breadcrumbsWrapper","page","getFullPath","textDecoration","logoPath","logoWrapper","alwaysOnTop","searchInputWrapper","SearchBox","headerWrapper","mouseEvent","getBoundingClientRect","labelIvMax","none","inputWrapper","labelsWrapper","bar","iv0","ivMax","componentWrapper","IVBarStyles","maxHeight","Content","float","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","pointerEvents","marginTop","createStateWith","stats","onChangeFunction","upperStatsWrapper","enter","appearance","onBlur","onKeyUp","lowerStatsWrapper","innerWrapper","IVBar","outerWrapper","modifier","border","thickBorder","clickableWidgetHeader","contentWrapper","stat","group","cell","direction","arrowPrevious","arrowNext","fontFamily","arial","iconPath","dimensions","pokemonPagePath","placeholder","onFocus","pokemonName","selectedEntryWrapper","entryWrapper","searchResultsFooter","searchResultsWrapperInner","onMouseDown","searchResultsWrapper","term","hideSearchResults","take","getFilteredData","forms","PokemonFormEntry","calculateOrder","toFormEntries","isDefault","highest","lowest","thick","borderLeft","borderRight","borderBottom","boxSizing","outline","searchTerms","headerCell","title","row","header","table","pathSegment","joinToString","urlParams","Page","baseUrl","searchBoxWrapperInner","searchBoxWrapper","pokemonListPagePath","strong","textWrapper","h2","maxWidth","huge","h3","secondaryLink","secondaryLinkHovered","Header","Breadcrumbs","nbsp","Sort","ascending","sortable","quickAttack","chargedAttack","format","dps","ascendFactor","pageWrapper","columnId","smaller","spacer","NavigationArrow","leftWrapper","BasicPokemonInfo","focusedElement","bestGreatLeagueStats","bestUltraLeagueStats","bestStatsWithoutBoost","rightWrapper","IVStatsWidget","LeagueStatsWidget","moveSets","moveSetsTable","__webpack_module_cache__","leafPrototypes","getProto","__webpack_require__","moduleId","cachedModule","__webpack_modules__","ns","def","definition","__webpack_exports__"],"sourceRoot":""}